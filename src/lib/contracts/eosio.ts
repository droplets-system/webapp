import type {
    Action,
    AssetType,
    BytesType,
    Checksum256Type,
    Float64Type,
    Int64Type,
    NameType,
    PublicKeyType,
    UInt128Type,
    UInt16Type,
    UInt32Type,
    UInt64Type,
    UInt8Type,
    VarUIntType,
} from '@wharfkit/antelope'
import {
    ABI,
    Asset,
    Blob,
    BlockTimestamp,
    Bytes,
    Checksum256,
    Float64,
    Int64,
    Name,
    PublicKey,
    Struct,
    TimePoint,
    TimePointSec,
    UInt128,
    UInt16,
    UInt32,
    UInt64,
    UInt8,
    VarUInt,
    Variant,
} from '@wharfkit/antelope'
import type {ActionOptions, ContractArgs, PartialBy, Table} from '@wharfkit/contract'
import {Contract as BaseContract} from '@wharfkit/contract'
export const abiBlob = Blob.from(
    'DmVvc2lvOjphYmkvMS4yAhdibG9ja19zaWduaW5nX2F1dGhvcml0eSJ2YXJpYW50X2Jsb2NrX3NpZ25pbmdfYXV0aG9yaXR5X3YwF2Jsb2NrY2hhaW5fcGFyYW1ldGVyc190GGJsb2NrY2hhaW5fcGFyYW1ldGVyc192MXAIYWJpX2hhc2gAAgVvd25lcgRuYW1lBGhhc2gLY2hlY2tzdW0yNTYUYWN0aW9uX3JldHVybl9idXlyYW0ABQVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUIcXVhbnRpdHkFYXNzZXQPYnl0ZXNfcHVyY2hhc2VkBWludDY0CXJhbV9ieXRlcwVpbnQ2NBlhY3Rpb25fcmV0dXJuX3JhbXRyYW5zZmVyAAUEZnJvbQRuYW1lAnRvBG5hbWUFYnl0ZXMFaW50NjQOZnJvbV9yYW1fYnl0ZXMFaW50NjQMdG9fcmFtX2J5dGVzBWludDY0FWFjdGlvbl9yZXR1cm5fc2VsbHJhbQAEB2FjY291bnQEbmFtZQhxdWFudGl0eQVhc3NldApieXRlc19zb2xkBWludDY0CXJhbV9ieXRlcwVpbnQ2NAhhY3RpdmF0ZQABDmZlYXR1cmVfZGlnZXN0C2NoZWNrc3VtMjU2CWF1dGhvcml0eQAECXRocmVzaG9sZAZ1aW50MzIEa2V5cwxrZXlfd2VpZ2h0W10IYWNjb3VudHMZcGVybWlzc2lvbl9sZXZlbF93ZWlnaHRbXQV3YWl0cw13YWl0X3dlaWdodFtdCmJpZF9yZWZ1bmQAAgZiaWRkZXIEbmFtZQZhbW91bnQFYXNzZXQHYmlkbmFtZQADBmJpZGRlcgRuYW1lB25ld25hbWUEbmFtZQNiaWQFYXNzZXQJYmlkcmVmdW5kAAIGYmlkZGVyBG5hbWUHbmV3bmFtZQRuYW1lDGJsb2NrX2hlYWRlcgAICXRpbWVzdGFtcAZ1aW50MzIIcHJvZHVjZXIEbmFtZQljb25maXJtZWQGdWludDE2CHByZXZpb3VzC2NoZWNrc3VtMjU2EXRyYW5zYWN0aW9uX21yb290C2NoZWNrc3VtMjU2DGFjdGlvbl9tcm9vdAtjaGVja3N1bTI1NhBzY2hlZHVsZV92ZXJzaW9uBnVpbnQzMg1uZXdfcHJvZHVjZXJzEnByb2R1Y2VyX3NjaGVkdWxlPxFibG9ja19pbmZvX3JlY29yZAADB3ZlcnNpb24FdWludDgMYmxvY2tfaGVpZ2h0BnVpbnQzMg9ibG9ja190aW1lc3RhbXAKdGltZV9wb2ludBpibG9ja19zaWduaW5nX2F1dGhvcml0eV92MAACCXRocmVzaG9sZAZ1aW50MzIEa2V5cwxrZXlfd2VpZ2h0W10VYmxvY2tjaGFpbl9wYXJhbWV0ZXJzABETbWF4X2Jsb2NrX25ldF91c2FnZQZ1aW50NjQadGFyZ2V0X2Jsb2NrX25ldF91c2FnZV9wY3QGdWludDMyGW1heF90cmFuc2FjdGlvbl9uZXRfdXNhZ2UGdWludDMyHmJhc2VfcGVyX3RyYW5zYWN0aW9uX25ldF91c2FnZQZ1aW50MzIQbmV0X3VzYWdlX2xlZXdheQZ1aW50MzIjY29udGV4dF9mcmVlX2Rpc2NvdW50X25ldF91c2FnZV9udW0GdWludDMyI2NvbnRleHRfZnJlZV9kaXNjb3VudF9uZXRfdXNhZ2VfZGVuBnVpbnQzMhNtYXhfYmxvY2tfY3B1X3VzYWdlBnVpbnQzMhp0YXJnZXRfYmxvY2tfY3B1X3VzYWdlX3BjdAZ1aW50MzIZbWF4X3RyYW5zYWN0aW9uX2NwdV91c2FnZQZ1aW50MzIZbWluX3RyYW5zYWN0aW9uX2NwdV91c2FnZQZ1aW50MzIYbWF4X3RyYW5zYWN0aW9uX2xpZmV0aW1lBnVpbnQzMh5kZWZlcnJlZF90cnhfZXhwaXJhdGlvbl93aW5kb3cGdWludDMyFW1heF90cmFuc2FjdGlvbl9kZWxheQZ1aW50MzIWbWF4X2lubGluZV9hY3Rpb25fc2l6ZQZ1aW50MzIXbWF4X2lubGluZV9hY3Rpb25fZGVwdGgGdWludDE2E21heF9hdXRob3JpdHlfZGVwdGgGdWludDE2GGJsb2NrY2hhaW5fcGFyYW1ldGVyc192MRVibG9ja2NoYWluX3BhcmFtZXRlcnMBHG1heF9hY3Rpb25fcmV0dXJuX3ZhbHVlX3NpemUHdWludDMyJAZidXlyYW0AAwVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUFcXVhbnQFYXNzZXQLYnV5cmFtYnl0ZXMAAwVwYXllcgRuYW1lCHJlY2VpdmVyBG5hbWUFYnl0ZXMGdWludDMyCmJ1eXJhbXNlbGYAAgdhY2NvdW50BG5hbWUFcXVhbnQFYXNzZXQGYnV5cmV4AAIEZnJvbQRuYW1lBmFtb3VudAVhc3NldAtjYW5jZWxkZWxheQACDmNhbmNlbGluZ19hdXRoEHBlcm1pc3Npb25fbGV2ZWwGdHJ4X2lkC2NoZWNrc3VtMjU2CmNmZ3Bvd2VydXAAAQRhcmdzDnBvd2VydXBfY29uZmlnDGNsYWltcmV3YXJkcwABBW93bmVyBG5hbWUIY2xvc2VyZXgAAQVvd25lcgRuYW1lDGNuY2xyZXhvcmRlcgABBW93bmVyBG5hbWUJY29ubmVjdG9yAAIHYmFsYW5jZQVhc3NldAZ3ZWlnaHQHZmxvYXQ2NAtjb25zb2xpZGF0ZQABBW93bmVyBG5hbWUKZGVmY3B1bG9hbgADBGZyb20EbmFtZQhsb2FuX251bQZ1aW50NjQGYW1vdW50BWFzc2V0CmRlZm5ldGxvYW4AAwRmcm9tBG5hbWUIbG9hbl9udW0GdWludDY0BmFtb3VudAVhc3NldApkZWxlZ2F0ZWJ3AAUEZnJvbQRuYW1lCHJlY2VpdmVyBG5hbWUSc3Rha2VfbmV0X3F1YW50aXR5BWFzc2V0EnN0YWtlX2NwdV9xdWFudGl0eQVhc3NldAh0cmFuc2ZlcgRib29sE2RlbGVnYXRlZF9iYW5kd2lkdGgABARmcm9tBG5hbWUCdG8EbmFtZQpuZXRfd2VpZ2h0BWFzc2V0CmNwdV93ZWlnaHQFYXNzZXQKZGVsZXRlYXV0aAADB2FjY291bnQEbmFtZQpwZXJtaXNzaW9uBG5hbWUNYXV0aG9yaXplZF9ieQVuYW1lJAdkZXBvc2l0AAIFb3duZXIEbmFtZQZhbW91bnQFYXNzZXQSZW9zaW9fZ2xvYmFsX3N0YXRlFWJsb2NrY2hhaW5fcGFyYW1ldGVycw0MbWF4X3JhbV9zaXplBnVpbnQ2NBh0b3RhbF9yYW1fYnl0ZXNfcmVzZXJ2ZWQGdWludDY0D3RvdGFsX3JhbV9zdGFrZQVpbnQ2NB1sYXN0X3Byb2R1Y2VyX3NjaGVkdWxlX3VwZGF0ZRRibG9ja190aW1lc3RhbXBfdHlwZRhsYXN0X3BlcnZvdGVfYnVja2V0X2ZpbGwKdGltZV9wb2ludA5wZXJ2b3RlX2J1Y2tldAVpbnQ2NA9wZXJibG9ja19idWNrZXQFaW50NjQTdG90YWxfdW5wYWlkX2Jsb2NrcwZ1aW50MzIVdG90YWxfYWN0aXZhdGVkX3N0YWtlBWludDY0G3RocmVzaF9hY3RpdmF0ZWRfc3Rha2VfdGltZQp0aW1lX3BvaW50G2xhc3RfcHJvZHVjZXJfc2NoZWR1bGVfc2l6ZQZ1aW50MTYadG90YWxfcHJvZHVjZXJfdm90ZV93ZWlnaHQHZmxvYXQ2NA9sYXN0X25hbWVfY2xvc2UUYmxvY2tfdGltZXN0YW1wX3R5cGUTZW9zaW9fZ2xvYmFsX3N0YXRlMgAFEW5ld19yYW1fcGVyX2Jsb2NrBnVpbnQxNhFsYXN0X3JhbV9pbmNyZWFzZRRibG9ja190aW1lc3RhbXBfdHlwZQ5sYXN0X2Jsb2NrX251bRRibG9ja190aW1lc3RhbXBfdHlwZRx0b3RhbF9wcm9kdWNlcl92b3RlcGF5X3NoYXJlB2Zsb2F0NjQIcmV2aXNpb24FdWludDgTZW9zaW9fZ2xvYmFsX3N0YXRlMwACFmxhc3RfdnBheV9zdGF0ZV91cGRhdGUKdGltZV9wb2ludBx0b3RhbF92cGF5X3NoYXJlX2NoYW5nZV9yYXRlB2Zsb2F0NjQTZW9zaW9fZ2xvYmFsX3N0YXRlNAADD2NvbnRpbnVvdXNfcmF0ZQdmbG9hdDY0FGluZmxhdGlvbl9wYXlfZmFjdG9yBWludDY0DnZvdGVwYXlfZmFjdG9yBWludDY0DmV4Y2hhbmdlX3N0YXRlAAMGc3VwcGx5BWFzc2V0BGJhc2UJY29ubmVjdG9yBXF1b3RlCWNvbm5lY3RvcgtmdW5kY3B1bG9hbgADBGZyb20EbmFtZQhsb2FuX251bQZ1aW50NjQHcGF5bWVudAVhc3NldAtmdW5kbmV0bG9hbgADBGZyb20EbmFtZQhsb2FuX251bQZ1aW50NjQHcGF5bWVudAVhc3NldARpbml0AAIHdmVyc2lvbgl2YXJ1aW50MzIEY29yZQZzeW1ib2wKa2V5X3dlaWdodAACA2tleQpwdWJsaWNfa2V5BndlaWdodAZ1aW50MTYMbGltaXRhdXRoY2hnAAMHYWNjb3VudARuYW1lC2FsbG93X3Blcm1zBm5hbWVbXQ5kaXNhbGxvd19wZXJtcwZuYW1lW10IbGlua2F1dGgABQdhY2NvdW50BG5hbWUEY29kZQRuYW1lBHR5cGUEbmFtZQtyZXF1aXJlbWVudARuYW1lDWF1dGhvcml6ZWRfYnkFbmFtZSQJbG9nYnV5cmFtAAUFcGF5ZXIEbmFtZQhyZWNlaXZlcgRuYW1lCHF1YW50aXR5BWFzc2V0BWJ5dGVzBWludDY0CXJhbV9ieXRlcwVpbnQ2NAxsb2dyYW1jaGFuZ2UAAwVvd25lcgRuYW1lBWJ5dGVzBWludDY0CXJhbV9ieXRlcwVpbnQ2NApsb2dzZWxscmFtAAQHYWNjb3VudARuYW1lCHF1YW50aXR5BWFzc2V0BWJ5dGVzBWludDY0CXJhbV9ieXRlcwVpbnQ2NAttdmZyc2F2aW5ncwACBW93bmVyBG5hbWUDcmV4BWFzc2V0C212dG9zYXZpbmdzAAIFb3duZXIEbmFtZQNyZXgFYXNzZXQIbmFtZV9iaWQABAduZXduYW1lBG5hbWULaGlnaF9iaWRkZXIEbmFtZQhoaWdoX2JpZAVpbnQ2NA1sYXN0X2JpZF90aW1lCnRpbWVfcG9pbnQKbmV3YWNjb3VudAAEB2NyZWF0b3IEbmFtZQRuYW1lBG5hbWUFb3duZXIJYXV0aG9yaXR5BmFjdGl2ZQlhdXRob3JpdHkHb25ibG9jawABBmhlYWRlcgxibG9ja19oZWFkZXIHb25lcnJvcgACCXNlbmRlcl9pZAd1aW50MTI4CHNlbnRfdHJ4BWJ5dGVzGXBhaXJfdGltZV9wb2ludF9zZWNfaW50NjQAAgVmaXJzdA50aW1lX3BvaW50X3NlYwZzZWNvbmQFaW50NjQQcGVybWlzc2lvbl9sZXZlbAACBWFjdG9yBG5hbWUKcGVybWlzc2lvbgRuYW1lF3Blcm1pc3Npb25fbGV2ZWxfd2VpZ2h0AAIKcGVybWlzc2lvbhBwZXJtaXNzaW9uX2xldmVsBndlaWdodAZ1aW50MTYHcG93ZXJ1cAAGBXBheWVyBG5hbWUIcmVjZWl2ZXIEbmFtZQRkYXlzBnVpbnQzMghuZXRfZnJhYwVpbnQ2NAhjcHVfZnJhYwVpbnQ2NAttYXhfcGF5bWVudAVhc3NldA5wb3dlcnVwX2NvbmZpZwAEA25ldBdwb3dlcnVwX2NvbmZpZ19yZXNvdXJjZQNjcHUXcG93ZXJ1cF9jb25maWdfcmVzb3VyY2UMcG93ZXJ1cF9kYXlzB3VpbnQzMj8PbWluX3Bvd2VydXBfZmVlBmFzc2V0Pxdwb3dlcnVwX2NvbmZpZ19yZXNvdXJjZQAIFGN1cnJlbnRfd2VpZ2h0X3JhdGlvBmludDY0PxN0YXJnZXRfd2VpZ2h0X3JhdGlvBmludDY0PxRhc3N1bWVkX3N0YWtlX3dlaWdodAZpbnQ2ND8QdGFyZ2V0X3RpbWVzdGFtcA90aW1lX3BvaW50X3NlYz8IZXhwb25lbnQIZmxvYXQ2ND8KZGVjYXlfc2Vjcwd1aW50MzI/CW1pbl9wcmljZQZhc3NldD8JbWF4X3ByaWNlBmFzc2V0Pw1wb3dlcnVwX29yZGVyAAYHdmVyc2lvbgV1aW50OAJpZAZ1aW50NjQFb3duZXIEbmFtZQpuZXRfd2VpZ2h0BWludDY0CmNwdV93ZWlnaHQFaW50NjQHZXhwaXJlcw50aW1lX3BvaW50X3NlYw1wb3dlcnVwX3N0YXRlAAUHdmVyc2lvbgV1aW50OANuZXQWcG93ZXJ1cF9zdGF0ZV9yZXNvdXJjZQNjcHUWcG93ZXJ1cF9zdGF0ZV9yZXNvdXJjZQxwb3dlcnVwX2RheXMGdWludDMyD21pbl9wb3dlcnVwX2ZlZQVhc3NldBZwb3dlcnVwX3N0YXRlX3Jlc291cmNlAA8HdmVyc2lvbgV1aW50OAZ3ZWlnaHQFaW50NjQMd2VpZ2h0X3JhdGlvBWludDY0FGFzc3VtZWRfc3Rha2Vfd2VpZ2h0BWludDY0FGluaXRpYWxfd2VpZ2h0X3JhdGlvBWludDY0E3RhcmdldF93ZWlnaHRfcmF0aW8FaW50NjQRaW5pdGlhbF90aW1lc3RhbXAOdGltZV9wb2ludF9zZWMQdGFyZ2V0X3RpbWVzdGFtcA50aW1lX3BvaW50X3NlYwhleHBvbmVudAdmbG9hdDY0CmRlY2F5X3NlY3MGdWludDMyCW1pbl9wcmljZQVhc3NldAltYXhfcHJpY2UFYXNzZXQLdXRpbGl6YXRpb24FaW50NjQUYWRqdXN0ZWRfdXRpbGl6YXRpb24FaW50NjQVdXRpbGl6YXRpb25fdGltZXN0YW1wDnRpbWVfcG9pbnRfc2VjC3Bvd2VydXBleGVjAAIEdXNlcgRuYW1lA21heAZ1aW50MTYNcHJvZHVjZXJfaW5mbwAJBW93bmVyBG5hbWULdG90YWxfdm90ZXMHZmxvYXQ2NAxwcm9kdWNlcl9rZXkKcHVibGljX2tleQlpc19hY3RpdmUEYm9vbAN1cmwGc3RyaW5nDXVucGFpZF9ibG9ja3MGdWludDMyD2xhc3RfY2xhaW1fdGltZQp0aW1lX3BvaW50CGxvY2F0aW9uBnVpbnQxNhJwcm9kdWNlcl9hdXRob3JpdHkYYmxvY2tfc2lnbmluZ19hdXRob3JpdHkkDnByb2R1Y2VyX2luZm8yAAMFb3duZXIEbmFtZQ12b3RlcGF5X3NoYXJlB2Zsb2F0NjQZbGFzdF92b3RlcGF5X3NoYXJlX3VwZGF0ZQp0aW1lX3BvaW50DHByb2R1Y2VyX2tleQACDXByb2R1Y2VyX25hbWUEbmFtZRFibG9ja19zaWduaW5nX2tleQpwdWJsaWNfa2V5EXByb2R1Y2VyX3NjaGVkdWxlAAIHdmVyc2lvbgZ1aW50MzIJcHJvZHVjZXJzDnByb2R1Y2VyX2tleVtdB3JhbWJ1cm4AAwVvd25lcgRuYW1lBWJ5dGVzBWludDY0BG1lbW8Gc3RyaW5nC3JhbXRyYW5zZmVyAAQEZnJvbQRuYW1lAnRvBG5hbWUFYnl0ZXMFaW50NjQEbWVtbwZzdHJpbmcGcmVmdW5kAAEFb3duZXIEbmFtZQ5yZWZ1bmRfcmVxdWVzdAAEBW93bmVyBG5hbWUMcmVxdWVzdF90aW1lDnRpbWVfcG9pbnRfc2VjCm5ldF9hbW91bnQFYXNzZXQKY3B1X2Ftb3VudAVhc3NldAtyZWdwcm9kdWNlcgAECHByb2R1Y2VyBG5hbWUMcHJvZHVjZXJfa2V5CnB1YmxpY19rZXkDdXJsBnN0cmluZwhsb2NhdGlvbgZ1aW50MTYMcmVncHJvZHVjZXIyAAQIcHJvZHVjZXIEbmFtZRJwcm9kdWNlcl9hdXRob3JpdHkXYmxvY2tfc2lnbmluZ19hdXRob3JpdHkDdXJsBnN0cmluZwhsb2NhdGlvbgZ1aW50MTYIcmVncHJveHkAAgVwcm94eQRuYW1lB2lzcHJveHkEYm9vbAdyZW50Y3B1AAQEZnJvbQRuYW1lCHJlY2VpdmVyBG5hbWUMbG9hbl9wYXltZW50BWFzc2V0CWxvYW5fZnVuZAVhc3NldAdyZW50bmV0AAQEZnJvbQRuYW1lCHJlY2VpdmVyBG5hbWUMbG9hbl9wYXltZW50BWFzc2V0CWxvYW5fZnVuZAVhc3NldAtyZXhfYmFsYW5jZQAGB3ZlcnNpb24FdWludDgFb3duZXIEbmFtZQp2b3RlX3N0YWtlBWFzc2V0C3JleF9iYWxhbmNlBWFzc2V0C21hdHVyZWRfcmV4BWludDY0DnJleF9tYXR1cml0aWVzG3BhaXJfdGltZV9wb2ludF9zZWNfaW50NjRbXQhyZXhfZnVuZAADB3ZlcnNpb24FdWludDgFb3duZXIEbmFtZQdiYWxhbmNlBWFzc2V0CHJleF9sb2FuAAgHdmVyc2lvbgV1aW50OARmcm9tBG5hbWUIcmVjZWl2ZXIEbmFtZQdwYXltZW50BWFzc2V0B2JhbGFuY2UFYXNzZXQMdG90YWxfc3Rha2VkBWFzc2V0CGxvYW5fbnVtBnVpbnQ2NApleHBpcmF0aW9uCnRpbWVfcG9pbnQJcmV4X29yZGVyAAcHdmVyc2lvbgV1aW50OAVvd25lcgRuYW1lDXJleF9yZXF1ZXN0ZWQFYXNzZXQIcHJvY2VlZHMFYXNzZXQMc3Rha2VfY2hhbmdlBWFzc2V0Cm9yZGVyX3RpbWUKdGltZV9wb2ludAdpc19vcGVuBGJvb2wIcmV4X3Bvb2wACAd2ZXJzaW9uBXVpbnQ4CnRvdGFsX2xlbnQFYXNzZXQMdG90YWxfdW5sZW50BWFzc2V0CnRvdGFsX3JlbnQFYXNzZXQOdG90YWxfbGVuZGFibGUFYXNzZXQJdG90YWxfcmV4BWFzc2V0EG5hbWViaWRfcHJvY2VlZHMFYXNzZXQIbG9hbl9udW0GdWludDY0EnJleF9yZXR1cm5fYnVja2V0cwACB3ZlcnNpb24FdWludDgOcmV0dXJuX2J1Y2tldHMbcGFpcl90aW1lX3BvaW50X3NlY19pbnQ2NFtdD3JleF9yZXR1cm5fcG9vbAAHB3ZlcnNpb24FdWludDgObGFzdF9kaXN0X3RpbWUOdGltZV9wb2ludF9zZWMTcGVuZGluZ19idWNrZXRfdGltZQ50aW1lX3BvaW50X3NlYxJvbGRlc3RfYnVja2V0X3RpbWUOdGltZV9wb2ludF9zZWMXcGVuZGluZ19idWNrZXRfcHJvY2VlZHMFaW50NjQYY3VycmVudF9yYXRlX29mX2luY3JlYXNlBWludDY0CHByb2NlZWRzBWludDY0B3JleGV4ZWMAAgR1c2VyBG5hbWUDbWF4BnVpbnQxNgtybXZwcm9kdWNlcgABCHByb2R1Y2VyBG5hbWUHc2VsbHJhbQACB2FjY291bnQEbmFtZQVieXRlcwVpbnQ2NAdzZWxscmV4AAIEZnJvbQRuYW1lA3JleAVhc3NldAZzZXRhYmkAAwdhY2NvdW50BG5hbWUDYWJpBWJ5dGVzBG1lbW8Hc3RyaW5nJApzZXRhY2N0Y3B1AAIHYWNjb3VudARuYW1lCmNwdV93ZWlnaHQGaW50NjQ/CnNldGFjY3RuZXQAAgdhY2NvdW50BG5hbWUKbmV0X3dlaWdodAZpbnQ2ND8Kc2V0YWNjdHJhbQACB2FjY291bnQEbmFtZQlyYW1fYnl0ZXMGaW50NjQ/CnNldGFsaW1pdHMABAdhY2NvdW50BG5hbWUJcmFtX2J5dGVzBWludDY0Cm5ldF93ZWlnaHQFaW50NjQKY3B1X3dlaWdodAVpbnQ2NAdzZXRjb2RlAAUHYWNjb3VudARuYW1lBnZtdHlwZQV1aW50OAl2bXZlcnNpb24FdWludDgEY29kZQVieXRlcwRtZW1vB3N0cmluZyQMc2V0aW5mbGF0aW9uAAMLYW5udWFsX3JhdGUFaW50NjQUaW5mbGF0aW9uX3BheV9mYWN0b3IFaW50NjQOdm90ZXBheV9mYWN0b3IFaW50NjQJc2V0cGFyYW1zAAEGcGFyYW1zF2Jsb2NrY2hhaW5fcGFyYW1ldGVyc190B3NldHByaXYAAgdhY2NvdW50BG5hbWUHaXNfcHJpdgV1aW50OAZzZXRyYW0AAQxtYXhfcmFtX3NpemUGdWludDY0CnNldHJhbXJhdGUAAQ9ieXRlc19wZXJfYmxvY2sGdWludDE2BnNldHJleAABB2JhbGFuY2UFYXNzZXQMdW5kZWxlZ2F0ZWJ3AAQEZnJvbQRuYW1lCHJlY2VpdmVyBG5hbWUUdW5zdGFrZV9uZXRfcXVhbnRpdHkFYXNzZXQUdW5zdGFrZV9jcHVfcXVhbnRpdHkFYXNzZXQKdW5saW5rYXV0aAAEB2FjY291bnQEbmFtZQRjb2RlBG5hbWUEdHlwZQRuYW1lDWF1dGhvcml6ZWRfYnkFbmFtZSQJdW5yZWdwcm9kAAEIcHJvZHVjZXIEbmFtZQx1bnN0YWtldG9yZXgABAVvd25lcgRuYW1lCHJlY2VpdmVyBG5hbWUIZnJvbV9uZXQFYXNzZXQIZnJvbV9jcHUFYXNzZXQKdXBkYXRlYXV0aAAFB2FjY291bnQEbmFtZQpwZXJtaXNzaW9uBG5hbWUGcGFyZW50BG5hbWUEYXV0aAlhdXRob3JpdHkNYXV0aG9yaXplZF9ieQVuYW1lJAl1cGRhdGVyZXgAAQVvd25lcgRuYW1lDHVwZHRyZXZpc2lvbgABCHJldmlzaW9uBXVpbnQ4DnVzZXJfcmVzb3VyY2VzAAQFb3duZXIEbmFtZQpuZXRfd2VpZ2h0BWFzc2V0CmNwdV93ZWlnaHQFYXNzZXQJcmFtX2J5dGVzBWludDY0DHZvdGVwcm9kdWNlcgADBXZvdGVyBG5hbWUFcHJveHkEbmFtZQlwcm9kdWNlcnMGbmFtZVtdCnZvdGVyX2luZm8ACgVvd25lcgRuYW1lBXByb3h5BG5hbWUJcHJvZHVjZXJzBm5hbWVbXQZzdGFrZWQFaW50NjQQbGFzdF92b3RlX3dlaWdodAdmbG9hdDY0E3Byb3hpZWRfdm90ZV93ZWlnaHQHZmxvYXQ2NAhpc19wcm94eQRib29sBmZsYWdzMQZ1aW50MzIJcmVzZXJ2ZWQyBnVpbnQzMglyZXNlcnZlZDMFYXNzZXQKdm90ZXVwZGF0ZQABCnZvdGVyX25hbWUEbmFtZQt3YWl0X3dlaWdodAACCHdhaXRfc2VjBnVpbnQzMgZ3ZWlnaHQGdWludDE2B3dhc21jZmcAAQhzZXR0aW5ncwRuYW1lCHdpdGhkcmF3AAIFb3duZXIEbmFtZQZhbW91bnQFYXNzZXQRbGltaXRfYXV0aF9jaGFuZ2UABAd2ZXJzaW9uBXVpbnQ4B2FjY291bnQEbmFtZQthbGxvd19wZXJtcwZuYW1lW10OZGlzYWxsb3dfcGVybXMGbmFtZVtdRAAAACqb7TIyCGFjdGl2YXRliAMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBBY3RpdmF0ZSBQcm90b2NvbCBGZWF0dXJlCnN1bW1hcnk6ICdBY3RpdmF0ZSBwcm90b2NvbCBmZWF0dXJlIHt7bm93cmFwIGZlYXR1cmVfZGlnZXN0fX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9hZG1pbi5wbmcjOWJmMWNlYzY2NDg2M2JkNmFhYWMwZjgxNGIyMzVmODc5OWZiMDJjODUwZTlhYTVkYTM0ZThhMDA0YmQ2NTE4ZQotLS0KCnt7JGFjdGlvbi5hY2NvdW50fX0gYWN0aXZhdGVzIHRoZSBwcm90b2NvbCBmZWF0dXJlIHdpdGggYSBkaWdlc3Qgb2Yge3tmZWF0dXJlX2RpZ2VzdH19LgAAAEBJM5M7B2JpZG5hbWWpDi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IEJpZCBPbiBhIFByZW1pdW0gQWNjb3VudCBOYW1lCnN1bW1hcnk6ICd7e25vd3JhcCBiaWRkZXJ9fSBiaWRzIG9uIHRoZSBwcmVtaXVtIGFjY291bnQgbmFtZSB7e25vd3JhcCBuZXduYW1lfX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9hY2NvdW50LnBuZyMzZDU1YTJmYzNhNWMyMGI0NTZmNTY1N2ZhZjY2NmJjMjVmZmQwNmY0ODM2YzVlODI1NmY3NDExNDliMGIyOTRmCi0tLQoKe3tiaWRkZXJ9fSBiaWRzIHt7YmlkfX0gb24gYW4gYXVjdGlvbiB0byBvd24gdGhlIHByZW1pdW0gYWNjb3VudCBuYW1lIHt7bmV3bmFtZX19LgoKe3tiaWRkZXJ9fSB0cmFuc2ZlcnMge3tiaWR9fSB0byB0aGUgc3lzdGVtIHRvIGNvdmVyIHRoZSBjb3N0IG9mIHRoZSBiaWQsIHdoaWNoIHdpbGwgYmUgcmV0dXJuZWQgdG8ge3tiaWRkZXJ9fSBvbmx5IGlmIHt7YmlkZGVyfX0gaXMgbGF0ZXIgb3V0YmlkIGluIHRoZSBhdWN0aW9uIGZvciB7e25ld25hbWV9fSBieSBhbm90aGVyIGFjY291bnQuCgpJZiB0aGUgYXVjdGlvbiBmb3Ige3tuZXduYW1lfX0gY2xvc2VzIHdpdGgge3tiaWRkZXJ9fSByZW1haW5pbmcgYXMgdGhlIGhpZ2hlc3QgYmlkZGVyLCB7e2JpZGRlcn19IHdpbGwgYmUgYXV0aG9yaXplZCB0byBjcmVhdGUgdGhlIGFjY291bnQgd2l0aCBuYW1lIHt7bmV3bmFtZX19LgoKIyMgQmlkIHJlZnVuZCBiZWhhdmlvcgoKSWYge3tiaWRkZXJ9feKAmXMgYmlkIG9uIHt7bmV3bmFtZX19IGlzIGxhdGVyIG91dGJpZCBieSBhbm90aGVyIGFjY291bnQsIHt7YmlkZGVyfX0gd2lsbCBiZSBhYmxlIHRvIGNsYWltIGJhY2sgdGhlIHRyYW5zZmVycmVkIGFtb3VudCBvZiB7e2JpZH19LiBUaGUgc3lzdGVtIHdpbGwgYXR0ZW1wdCB0byBhdXRvbWF0aWNhbGx5IGRvIHRoaXMgb24gYmVoYWxmIG9mIHt7YmlkZGVyfX0sIGJ1dCB0aGUgYXV0b21hdGljIHJlZnVuZCBtYXkgb2NjYXNpb25hbGx5IGZhaWwgd2hpY2ggd2lsbCB0aGVuIHJlcXVpcmUge3tiaWRkZXJ9fSB0byBtYW51YWxseSBjbGFpbSB0aGUgcmVmdW5kIHdpdGggdGhlIGJpZHJlZnVuZCBhY3Rpb24uCgojIyBBdWN0aW9uIGNsb3NlIGNyaXRlcmlhCgpUaGUgc3lzdGVtIHNob3VsZCBhdXRvbWF0aWNhbGx5IGNsb3NlIHRoZSBhdWN0aW9uIGZvciB7e25ld25hbWV9fSBpZiBpdCBzYXRpc2ZpZXMgdGhlIGNvbmRpdGlvbiB0aGF0IG92ZXIgYSBwZXJpb2Qgb2YgdHdvIG1pbnV0ZXMgdGhlIGZvbGxvd2luZyB0d28gcHJvcGVydGllcyBjb250aW51b3VzbHkgaG9sZDoKCi0gbm8gb25lIGhhcyBiaWQgb24ge3tuZXduYW1lfX0gd2l0aGluIHRoZSBsYXN0IDI0IGhvdXJzOwotIGFuZCwgdGhlIHZhbHVlIG9mIHRoZSBsYXRlc3QgYmlkIG9uIHt7bmV3bmFtZX19IGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgdGhlIGJpZHMgb24gZWFjaCBvZiB0aGUgb3RoZXIgb3BlbiBhdWN0aW9ucy4KCkJlIGF3YXJlIHRoYXQgdGhlIGNvbmRpdGlvbiB0byBjbG9zZSB0aGUgYXVjdGlvbiBkZXNjcmliZWQgYWJvdmUgYXJlIHN1ZmZpY2llbnQgYnV0IG5vdCBuZWNlc3NhcnkuIFRoZSBhdWN0aW9uIGZvciB7e25ld25hbWV9fSBjYW5ub3QgY2xvc2UgdW5sZXNzIGJvdGggb2YgdGhlIHByb3BlcnRpZXMgYXJlIHNpbXVsdGFuZW91c2x5IHNhdGlzZmllZCwgYnV0IGl0IG1heSBiZSBjbG9zZWQgd2l0aG91dCByZXF1aXJpbmcgdGhlIHByb3BlcnRpZXMgdG8gaG9sZCBmb3IgYSBwZXJpb2Qgb2YgMiBtaW51dGVzLgAASFMvdZM7CWJpZHJlZnVuZPQCLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogQ2xhaW0gUmVmdW5kIG9uIE5hbWUgQmlkCnN1bW1hcnk6ICdDbGFpbSByZWZ1bmQgb24ge3tub3dyYXAgbmV3bmFtZX19IGJpZCcKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FjY291bnQucG5nIzNkNTVhMmZjM2E1YzIwYjQ1NmY1NjU3ZmFmNjY2YmMyNWZmZDA2ZjQ4MzZjNWU4MjU2Zjc0MTE0OWIwYjI5NGYKLS0tCgp7e2JpZGRlcn19IGNsYWltcyByZWZ1bmQgb24ge3tuZXduYW1lfX0gYmlkIGFmdGVyIGJlaW5nIG91dGJpZCBieSBzb21lb25lIGVsc2UuAAAAAEhzvT4GYnV5cmFt+gMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBCdXkgUkFNCnN1bW1hcnk6ICd7e25vd3JhcCBwYXllcn19IGJ1eXMgUkFNIG9uIGJlaGFsZiBvZiB7e25vd3JhcCByZWNlaXZlcn19IGJ5IHBheWluZyB7e25vd3JhcCBxdWFudH19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmVzb3VyY2UucG5nIzM4MzBmMWNlOGNiMDdmNzc1N2RiY2YzODNiMWVjMWIxMTkxNGFjMzRhMWY5ZDhiMDY1ZjA3NjAwZmE5ZGFjMTkKLS0tCgp7e3BheWVyfX0gYnV5cyBSQU0gb24gYmVoYWxmIG9mIHt7cmVjZWl2ZXJ9fSBieSBwYXlpbmcge3txdWFudH19LiBUaGlzIHRyYW5zYWN0aW9uIHdpbGwgaW5jdXIgYSAwLjUlIGZlZSBvdXQgb2Yge3txdWFudH19IGFuZCB0aGUgYW1vdW50IG9mIFJBTSBkZWxpdmVyZWQgd2lsbCBkZXBlbmQgb24gbWFya2V0IHJhdGVzLgCwyv5Ic70+C2J1eXJhbWJ5dGVzgQQtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBCdXkgUkFNCnN1bW1hcnk6ICd7e25vd3JhcCBwYXllcn19IGJ1eXMge3tub3dyYXAgYnl0ZXN9fSBieXRlcyBvZiBSQU0gb24gYmVoYWxmIG9mIHt7bm93cmFwIHJlY2VpdmVyfX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXNvdXJjZS5wbmcjMzgzMGYxY2U4Y2IwN2Y3NzU3ZGJjZjM4M2IxZWMxYjExOTE0YWMzNGExZjlkOGIwNjVmMDc2MDBmYTlkYWMxOQotLS0KCnt7cGF5ZXJ9fSBidXlzIGFwcHJveGltYXRlbHkge3tieXRlc319IGJ5dGVzIG9mIFJBTSBvbiBiZWhhbGYgb2Yge3tyZWNlaXZlcn19IGJ5IHBheWluZyBtYXJrZXQgcmF0ZXMgZm9yIFJBTS4gVGhpcyB0cmFuc2FjdGlvbiB3aWxsIGluY3VyIGEgMC41JSBmZWUgYW5kIHRoZSBjb3N0IHdpbGwgZGVwZW5kIG9uIG1hcmtldCByYXRlcy4AwIoKS3O9PgpidXlyYW1zZWxm2AMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBCdXkgUkFNIHNlbGYKc3VtbWFyeTogJ3t7bm93cmFwIGFjY291bnR9fSBidXlzIFJBTSB0byBzZWxmIGJ5IHBheWluZyB7e25vd3JhcCBxdWFudH19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmVzb3VyY2UucG5nIzM4MzBmMWNlOGNiMDdmNzc1N2RiY2YzODNiMWVjMWIxMTkxNGFjMzRhMWY5ZDhiMDY1ZjA3NjAwZmE5ZGFjMTkKLS0tCgp7e2FjY291bnR9fSBidXlzIFJBTSB0byBzZWxmIGJ5IHBheWluZyB7e3F1YW50fX0uIFRoaXMgdHJhbnNhY3Rpb24gd2lsbCBpbmN1ciBhIDAuNSUgZmVlIG91dCBvZiB7e3F1YW50fX0gYW5kIHRoZSBhbW91bnQgb2YgUkFNIGRlbGl2ZXJlZCB3aWxsIGRlcGVuZCBvbiBtYXJrZXQgcmF0ZXMuAAAAAHR1vT4GYnV5cmV41wYtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBCdXkgUkVYIFRva2VucwpzdW1tYXJ5OiAne3tub3dyYXAgZnJvbX19IGJ1eXMgUkVYIHRva2VucyBpbiBleGNoYW5nZSBmb3Ige3tub3dyYXAgYW1vdW50fX0gYW5kIHRoZWlyIHZvdGUgc3Rha2UgaW5jcmVhc2VzIGJ5IHt7bm93cmFwIGFtb3VudH19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmV4LnBuZyNkMjI5ODM3ZmE2MmE0NjRiOWM3MWUwNjA2MGFhODYxNzlhZGYwYjNmNGUzYjhjNGY5NzAyZjRmNGIwYzM0MGE4Ci0tLQoKe3thbW91bnR9fSBpcyB0YWtlbiBvdXQgb2Yge3tmcm9tfX3igJlzIFJFWCBmdW5kIGFuZCB1c2VkIHRvIHB1cmNoYXNlIFJFWCB0b2tlbnMgYXQgdGhlIGN1cnJlbnQgbWFya2V0IGV4Y2hhbmdlIHJhdGUuIEluIG9yZGVyIGZvciB0aGUgYWN0aW9uIHRvIHN1Y2NlZWQsIHt7ZnJvbX19IG11c3QgaGF2ZSB2b3RlZCBmb3IgYSBwcm94eSBvciBhdCBsZWFzdCAyMSBibG9jayBwcm9kdWNlcnMuIHt7YW1vdW50fX0gaXMgYWRkZWQgdG8ge3tmcm9tfX3igJlzIHZvdGUgc3Rha2UuCgpBIHNlbGwgb3JkZXIgb2YgdGhlIHB1cmNoYXNlZCBhbW91bnQgY2FuIG9ubHkgYmUgaW5pdGlhdGVkIGFmdGVyIHdhaXRpbmcgZm9yIHRoZSBtYXR1cml0eSBwZXJpb2Qgb2YgNCB0byA1IGRheXMgdG8gcGFzcy4gRXZlbiB0aGVuLCBkZXBlbmRpbmcgb24gdGhlIG1hcmtldCBjb25kaXRpb25zLCB0aGUgaW5pdGlhdGVkIHNlbGwgb3JkZXIgbWF5IG5vdCBiZSBleGVjdXRlZCBpbW1lZGlhdGVseS4AvIkqRYWmQQtjYW5jZWxkZWxheYoDLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogQ2FuY2VsIERlbGF5ZWQgVHJhbnNhY3Rpb24Kc3VtbWFyeTogJ3t7bm93cmFwIGNhbmNlbGluZ19hdXRoLmFjdG9yfX0gY2FuY2VscyBhIGRlbGF5ZWQgdHJhbnNhY3Rpb24nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9hY2NvdW50LnBuZyMzZDU1YTJmYzNhNWMyMGI0NTZmNTY1N2ZhZjY2NmJjMjVmZmQwNmY0ODM2YzVlODI1NmY3NDExNDliMGIyOTRmCi0tLQoKe3tjYW5jZWxpbmdfYXV0aC5hY3Rvcn19IGNhbmNlbHMgdGhlIGRlbGF5ZWQgdHJhbnNhY3Rpb24gd2l0aCBpZCB7e3RyeF9pZH19LgBA1VdxWtlCCmNmZ3Bvd2VydXAAgNM1XF3pTEQMY2xhaW1yZXdhcmRz5wItLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBDbGFpbSBCbG9jayBQcm9kdWNlciBSZXdhcmRzCnN1bW1hcnk6ICd7e25vd3JhcCBvd25lcn19IGNsYWltcyBibG9jayBhbmQgdm90ZSByZXdhcmRzJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvYWRtaW4ucG5nIzliZjFjZWM2NjQ4NjNiZDZhYWFjMGY4MTRiMjM1Zjg3OTlmYjAyYzg1MGU5YWE1ZGEzNGU4YTAwNGJkNjUxOGUKLS0tCgp7e293bmVyfX0gY2xhaW1zIGJsb2NrIGFuZCB2b3RlIHJld2FyZHMgZnJvbSB0aGUgc3lzdGVtLgAAAF1dhWlECGNsb3NlcmV4lAQtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBDbGVhbnVwIFVudXNlZCBSRVggRGF0YQpzdW1tYXJ5OiAnRGVsZXRlIFJFWCByZWxhdGVkIERCIGVudHJpZXMgYW5kIGZyZWUgYXNzb2NpYXRlZCBSQU0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXgucG5nI2QyMjk4MzdmYTYyYTQ2NGI5YzcxZTA2MDYwYWE4NjE3OWFkZjBiM2Y0ZTNiOGM0Zjk3MDJmNGY0YjBjMzQwYTgKLS0tCgpEZWxldGUgUkVYIHJlbGF0ZWQgREIgZW50cmllcyBhbmQgZnJlZSBhc3NvY2lhdGVkIFJBTSBmb3Ige3tvd25lcn19LgoKVG8gZnVsbHkgZGVsZXRlIGFsbCBSRVggcmVsYXRlZCBEQiBlbnRyaWVzLCB7e293bmVyfX0gbXVzdCBlbnN1cmUgdGhhdCB0aGVpciBSRVggYmFsYW5jZSBhbmQgUkVYIGZ1bmQgYW1vdW50cyBhcmUgYm90aCB6ZXJvIGFuZCB0aGV5IGhhdmUgbm8gb3V0c3RhbmRpbmcgbG9hbnMucFW6tKsb0UQMY25jbHJleG9yZGVy6wItLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBDYW5jZWwgU2NoZWR1bGVkIFJFWCBTZWxsIE9yZGVyCnN1bW1hcnk6ICd7e25vd3JhcCBvd25lcn19IGNhbmNlbHMgYSBzY2hlZHVsZWQgc2VsbCBvcmRlciBpZiBub3QgeWV0IGZpbGxlZCcKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KCnt7b3duZXJ9fSBjYW5jZWxzIHRoZWlyIG9wZW4gc2VsbCBvcmRlci4AVDbJRYonRQtjb25zb2xpZGF0ZaYDLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogQ29uc29saWRhdGUgUkVYIE1hdHVyaXR5IEJ1Y2tldHMgSW50byBPbmUKc3VtbWFyeTogJ0NvbnNvbGlkYXRlIFJFWCBtYXR1cml0eSBidWNrZXRzIGludG8gb25lJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmV4LnBuZyNkMjI5ODM3ZmE2MmE0NjRiOWM3MWUwNjA2MGFhODYxNzlhZGYwYjNmNGUzYjhjNGY5NzAyZjRmNGIwYzM0MGE4Ci0tLQoKQ29uc29saWRhdGUgUkVYIG1hdHVyaXR5IGJ1Y2tldHMgaW50byBvbmUgYnVja2V0IHRoYXQge3tvd25lcn19IHdpbGwgbm90IGJlIGFibGUgdG8gc2VsbCB1bnRpbCA0IHRvIDUgZGF5cyBsYXRlci4AwDQ06oqWSgpkZWZjcHVsb2Fu3gMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBXaXRoZHJhdyBmcm9tIHRoZSBGdW5kIG9mIGEgU3BlY2lmaWMgQ1BVIExvYW4Kc3VtbWFyeTogJ3t7bm93cmFwIGZyb219fSB0cmFuc2ZlcnMge3tub3dyYXAgYW1vdW50fX0gZnJvbSB0aGUgZnVuZCBvZiBDUFUgbG9hbiBudW1iZXIge3tub3dyYXAgbG9hbl9udW19fSBiYWNrIHRvIFJFWCBmdW5kJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmV4LnBuZyNkMjI5ODM3ZmE2MmE0NjRiOWM3MWUwNjA2MGFhODYxNzlhZGYwYjNmNGUzYjhjNGY5NzAyZjRmNGIwYzM0MGE4Ci0tLQoKe3tmcm9tfX0gdHJhbnNmZXJzIHt7YW1vdW50fX0gZnJvbSB0aGUgZnVuZCBvZiBDUFUgbG9hbiBudW1iZXIge3tsb2FuX251bX19IGJhY2sgdG8gUkVYIGZ1bmQuAMA0NGY1l0oKZGVmbmV0bG9hbt4DLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogV2l0aGRyYXcgZnJvbSB0aGUgRnVuZCBvZiBhIFNwZWNpZmljIE5FVCBMb2FuCnN1bW1hcnk6ICd7e25vd3JhcCBmcm9tfX0gdHJhbnNmZXJzIHt7bm93cmFwIGFtb3VudH19IGZyb20gdGhlIGZ1bmQgb2YgTkVUIGxvYW4gbnVtYmVyIHt7bm93cmFwIGxvYW5fbnVtfX0gYmFjayB0byBSRVggZnVuZCcKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KCnt7ZnJvbX19IHRyYW5zZmVycyB7e2Ftb3VudH19IGZyb20gdGhlIGZ1bmQgb2YgTkVUIGxvYW4gbnVtYmVyIHt7bG9hbl9udW19fSBiYWNrIHRvIFJFWCBmdW5kLgAAPyobpqJKCmRlbGVnYXRlYnfzBi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFN0YWtlIFRva2VucyBmb3IgTkVUIGFuZC9vciBDUFUKc3VtbWFyeTogJ1N0YWtlIHRva2VucyBmb3IgTkVUIGFuZC9vciBDUFUgYW5kIG9wdGlvbmFsbHkgdHJhbnNmZXIgb3duZXJzaGlwJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmVzb3VyY2UucG5nIzM4MzBmMWNlOGNiMDdmNzc1N2RiY2YzODNiMWVjMWIxMTkxNGFjMzRhMWY5ZDhiMDY1ZjA3NjAwZmE5ZGFjMTkKLS0tCgp7eyNpZiB0cmFuc2Zlcn19IHt7ZnJvbX19IHN0YWtlcyBvbiBiZWhhbGYgb2Yge3tyZWNlaXZlcn19IHt7c3Rha2VfbmV0X3F1YW50aXR5fX0gZm9yIE5FVCBiYW5kd2lkdGggYW5kIHt7c3Rha2VfY3B1X3F1YW50aXR5fX0gZm9yIENQVSBiYW5kd2lkdGguCgpTdGFrZWQgdG9rZW5zIHdpbGwgYWxzbyBiZSB0cmFuc2ZlcnJlZCB0byB7e3JlY2VpdmVyfX0uIFRoZSBzdW0gb2YgdGhlc2UgdHdvIHF1YW50aXRpZXMgd2lsbCBiZSBkZWR1Y3RlZCBmcm9tIHt7ZnJvbX194oCZcyBsaXF1aWQgYmFsYW5jZSBhbmQgYWRkIHRvIHRoZSB2b3RlIHdlaWdodCBvZiB7e3JlY2VpdmVyfX0uCnt7ZWxzZX19Cnt7ZnJvbX19IHN0YWtlcyB0byBzZWxmIGFuZCBkZWxlZ2F0ZXMgdG8ge3tyZWNlaXZlcn19IHt7c3Rha2VfbmV0X3F1YW50aXR5fX0gZm9yIE5FVCBiYW5kd2lkdGggYW5kIHt7c3Rha2VfY3B1X3F1YW50aXR5fX0gZm9yIENQVSBiYW5kd2lkdGguCgpUaGUgc3VtIG9mIHRoZXNlIHR3byBxdWFudGl0aWVzIGFkZCB0byB0aGUgdm90ZSB3ZWlnaHQgb2Yge3tmcm9tfX0uCnt7L2lmfX0AQMvaqKyiSgpkZWxldGVhdXRo9QItLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBEZWxldGUgQWNjb3VudCBQZXJtaXNzaW9uCnN1bW1hcnk6ICdEZWxldGUgdGhlIHt7bm93cmFwIHBlcm1pc3Npb259fSBwZXJtaXNzaW9uIG9mIHt7bm93cmFwIGFjY291bnR9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FjY291bnQucG5nIzNkNTVhMmZjM2E1YzIwYjQ1NmY1NjU3ZmFmNjY2YmMyNWZmZDA2ZjQ4MzZjNWU4MjU2Zjc0MTE0OWIwYjI5NGYKLS0tCgpEZWxldGUgdGhlIHt7cGVybWlzc2lvbn19IHBlcm1pc3Npb24gb2Yge3thY2NvdW50fX0uAAAAIDtMq0oHZGVwb3NpdIgELS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogRGVwb3NpdCBJbnRvIFJFWCBGdW5kCnN1bW1hcnk6ICdBZGQgdG8ge3tub3dyYXAgb3duZXJ9feKAmXMgUkVYIGZ1bmQgYnkgdHJhbnNmZXJyaW5nIHt7bm93cmFwIGFtb3VudH19IGZyb20ge3tub3dyYXAgb3duZXJ9feKAmXMgbGlxdWlkIGJhbGFuY2UnCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXgucG5nI2QyMjk4MzdmYTYyYTQ2NGI5YzcxZTA2MDYwYWE4NjE3OWFkZjBiM2Y0ZTNiOGM0Zjk3MDJmNGY0YjBjMzQwYTgKLS0tCgpUcmFuc2ZlciB7e2Ftb3VudH19IGZyb20ge3tvd25lcn194oCZcyBsaXF1aWQgYmFsYW5jZSB0byB7e293bmVyfX3igJlzIFJFWCBmdW5kLiBBbGwgcHJvY2VlZHMgYW5kIGV4cGVuc2VzIHJlbGF0ZWQgdG8gUkVYIGFyZSBhZGRlZCB0byBvciB0YWtlbiBvdXQgb2YgdGhpcyBmdW5kLgCmoVFXlKZeC2Z1bmRjcHVsb2Fu/AMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBEZXBvc2l0IGludG8gdGhlIEZ1bmQgb2YgYSBTcGVjaWZpYyBDUFUgTG9hbgpzdW1tYXJ5OiAne3tub3dyYXAgZnJvbX19IGZ1bmRzIGEgQ1BVIGxvYW4nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXgucG5nI2QyMjk4MzdmYTYyYTQ2NGI5YzcxZTA2MDYwYWE4NjE3OWFkZjBiM2Y0ZTNiOGM0Zjk3MDJmNGY0YjBjMzQwYTgKLS0tCgp7e2Zyb219fSB0cmFuc2ZlcnMge3twYXltZW50fX0gZnJvbSBSRVggZnVuZCB0byB0aGUgZnVuZCBvZiBDUFUgbG9hbiBudW1iZXIge3tsb2FuX251bX19IGluIG9yZGVyIHRvIGJlIHVzZWQgaW4gbG9hbiByZW5ld2FsIGF0IGV4cGlyeS4ge3tmcm9tfX0gY2FuIHdpdGhkcmF3IHRoZSB0b3RhbCBiYWxhbmNlIG9mIHRoZSBsb2FuIGZ1bmQgYXQgYW55IHRpbWUuAKahMauZpl4LZnVuZG5ldGxvYW78Ay0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IERlcG9zaXQgaW50byB0aGUgRnVuZCBvZiBhIFNwZWNpZmljIE5FVCBMb2FuCnN1bW1hcnk6ICd7e25vd3JhcCBmcm9tfX0gZnVuZHMgYSBORVQgbG9hbicKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KCnt7ZnJvbX19IHRyYW5zZmVycyB7e3BheW1lbnR9fSBmcm9tIFJFWCBmdW5kIHRvIHRoZSBmdW5kIG9mIE5FVCBsb2FuIG51bWJlciB7e2xvYW5fbnVtfX0gaW4gb3JkZXIgdG8gYmUgdXNlZCBpbiBsb2FuIHJlbmV3YWwgYXQgZXhwaXJ5LiB7e2Zyb219fSBjYW4gd2l0aGRyYXcgdGhlIHRvdGFsIGJhbGFuY2Ugb2YgdGhlIGxvYW4gZnVuZCBhdCBhbnkgdGltZS4AAAAAAJDddARpbml04wItLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBJbml0aWFsaXplIFN5c3RlbSBDb250cmFjdApzdW1tYXJ5OiAnSW5pdGlhbGl6ZSBzeXN0ZW0gY29udHJhY3QnCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9hZG1pbi5wbmcjOWJmMWNlYzY2NDg2M2JkNmFhYWMwZjgxNGIyMzVmODc5OWZiMDJjODUwZTlhYTVkYTM0ZThhMDA0YmQ2NTE4ZQotLS0KCkluaXRpYWxpemUgc3lzdGVtIGNvbnRyYWN0LiBUaGUgY29yZSB0b2tlbiBzeW1ib2wgd2lsbCBiZSBzZXQgdG8ge3tjb3JlfX0uwBpqWZvspIsMbGltaXRhdXRoY2hnAAAAAC1rA6eLCGxpbmthdXRonQUtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBMaW5rIEFjdGlvbiB0byBQZXJtaXNzaW9uCnN1bW1hcnk6ICd7e25vd3JhcCBhY2NvdW50fX0gc2V0cyB0aGUgbWluaW11bSByZXF1aXJlZCBwZXJtaXNzaW9uIGZvciB0aGUge3sjaWYgdHlwZX19e3tub3dyYXAgdHlwZX19IGFjdGlvbiBvZiB0aGV7ey9pZn19IHt7bm93cmFwIGNvZGV9fSBjb250cmFjdCB0byB7e25vd3JhcCByZXF1aXJlbWVudH19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvYWNjb3VudC5wbmcjM2Q1NWEyZmMzYTVjMjBiNDU2ZjU2NTdmYWY2NjZiYzI1ZmZkMDZmNDgzNmM1ZTgyNTZmNzQxMTQ5YjBiMjk0ZgotLS0KCnt7YWNjb3VudH19IHNldHMgdGhlIG1pbmltdW0gcmVxdWlyZWQgcGVybWlzc2lvbiBmb3IgdGhlIHt7I2lmIHR5cGV9fXt7dHlwZX19IGFjdGlvbiBvZiB0aGV7ey9pZn19IHt7Y29kZX19IGNvbnRyYWN0IHRvIHt7cmVxdWlyZW1lbnR9fS4KCnt7I2lmIHR5cGV9fXt7ZWxzZX19QW55IGxpbmtzIGV4cGxpY2l0bHkgYXNzb2NpYXRlZCB0byBzcGVjaWZpYyBhY3Rpb25zIG9mIHt7Y29kZX19IHdpbGwgdGFrZSBwcmVjZWRlbmNlLnt7L2lmfX0AAJDmen0YjQlsb2didXlyYW0AoNg0DUlzGY0MbG9ncmFtY2hhbmdlAACANDdGhRmNCmxvZ3NlbGxyYW0AADCbbht815YLbXZmcnNhdmluZ3OcAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFVubG9jayBSRVggVG9rZW5zCnN1bW1hcnk6ICd7e25vd3JhcCBvd25lcn19IHVubG9ja3MgUkVYIFRva2VucycKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KCnt7b3duZXJ9fSB1bmxvY2tzIHt7cmV4fX0gYnkgbW92aW5nIGl0IG91dCBvZiB0aGUgUkVYIHNhdmluZ3MgYnVja2V0LiBUaGUgdW5sb2NrZWQgUkVYIHRva2VucyBjYW5ub3QgYmUgc29sZCB1bnRpbCA0IHRvIDUgZGF5cyBsYXRlci4AMJtuG0zzlgttdnRvc2F2aW5nc7oDLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogTG9jayBSRVggVG9rZW5zCnN1bW1hcnk6ICd7e25vd3JhcCBvd25lcn19IGxvY2tzIFJFWCBUb2tlbnMnCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXgucG5nI2QyMjk4MzdmYTYyYTQ2NGI5YzcxZTA2MDYwYWE4NjE3OWFkZjBiM2Y0ZTNiOGM0Zjk3MDJmNGY0YjBjMzQwYTgKLS0tCgp7e293bmVyfX0gbG9ja3Mge3tyZXh9fSBieSBtb3ZpbmcgaXQgaW50byB0aGUgUkVYIHNhdmluZ3MgYnVja2V0LiBUaGUgbG9ja2VkIFJFWCB0b2tlbnMgY2Fubm90IGJlIHNvbGQgZGlyZWN0bHkgYW5kIHdpbGwgaGF2ZSB0byBiZSB1bmxvY2tlZCBleHBsaWNpdGx5IGJlZm9yZSBzZWxsaW5nLgBAnpoiZLiaCm5ld2FjY291bnSABC0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IENyZWF0ZSBOZXcgQWNjb3VudApzdW1tYXJ5OiAne3tub3dyYXAgY3JlYXRvcn19IGNyZWF0ZXMgYSBuZXcgYWNjb3VudCB3aXRoIHRoZSBuYW1lIHt7bm93cmFwIG5hbWV9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FjY291bnQucG5nIzNkNTVhMmZjM2E1YzIwYjQ1NmY1NjU3ZmFmNjY2YmMyNWZmZDA2ZjQ4MzZjNWU4MjU2Zjc0MTE0OWIwYjI5NGYKLS0tCgp7e2NyZWF0b3J9fSBjcmVhdGVzIGEgbmV3IGFjY291bnQgd2l0aCB0aGUgbmFtZSB7e25hbWV9fSBhbmQgdGhlIGZvbGxvd2luZyBwZXJtaXNzaW9uczoKCm93bmVyIHBlcm1pc3Npb24gd2l0aCBhdXRob3JpdHk6Cnt7dG9fanNvbiBvd25lcn19CgphY3RpdmUgcGVybWlzc2lvbiB3aXRoIGF1dGhvcml0eToKe3t0b19qc29uIGFjdGl2ZX19AAAAACIaz6QHb25ibG9jawAAAADg0nvVpAdvbmVycm9yAAAAAKDqqzitB3Bvd2VydXDUAi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFBvd2VydXAgcmVzb3VyY2VzCnN1bW1hcnk6ICdVc2VyIG1heSBwb3dlcnVwIHRvIHJlc2VydmUgcmVzb3VyY2VzJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmVzb3VyY2UucG5nIzM4MzBmMWNlOGNiMDdmNzc1N2RiY2YzODNiMWVjMWIxMTkxNGFjMzRhMWY5ZDhiMDY1ZjA3NjAwZmE5ZGFjMTkKLS0tCgpVc2VycyBtYXkgdXNlIHRoZSBwb3dlcnVwIGFjdGlvbiB0byByZXNlcnZlIHJlc291cmNlcy4AkOqq6qs4rQtwb3dlcnVwZXhlYwAAAABgXn2kuQdyYW1idXJuqAMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBCdXJuIFJBTSBmcm9tIEFjY291bnQKc3VtbWFyeTogJ0J1cm4gdW51c2VkIFJBTSBmcm9tIHt7bm93cmFwIG93bmVyfX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXNvdXJjZS5wbmcjMzgzMGYxY2U4Y2IwN2Y3NzU3ZGJjZjM4M2IxZWMxYjExOTE0YWMzNGExZjlkOGIwNjVmMDc2MDBmYTlkYWMxOQotLS0KCkJ1cm4ge3tieXRlc319IGJ5dGVzIG9mIHVudXNlZCBSQU0gZnJvbSBhY2NvdW50IHt7b3duZXJ9fS4KCnt7I2lmIG1lbW99fVRoZXJlIGlzIGEgbWVtbyBhdHRhY2hlZCB0byB0aGUgYnVybiBzdGF0aW5nOgp7e21lbW99fQp7ey9pZn19AK5aeJqbpbkLcmFtdHJhbnNmZXLZAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFRyYW5zZmVyIFJBTSBmcm9tIEFjY291bnQKc3VtbWFyeTogJ1RyYW5zZmVyIHVudXNlZCBSQU0gZnJvbSB7e25vd3JhcCBmcm9tfX0gdG8ge3tub3dyYXAgdG99fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3Jlc291cmNlLnBuZyMzODMwZjFjZThjYjA3Zjc3NTdkYmNmMzgzYjFlYzFiMTE5MTRhYzM0YTFmOWQ4YjA2NWYwNzYwMGZhOWRhYzE5Ci0tLQoKVHJhbnNmZXIge3tieXRlc319IGJ5dGVzIG9mIHVudXNlZCBSQU0gZnJvbSBhY2NvdW50IHt7ZnJvbX19IHRvIGFjY291bnQge3t0b319LgoKe3sjaWYgbWVtb319VGhlcmUgaXMgYSBtZW1vIGF0dGFjaGVkIHRvIHRoZSB0cmFuc2ZlciBzdGF0aW5nOgp7e21lbW99fQp7ey9pZn19AAAAAKSpl7oGcmVmdW5khwMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBDbGFpbSBVbnN0YWtlZCBUb2tlbnMKc3VtbWFyeTogJ1JldHVybiBwcmV2aW91c2x5IHVuc3Rha2VkIHRva2VucyB0byB7e25vd3JhcCBvd25lcn19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvYWNjb3VudC5wbmcjM2Q1NWEyZmMzYTVjMjBiNDU2ZjU2NTdmYWY2NjZiYzI1ZmZkMDZmNDgzNmM1ZTgyNTZmNzQxMTQ5YjBiMjk0ZgotLS0KClJldHVybiBwcmV2aW91c2x5IHVuc3Rha2VkIHRva2VucyB0byB7e293bmVyfX0gYWZ0ZXIgdGhlIHVuc3Rha2luZyBwZXJpb2QgaGFzIGVsYXBzZWQuAK5COtFbmboLcmVncHJvZHVjZXKZBC0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFJlZ2lzdGVyIGFzIGEgQmxvY2sgUHJvZHVjZXIgQ2FuZGlkYXRlCnN1bW1hcnk6ICdSZWdpc3RlciB7e25vd3JhcCBwcm9kdWNlcn19IGFjY291bnQgYXMgYSBibG9jayBwcm9kdWNlciBjYW5kaWRhdGUnCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy92b3RpbmcucG5nI2RiMjhjZDNkYjZlNjJkNDUwOWFmMzY0NGNlN2QzNzczMjk0ODJhMTRiYjRiZmFjYTJhYTVmMTQwMGQ4ZThhODQKLS0tCgpSZWdpc3RlciB7e3Byb2R1Y2VyfX0gYWNjb3VudCBhcyBhIGJsb2NrIHByb2R1Y2VyIGNhbmRpZGF0ZS4KClVSTDoge3t1cmx9fQpMb2NhdGlvbiBjb2RlOiB7e2xvY2F0aW9ufX0KQmxvY2sgc2lnbmluZyBrZXk6IHt7cHJvZHVjZXJfa2V5fX0KCiMjIEJsb2NrIFByb2R1Y2VyIEFncmVlbWVudAp7eyRjbGF1c2VzLkJsb2NrUHJvZHVjZXJBZ3JlZW1lbnR9fSCuQjrRW5m6DHJlZ3Byb2R1Y2VyMq0ELS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogUmVnaXN0ZXIgYXMgYSBCbG9jayBQcm9kdWNlciBDYW5kaWRhdGUKc3VtbWFyeTogJ1JlZ2lzdGVyIHt7bm93cmFwIHByb2R1Y2VyfX0gYWNjb3VudCBhcyBhIGJsb2NrIHByb2R1Y2VyIGNhbmRpZGF0ZScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3ZvdGluZy5wbmcjZGIyOGNkM2RiNmU2MmQ0NTA5YWYzNjQ0Y2U3ZDM3NzMyOTQ4MmExNGJiNGJmYWNhMmFhNWYxNDAwZDhlOGE4NAotLS0KClJlZ2lzdGVyIHt7cHJvZHVjZXJ9fSBhY2NvdW50IGFzIGEgYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRlLgoKVVJMOiB7e3VybH19CkxvY2F0aW9uIGNvZGU6IHt7bG9jYXRpb259fQpCbG9jayBzaWduaW5nIGF1dGhvcml0eToKe3t0b19qc29uIHByb2R1Y2VyX2F1dGhvcml0eX19CgojIyBCbG9jayBQcm9kdWNlciBBZ3JlZW1lbnQKe3skY2xhdXNlcy5CbG9ja1Byb2R1Y2VyQWdyZWVtZW50fX0AAAC+01uZughyZWdwcm94eaMELS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogUmVnaXN0ZXIvdW5yZWdpc3RlciBhcyBhIFByb3h5CnN1bW1hcnk6ICdSZWdpc3Rlci91bnJlZ2lzdGVyIHt7bm93cmFwIHByb3h5fX0gYXMgYSBwcm94eSBhY2NvdW50JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvdm90aW5nLnBuZyNkYjI4Y2QzZGI2ZTYyZDQ1MDlhZjM2NDRjZTdkMzc3MzI5NDgyYTE0YmI0YmZhY2EyYWE1ZjE0MDBkOGU4YTg0Ci0tLQoKe3sjaWYgaXNwcm94eX19Cnt7cHJveHl9fSByZWdpc3RlcnMgYXMgYSBwcm94eSB0aGF0IGNhbiB2b3RlIG9uIGJlaGFsZiBvZiBhY2NvdW50cyB0aGF0IGFwcG9pbnQgaXQgYXMgdGhlaXIgcHJveHkuCnt7ZWxzZX19Cnt7cHJveHl9fSB1bnJlZ2lzdGVycyBhcyBhIHByb3h5IHRoYXQgY2FuIHZvdGUgb24gYmVoYWxmIG9mIGFjY291bnRzIHRoYXQgYXBwb2ludCBpdCBhcyB0aGVpciBwcm94eS4Ke3svaWZ9fQAAAEBXlKe6B3JlbnRjcHXcCS0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFJlbnQgQ1BVIEJhbmR3aWR0aCBmb3IgMzAgRGF5cwpzdW1tYXJ5OiAne3tub3dyYXAgZnJvbX19IHBheXMge3tub3dyYXAgbG9hbl9wYXltZW50fX0gdG8gcmVudCBDUFUgYmFuZHdpZHRoIGZvciB7e25vd3JhcCByZWNlaXZlcn19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmV4LnBuZyNkMjI5ODM3ZmE2MmE0NjRiOWM3MWUwNjA2MGFhODYxNzlhZGYwYjNmNGUzYjhjNGY5NzAyZjRmNGIwYzM0MGE4Ci0tLQoKe3tmcm9tfX0gcGF5cyB7e2xvYW5fcGF5bWVudH19IHRvIHJlbnQgQ1BVIGJhbmR3aWR0aCBvbiBiZWhhbGYgb2Yge3tyZWNlaXZlcn19IGZvciBhIHBlcmlvZCBvZiAzMCBkYXlzLgoKe3tsb2FuX3BheW1lbnR9fSBpcyB0YWtlbiBvdXQgb2Yge3tmcm9tfX3igJlzIFJFWCBmdW5kLiBUaGUgbWFya2V0IHByaWNlIGRldGVybWluZXMgdGhlIG51bWJlciBvZiB0b2tlbnMgdG8gYmUgc3Rha2VkIHRvIHt7cmVjZWl2ZXJ9feKAmXMgQ1BVIHJlc291cmNlcy4gSW4gYWRkaXRpb24sIHt7ZnJvbX19IHByb3ZpZGVzIHt7bG9hbl9mdW5kfX0sIHdoaWNoIGlzIGFsc28gdGFrZW4gb3V0IG9mIHt7ZnJvbX194oCZcyBSRVggZnVuZCwgdG8gYmUgdXNlZCBmb3IgYXV0b21hdGljIHJlbmV3YWwgb2YgdGhlIGxvYW4uCgpBdCBleHBpcmF0aW9uLCBpZiB0aGUgbG9hbiBoYXMgbGVzcyBmdW5kcyB0aGFuIHt7bG9hbl9wYXltZW50fX0sIGl0IGlzIGNsb3NlZCBhbmQgbGVudCB0b2tlbnMgdGhhdCBoYXZlIGJlZW4gc3Rha2VkIGFyZSB0YWtlbiBvdXQgb2Yge3tyZWNlaXZlcn194oCZcyBDUFUgYmFuZHdpZHRoLiBPdGhlcndpc2UsIGl0IGlzIHJlbmV3ZWQgYXQgdGhlIG1hcmtldCBwcmljZSBhdCB0aGUgdGltZSBvZiByZW5ld2FsLCB0aGF0IGlzLCB0aGUgbnVtYmVyIG9mIHN0YWtlZCB0b2tlbnMgaXMgcmVjYWxjdWxhdGVkIGFuZCB7e3JlY2VpdmVyfX3igJlzIENQVSBiYW5kd2lkdGggaXMgdXBkYXRlZCBhY2NvcmRpbmdseS4ge3tmcm9tfX0gY2FuIGZ1bmQgb3IgZGVmdW5kIGEgbG9hbiBhdCBhbnkgdGltZSBiZWZvcmUgZXhwaXJhdGlvbi4gV2hlbiB0aGUgbG9hbiBpcyBjbG9zZWQsIHt7ZnJvbX19IGlzIHJlZnVuZGVkIGFueSB0b2tlbnMgcmVtYWluaW5nIGluIHRoZSBsb2FuIGZ1bmQuAAAAIKuZp7oHcmVudG5ldOgJLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogUmVudCBORVQgQmFuZHdpZHRoIGZvciAzMCBEYXlzCnN1bW1hcnk6ICd7e25vd3JhcCBmcm9tfX0gcGF5cyB7e25vd3JhcCBsb2FuX3BheW1lbnR9fSB0byByZW50IE5FVCBiYW5kd2lkdGggZm9yIHt7bm93cmFwIHJlY2VpdmVyfX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXgucG5nI2QyMjk4MzdmYTYyYTQ2NGI5YzcxZTA2MDYwYWE4NjE3OWFkZjBiM2Y0ZTNiOGM0Zjk3MDJmNGY0YjBjMzQwYTgKLS0tCgp7e2Zyb219fSBwYXlzIHt7bG9hbl9wYXltZW50fX0gdG8gcmVudCBORVQgYmFuZHdpZHRoIG9uIGJlaGFsZiBvZiB7e3JlY2VpdmVyfX0gZm9yIGEgcGVyaW9kIG9mIDMwIGRheXMuCgp7e2xvYW5fcGF5bWVudH19IGlzIHRha2VuIG91dCBvZiB7e2Zyb219feKAmXMgUkVYIGZ1bmQuIFRoZSBtYXJrZXQgcHJpY2UgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIHRva2VucyB0byBiZSBzdGFrZWQgdG8ge3tyZWNlaXZlcn194oCZcyBORVQgcmVzb3VyY2VzIGZvciAzMCBkYXlzLiBJbiBhZGRpdGlvbiwge3tmcm9tfX0gcHJvdmlkZXMge3tsb2FuX2Z1bmR9fSwgd2hpY2ggaXMgYWxzbyB0YWtlbiBvdXQgb2Yge3tmcm9tfX3igJlzIFJFWCBmdW5kLCB0byBiZSB1c2VkIGZvciBhdXRvbWF0aWMgcmVuZXdhbCBvZiB0aGUgbG9hbi4KCkF0IGV4cGlyYXRpb24sIGlmIHRoZSBsb2FuIGhhcyBsZXNzIGZ1bmRzIHRoYW4ge3tsb2FuX3BheW1lbnR9fSwgaXQgaXMgY2xvc2VkIGFuZCBsZW50IHRva2VucyB0aGF0IGhhdmUgYmVlbiBzdGFrZWQgYXJlIHRha2VuIG91dCBvZiB7e3JlY2VpdmVyfX3igJlzIE5FVCBiYW5kd2lkdGguIE90aGVyd2lzZSwgaXQgaXMgcmVuZXdlZCBhdCB0aGUgbWFya2V0IHByaWNlIGF0IHRoZSB0aW1lIG9mIHJlbmV3YWwsIHRoYXQgaXMsIHRoZSBudW1iZXIgb2Ygc3Rha2VkIHRva2VucyBpcyByZWNhbGN1bGF0ZWQgYW5kIHt7cmVjZWl2ZXJ9feKAmXMgTkVUIGJhbmR3aWR0aCBpcyB1cGRhdGVkIGFjY29yZGluZ2x5LiB7e2Zyb219fSBjYW4gZnVuZCBvciBkZWZ1bmQgYSBsb2FuIGF0IGFueSB0aW1lIGJlZm9yZSBleHBpcmF0aW9uLiBXaGVuIHRoZSBsb2FuIGlzIGNsb3NlZCwge3tmcm9tfX0gaXMgcmVmdW5kZWQgYW55IHRva2VucyByZW1haW5pbmcgaW4gdGhlIGxvYW4gZnVuZC4AAAAAqa66ugdyZXhleGVjogMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBQZXJmb3JtIFJFWCBNYWludGVuYW5jZQpzdW1tYXJ5OiAnUHJvY2VzcyBzZWxsIG9yZGVycyBhbmQgZXhwaXJlZCBsb2FucycKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KClBlcmZvcm1zIFJFWCBtYWludGVuYW5jZSBieSBwcm9jZXNzaW5nIGEgbWF4aW11bSBvZiB7e21heH19IFJFWCBzZWxsIG9yZGVycyBhbmQgZXhwaXJlZCBsb2Fucy4gQW55IGFjY291bnQgY2FuIGV4ZWN1dGUgdGhpcyBhY3Rpb24uAK5COtFbt7wLcm12cHJvZHVjZXKCBS0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IEZvcmNpYmx5IFVucmVnaXN0ZXIgYSBCbG9jayBQcm9kdWNlciBDYW5kaWRhdGUKc3VtbWFyeTogJ3t7bm93cmFwIHByb2R1Y2VyfX0gaXMgdW5yZWdpc3RlcmVkIGFzIGEgYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRlJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvYWRtaW4ucG5nIzliZjFjZWM2NjQ4NjNiZDZhYWFjMGY4MTRiMjM1Zjg3OTlmYjAyYzg1MGU5YWE1ZGEzNGU4YTAwNGJkNjUxOGUKLS0tCgp7eyRhY3Rpb24uYWNjb3VudH19IHVucmVnaXN0ZXJzIHt7cHJvZHVjZXJ9fSBhcyBhIGJsb2NrIHByb2R1Y2VyIGNhbmRpZGF0ZS4ge3twcm9kdWNlcn19IGFjY291bnQgd2lsbCByZXRhaW4gaXRzIHZvdGVzIGFuZCB0aG9zZSB2b3RlcyBjYW4gY2hhbmdlIGJhc2VkIG9uIHZvdGVyIHN0YWtlIGNoYW5nZXMgb3Igdm90ZXMgcmVtb3ZlZCBmcm9tIHt7cHJvZHVjZXJ9fS4gSG93ZXZlciBuZXcgdm90ZXJzIHdpbGwgbm90IGJlIGFibGUgdG8gdm90ZSBmb3Ige3twcm9kdWNlcn19IHdoaWxlIGl0IHJlbWFpbnMgdW5yZWdpc3RlcmVkLgAAAECaG6PCB3NlbGxyYW3FAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFNlbGwgUkFNIEZyb20gQWNjb3VudApzdW1tYXJ5OiAnU2VsbCB1bnVzZWQgUkFNIGZyb20ge3tub3dyYXAgYWNjb3VudH19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmVzb3VyY2UucG5nIzM4MzBmMWNlOGNiMDdmNzc1N2RiY2YzODNiMWVjMWIxMTkxNGFjMzRhMWY5ZDhiMDY1ZjA3NjAwZmE5ZGFjMTkKLS0tCgpTZWxsIHt7Ynl0ZXN9fSBieXRlcyBvZiB1bnVzZWQgUkFNIGZyb20gYWNjb3VudCB7e2FjY291bnR9fSBhdCBtYXJrZXQgcHJpY2UuIFRoaXMgdHJhbnNhY3Rpb24gd2lsbCBpbmN1ciBhIDAuNSUgZmVlIG9uIHRoZSBwcm9jZWVkcyB3aGljaCBkZXBlbmQgb24gbWFya2V0IHJhdGVzLgAAAKCrG6PCB3NlbGxyZXipCi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFNlbGwgUkVYIFRva2VucyBpbiBFeGNoYW5nZSBmb3IgRU9TCnN1bW1hcnk6ICd7e25vd3JhcCBmcm9tfX0gc2VsbHMge3tub3dyYXAgcmV4fX0gdG9rZW5zJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmV4LnBuZyNkMjI5ODM3ZmE2MmE0NjRiOWM3MWUwNjA2MGFhODYxNzlhZGYwYjNmNGUzYjhjNGY5NzAyZjRmNGIwYzM0MGE4Ci0tLQoKe3tmcm9tfX0gaW5pdGlhdGVzIGEgc2VsbCBvcmRlciB0byBzZWxsIHt7cmV4fX0gdG9rZW5zIGF0IHRoZSBtYXJrZXQgZXhjaGFuZ2UgcmF0ZSBkdXJpbmcgdGhlIHRpbWUgYXQgd2hpY2ggdGhlIG9yZGVyIGlzIHVsdGltYXRlbHkgZXhlY3V0ZWQuIElmIHt7ZnJvbX19IGFscmVhZHkgaGFzIGFuIG9wZW4gc2VsbCBvcmRlciBpbiB0aGUgc2VsbCBxdWV1ZSwge3tyZXh9fSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBhbW91bnQgb2YgdGhlIHNlbGwgb3JkZXIgd2l0aG91dCBjaGFuZ2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWxsIG9yZGVyIHdpdGhpbiB0aGUgcXVldWUuIE9uY2UgdGhlIHNlbGwgb3JkZXIgaXMgZXhlY3V0ZWQsIHByb2NlZWRzIGFyZSBhZGRlZCB0byB7e2Zyb219feKAmXMgUkVYIGZ1bmQsIHRoZSB2YWx1ZSBvZiBzb2xkIFJFWCB0b2tlbnMgaXMgZGVkdWN0ZWQgZnJvbSB7e2Zyb219feKAmXMgdm90ZSBzdGFrZSwgYW5kIHZvdGVzIGFyZSB1cGRhdGVkIGFjY29yZGluZ2x5LgoKRGVwZW5kaW5nIG9uIHRoZSBtYXJrZXQgY29uZGl0aW9ucywgaXQgbWF5IG5vdCBiZSBwb3NzaWJsZSB0byBmaWxsIHRoZSBlbnRpcmUgc2VsbCBvcmRlciBpbW1lZGlhdGVseS4gSW4gc3VjaCBhIGNhc2UsIHRoZSBzZWxsIG9yZGVyIGlzIGFkZGVkIHRvIHRoZSBiYWNrIG9mIGEgc2VsbCBxdWV1ZS4gQSBzZWxsIG9yZGVyIGF0IHRoZSBmcm9udCBvZiB0aGUgc2VsbCBxdWV1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbWFya2V0IGNvbmRpdGlvbnMgYWxsb3cgZm9yIHRoZSBlbnRpcmUgb3JkZXIgdG8gYmUgZmlsbGVkLiBSZWdhcmRsZXNzIG9mIHRoZSBtYXJrZXQgY29uZGl0aW9ucywgdGhlIHN5c3RlbSBpcyBkZXNpZ25lZCB0byBleGVjdXRlIHRoaXMgc2VsbCBvcmRlciB3aXRoaW4gMzAgZGF5cy4ge3tmcm9tfX0gY2FuIGNhbmNlbCB0aGUgb3JkZXIgYXQgYW55IHRpbWUgYmVmb3JlIGl0IGlzIGZpbGxlZCB1c2luZyB0aGUgY25jbHJleG9yZGVyIGFjdGlvbi4AAAAAuGOywgZzZXRhYmnzAi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IERlcGxveSBDb250cmFjdCBBQkkKc3VtbWFyeTogJ0RlcGxveSBjb250cmFjdCBBQkkgb24gYWNjb3VudCB7e25vd3JhcCBhY2NvdW50fX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9hY2NvdW50LnBuZyMzZDU1YTJmYzNhNWMyMGI0NTZmNTY1N2ZhZjY2NmJjMjVmZmQwNmY0ODM2YzVlODI1NmY3NDExNDliMGIyOTRmCi0tLQoKRGVwbG95IHRoZSBBQkkgZmlsZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbnRyYWN0IG9uIGFjY291bnQge3thY2NvdW50fX0uAICuKCNkssIKc2V0YWNjdGNwdZ4GLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogRXhwbGljaXRseSBNYW5hZ2UgdGhlIENQVSBRdW90YSBvZiBBY2NvdW50CnN1bW1hcnk6ICdFeHBsaWNpdGx5IG1hbmFnZSB0aGUgQ1BVIGJhbmR3aWR0aCBxdW90YSBvZiBhY2NvdW50IHt7bm93cmFwIGFjY291bnR9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3sjaWZfaGFzX3ZhbHVlIGNwdV93ZWlnaHR9fQpFeHBsaWNpdGx5IG1hbmFnZSB0aGUgQ1BVIGJhbmR3aWR0aCBxdW90YSBvZiBhY2NvdW50IHt7YWNjb3VudH19IGJ5IHBpbm5pbmcgaXQgdG8gYSB3ZWlnaHQgb2Yge3tjcHVfd2VpZ2h0fX0uCgp7e2FjY291bnR9fSBjYW4gc3Rha2UgYW5kIHVuc3Rha2UsIGhvd2V2ZXIsIGl0IHdpbGwgbm90IGNoYW5nZSB0aGVpciBDUFUgYmFuZHdpZHRoIHF1b3RhIGFzIGxvbmcgYXMgaXQgcmVtYWlucyBwaW5uZWQuCnt7ZWxzZX19ClVucGluIHRoZSBDUFUgYmFuZHdpZHRoIHF1b3RhIG9mIGFjY291bnQge3thY2NvdW50fX0uIFRoZSBDUFUgYmFuZHdpZHRoIHF1b3RhIG9mIHt7YWNjb3VudH19IHdpbGwgYmUgZHJpdmVuIGJ5IHRoZSBjdXJyZW50IHRva2VucyBzdGFrZWQgZm9yIENQVSBiYW5kd2lkdGggYnkge3thY2NvdW50fX0uCnt7L2lmX2hhc192YWx1ZX19AEBWMyNkssIKc2V0YWNjdG5ldKIGLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogRXhwbGljaXRseSBNYW5hZ2UgdGhlIE5FVCBRdW90YSBvZiBBY2NvdW50CnN1bW1hcnk6ICdFeHBsaWNpdGx5IG1hbmFnZSB0aGUgTkVUIGJhbmR3aWR0aCBxdW90YSBvZiBhY2NvdW50IHt7bm93cmFwIGFjY291bnR9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3sjaWZfaGFzX3ZhbHVlIG5ldF93ZWlnaHR9fQpFeHBsaWNpdGx5IG1hbmFnZSB0aGUgbmV0d29yayBiYW5kd2lkdGggcXVvdGEgb2YgYWNjb3VudCB7e2FjY291bnR9fSBieSBwaW5uaW5nIGl0IHRvIGEgd2VpZ2h0IG9mIHt7bmV0X3dlaWdodH19LgoKe3thY2NvdW50fX0gY2FuIHN0YWtlIGFuZCB1bnN0YWtlLCBob3dldmVyLCBpdCB3aWxsIG5vdCBjaGFuZ2UgdGhlaXIgTkVUIGJhbmR3aWR0aCBxdW90YSBhcyBsb25nIGFzIGl0IHJlbWFpbnMgcGlubmVkLgp7e2Vsc2V9fQpVbnBpbiB0aGUgTkVUIGJhbmR3aWR0aCBxdW90YSBvZiBhY2NvdW50IHt7YWNjb3VudH19LiBUaGUgTkVUIGJhbmR3aWR0aCBxdW90YSBvZiB7e2FjY291bnR9fSB3aWxsIGJlIGRyaXZlbiBieSB0aGUgY3VycmVudCB0b2tlbnMgc3Rha2VkIGZvciBORVQgYmFuZHdpZHRoIGJ5IHt7YWNjb3VudH19Lgp7ey9pZl9oYXNfdmFsdWV9fQCANDcjZLLCCnNldGFjY3RyYW3QBS0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IEV4cGxpY2l0bHkgTWFuYWdlIHRoZSBSQU0gUXVvdGEgb2YgQWNjb3VudApzdW1tYXJ5OiAnRXhwbGljaXRseSBtYW5hZ2UgdGhlIFJBTSBxdW90YSBvZiBhY2NvdW50IHt7bm93cmFwIGFjY291bnR9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3sjaWZfaGFzX3ZhbHVlIHJhbV9ieXRlc319CkV4cGxpY2l0bHkgbWFuYWdlIHRoZSBSQU0gcXVvdGEgb2YgYWNjb3VudCB7e2FjY291bnR9fSBieSBwaW5uaW5nIGl0IHRvIHt7cmFtX2J5dGVzfX0gYnl0ZXMuCgp7e2FjY291bnR9fSBjYW4gYnV5IGFuZCBzZWxsIFJBTSwgaG93ZXZlciwgaXQgd2lsbCBub3QgY2hhbmdlIHRoZWlyIFJBTSBxdW90YSBhcyBsb25nIGFzIGl0IHJlbWFpbnMgcGlubmVkLgp7e2Vsc2V9fQpVbnBpbiB0aGUgUkFNIHF1b3RhIG9mIGFjY291bnQge3thY2NvdW50fX0uIFRoZSBSQU0gcXVvdGEgb2Yge3thY2NvdW50fX0gd2lsbCBiZSBkcml2ZW4gYnkgdGhlIGN1cnJlbnQgUkFNIGhvbGRpbmdzIG9mIHt7YWNjb3VudH19Lgp7ey9pZl9oYXNfdmFsdWV9fQAAzk66aLLCCnNldGFsaW1pdHP2Ay0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IEFkanVzdCBSZXNvdXJjZSBMaW1pdHMgb2YgQWNjb3VudApzdW1tYXJ5OiAnQWRqdXN0IHJlc291cmNlIGxpbWl0cyBvZiBhY2NvdW50IHt7bm93cmFwIGFjY291bnR9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3skYWN0aW9uLmFjY291bnR9fSB1cGRhdGVzIHt7YWNjb3VudH194oCZcyByZXNvdXJjZSBsaW1pdHMgdG8gaGF2ZSBhIFJBTSBxdW90YSBvZiB7e3JhbV9ieXRlc319IGJ5dGVzLCBhIE5FVCBiYW5kd2lkdGggcXVvdGEgb2Yge3tuZXRfd2VpZ2h0fX0gYW5kIGEgQ1BVIGJhbmR3aWR0aCBxdW90YSBvZiB7e2NwdV93ZWlnaHR9fS4AAABAJYqywgdzZXRjb2Rl5gItLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBEZXBsb3kgQ29udHJhY3QgQ29kZQpzdW1tYXJ5OiAnRGVwbG95IGNvbnRyYWN0IGNvZGUgb24gYWNjb3VudCB7e25vd3JhcCBhY2NvdW50fX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9hY2NvdW50LnBuZyMzZDU1YTJmYzNhNWMyMGI0NTZmNTY1N2ZhZjY2NmJjMjVmZmQwNmY0ODM2YzVlODI1NmY3NDExNDliMGIyOTRmCi0tLQoKRGVwbG95IGNvbXBpbGVkIGNvbnRyYWN0IGNvZGUgdG8gdGhlIGFjY291bnQge3thY2NvdW50fX0uMKnLJq7pssIMc2V0aW5mbGF0aW9u6wQtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBTZXQgSW5mbGF0aW9uIFBhcmFtZXRlcnMKc3VtbWFyeTogJ1NldCBpbmZsYXRpb24gcGFyYW1ldGVycycKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3skYWN0aW9uLmFjY291bnR9fSBzZXRzIHRoZSBpbmZsYXRpb24gcGFyYW1ldGVycyBhcyBmb2xsb3dzOgoKKiBBbm51YWwgaW5mbGF0aW9uIHJhdGUgKGluIHVuaXRzIG9mIGEgaHVuZHJlZHRoIG9mIGEgcGVyY2VudCk6IHt7YW5udWFsX3JhdGV9fQoqIEZyYWN0aW9uIG9mIGluZmxhdGlvbiB1c2VkIHRvIHJld2FyZCBibG9jayBwcm9kdWNlcnM6IDEwMDAwL3t7aW5mbGF0aW9uX3BheV9mYWN0b3J9fQoqIEZyYWN0aW9uIG9mIGJsb2NrIHByb2R1Y2VyIHJld2FyZHMgdG8gYmUgZGlzdHJpYnV0ZWQgcHJvcG9ydGlvbmFsIHRvIGJsb2NrcyBwcm9kdWNlZDogMTAwMDAve3t2b3RlcGF5X2ZhY3Rvcn19AADA0lxTs8IJc2V0cGFyYW1z0AItLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBTZXQgU3lzdGVtIFBhcmFtZXRlcnMKc3VtbWFyeTogJ1NldCBTeXN0ZW0gUGFyYW1ldGVycycKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3skYWN0aW9uLmFjY291bnR9fSBzZXRzIHN5c3RlbSBwYXJhbWV0ZXJzIHRvOgp7e3RvX2pzb24gcGFyYW1zfX0AAABgu1uzwgdzZXRwcml2jQQtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBNYWtlIGFuIEFjY291bnQgUHJpdmlsZWdlZCBvciBVbnByaXZpbGVnZWQKc3VtbWFyeTogJ3t7I2lmIGlzX3ByaXZ9fU1ha2Uge3tub3dyYXAgYWNjb3VudH19IHByaXZpbGVnZWR7e2Vsc2V9fVJlbW92ZSBwcml2aWxlZ2VkIHN0YXR1cyBvZiB7e25vd3JhcCBhY2NvdW50fX17ey9pZn19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvYWRtaW4ucG5nIzliZjFjZWM2NjQ4NjNiZDZhYWFjMGY4MTRiMjM1Zjg3OTlmYjAyYzg1MGU5YWE1ZGEzNGU4YTAwNGJkNjUxOGUKLS0tCgp7eyNpZiBpc19wcml2fX0Ke3skYWN0aW9uLmFjY291bnR9fSBtYWtlcyB7e2FjY291bnR9fSBwcml2aWxlZ2VkLgp7e2Vsc2V9fQp7eyRhY3Rpb24uYWNjb3VudH19IHJlbW92ZXMgcHJpdmlsZWdlZCBzdGF0dXMgb2Yge3thY2NvdW50fX0uCnt7L2lmfX0AAAAASHOzwgZzZXRyYW3mAi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IENvbmZpZ3VyZSB0aGUgQXZhaWxhYmxlIFJBTQpzdW1tYXJ5OiAnQ29uZmlndXJlIHRoZSBhdmFpbGFibGUgUkFNJwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvYWRtaW4ucG5nIzliZjFjZWM2NjQ4NjNiZDZhYWFjMGY4MTRiMjM1Zjg3OTlmYjAyYzg1MGU5YWE1ZGEzNGU4YTAwNGJkNjUxOGUKLS0tCgp7eyRhY3Rpb24uYWNjb3VudH19IGNvbmZpZ3VyZXMgdGhlIGF2YWlsYWJsZSBSQU0gdG8ge3ttYXhfcmFtX3NpemV9fSBieXRlcy4AgMrmSnOzwgpzZXRyYW1yYXRlhQMtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBTZXQgdGhlIFJhdGUgb2YgSW5jcmVhc2Ugb2YgUkFNCnN1bW1hcnk6ICdTZXQgdGhlIHJhdGUgb2YgaW5jcmVhc2Ugb2YgUkFNIHBlciBibG9jaycKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3skYWN0aW9uLmFjY291bnR9fSBzZXRzIHRoZSByYXRlIG9mIGluY3JlYXNlIG9mIFJBTSB0byB7e2J5dGVzX3Blcl9ibG9ja319IGJ5dGVzL2Jsb2NrLgAAAAB0dbPCBnNldHJleLcDLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogQWRqdXN0IFJFWCBQb29sIFZpcnR1YWwgQmFsYW5jZQpzdW1tYXJ5OiAnQWRqdXN0IFJFWCBQb29sIFZpcnR1YWwgQmFsYW5jZScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3skYWN0aW9uLmFjY291bnR9fSBhZGp1c3RzIFJFWCBsb2FuIHJhdGUgYnkgc2V0dGluZyBSRVggcG9vbCB2aXJ0dWFsIGJhbGFuY2UgdG8ge3tiYWxhbmNlfX0uIE5vIHRva2VuIHRyYW5zZmVyIG9yIGlzc3VlIGlzIGV4ZWN1dGVkIGluIHRoaXMgYWN0aW9uLsCPyoapqNLUDHVuZGVsZWdhdGVid6EHLS0tCnNwZWNfdmVyc2lvbjogIjAuMi4wIgp0aXRsZTogVW5zdGFrZSBUb2tlbnMgZm9yIE5FVCBhbmQvb3IgQ1BVCnN1bW1hcnk6ICdVbnN0YWtlIHRva2VucyBmb3IgTkVUIGFuZC9vciBDUFUgZnJvbSB7e25vd3JhcCByZWNlaXZlcn19JwppY29uOiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZW9zbmV0d29ya2ZvdW5kYXRpb24vZW9zLXN5c3RlbS1jb250cmFjdHMvbWFpbi9jb250cmFjdHMvaWNvbnMvcmVzb3VyY2UucG5nIzM4MzBmMWNlOGNiMDdmNzc1N2RiY2YzODNiMWVjMWIxMTkxNGFjMzRhMWY5ZDhiMDY1ZjA3NjAwZmE5ZGFjMTkKLS0tCgp7e2Zyb219fSB1bnN0YWtlcyBmcm9tIHt7cmVjZWl2ZXJ9fSB7e3Vuc3Rha2VfbmV0X3F1YW50aXR5fX0gZm9yIE5FVCBiYW5kd2lkdGggYW5kIHt7dW5zdGFrZV9jcHVfcXVhbnRpdHl9fSBmb3IgQ1BVIGJhbmR3aWR0aC4KClRoZSBzdW0gb2YgdGhlc2UgdHdvIHF1YW50aXRpZXMgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIHZvdGUgd2VpZ2h0IG9mIHt7cmVjZWl2ZXJ9fSBhbmQgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZSB0byB7e2Zyb219fSBhZnRlciBhbiB1bmludGVycnVwdGVkIDMgZGF5IHBlcmlvZCB3aXRob3V0IGZ1cnRoZXIgdW5zdGFraW5nIGJ5IHt7ZnJvbX19LiBBZnRlciB0aGUgdW5pbnRlcnJ1cHRlZCAzIGRheSBwZXJpb2QgcGFzc2VzLCB0aGUgc3lzdGVtIHdpbGwgYXR0ZW1wdCB0byBhdXRvbWF0aWNhbGx5IHJldHVybiB0aGUgZnVuZHMgdG8ge3tmcm9tfX3igJlzIHJlZ3VsYXIgdG9rZW4gYmFsYW5jZS4gSG93ZXZlciwgdGhpcyBhdXRvbWF0aWMgcmVmdW5kIG1heSBvY2Nhc2lvbmFsbHkgZmFpbCB3aGljaCB3aWxsIHRoZW4gcmVxdWlyZSB7e2Zyb219fSB0byBtYW51YWxseSBjbGFpbSB0aGUgZnVuZHMgd2l0aCB0aGUgcmVmdW5kIGFjdGlvbi4AQMvawOni1Ap1bmxpbmthdXRokQUtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBVbmxpbmsgQWN0aW9uIGZyb20gUGVybWlzc2lvbgpzdW1tYXJ5OiAne3tub3dyYXAgYWNjb3VudH19IHVuc2V0cyB0aGUgbWluaW11bSByZXF1aXJlZCBwZXJtaXNzaW9uIGZvciB0aGUge3sjaWYgdHlwZX19e3tub3dyYXAgdHlwZX19IGFjdGlvbiBvZiB0aGV7ey9pZn19IHt7bm93cmFwIGNvZGV9fSBjb250cmFjdCcKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FjY291bnQucG5nIzNkNTVhMmZjM2E1YzIwYjQ1NmY1NjU3ZmFmNjY2YmMyNWZmZDA2ZjQ4MzZjNWU4MjU2Zjc0MTE0OWIwYjI5NGYKLS0tCgp7e2FjY291bnR9fSByZW1vdmVzIHRoZSBhc3NvY2lhdGlvbiBiZXR3ZWVuIHRoZSB7eyNpZiB0eXBlfX17e3R5cGV9fSBhY3Rpb24gb2YgdGhle3svaWZ9fSB7e2NvZGV9fSBjb250cmFjdCBhbmQgaXRzIG1pbmltdW0gcmVxdWlyZWQgcGVybWlzc2lvbi4KCnt7I2lmIHR5cGV9fXt7ZWxzZX19VGhpcyB3aWxsIG5vdCByZW1vdmUgYW55IGxpbmtzIGV4cGxpY2l0bHkgYXNzb2NpYXRlZCB0byBzcGVjaWZpYyBhY3Rpb25zIG9mIHt7Y29kZX19Lnt7L2lmfX0AAEj0Vqbu1Al1bnJlZ3Byb2TlBC0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFVucmVnaXN0ZXIgYXMgYSBCbG9jayBQcm9kdWNlciBDYW5kaWRhdGUKc3VtbWFyeTogJ3t7bm93cmFwIHByb2R1Y2VyfX0gdW5yZWdpc3RlcnMgYXMgYSBibG9jayBwcm9kdWNlciBjYW5kaWRhdGUnCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy92b3RpbmcucG5nI2RiMjhjZDNkYjZlNjJkNDUwOWFmMzY0NGNlN2QzNzczMjk0ODJhMTRiYjRiZmFjYTJhYTVmMTQwMGQ4ZThhODQKLS0tCgp7e3Byb2R1Y2VyfX0gdW5yZWdpc3RlcnMgYXMgYSBibG9jayBwcm9kdWNlciBjYW5kaWRhdGUuIHt7cHJvZHVjZXJ9fSBhY2NvdW50IHdpbGwgcmV0YWluIGl0cyB2b3RlcyBhbmQgdGhvc2Ugdm90ZXMgY2FuIGNoYW5nZSBiYXNlZCBvbiB2b3RlciBzdGFrZSBjaGFuZ2VzIG9yIHZvdGVzIHJlbW92ZWQgZnJvbSB7e3Byb2R1Y2VyfX0uIEhvd2V2ZXIgbmV3IHZvdGVycyB3aWxsIG5vdCBiZSBhYmxlIHRvIHZvdGUgZm9yIHt7cHJvZHVjZXJ9fSB3aGlsZSBpdCByZW1haW5zIHVucmVnaXN0ZXJlZC7Q1aVZQZPx1Ax1bnN0YWtldG9yZXjjBi0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IEJ1eSBSRVggVG9rZW5zIFVzaW5nIFN0YWtlZCBUb2tlbnMKc3VtbWFyeTogJ3t7bm93cmFwIG93bmVyfX0gYnV5cyBSRVggdG9rZW5zIGluIGV4Y2hhbmdlIGZvciB0b2tlbnMgY3VycmVudGx5IHN0YWtlZCB0byBORVQgYW5kL29yIENQVScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KCnt7ZnJvbV9uZXR9fSBhbmQge3tmcm9tX2NwdX19IGFyZSB3aXRoZHJhd24gZnJvbSB7e3JlY2VpdmVyfX3igJlzIE5FVCBhbmQgQ1BVIGJhbmR3aWR0aHMgcmVzcGVjdGl2ZWx5LiBUaGVzZSBmdW5kcyBhcmUgdXNlZCB0byBwdXJjaGFzZSBSRVggdG9rZW5zIGF0IHRoZSBjdXJyZW50IG1hcmtldCBleGNoYW5nZSByYXRlLiBJbiBvcmRlciBmb3IgdGhlIGFjdGlvbiB0byBzdWNjZWVkLCB7e293bmVyfX0gbXVzdCBoYXZlIHZvdGVkIGZvciBhIHByb3h5IG9yIGF0IGxlYXN0IDIxIGJsb2NrIHByb2R1Y2Vycy4KCkEgc2VsbCBvcmRlciBvZiB0aGUgcHVyY2hhc2VkIGFtb3VudCBjYW4gb25seSBiZSBpbml0aWF0ZWQgYWZ0ZXIgd2FpdGluZyBmb3IgdGhlIG1hdHVyaXR5IHBlcmlvZCBvZiA0IHRvIDUgZGF5cyB0byBwYXNzLiBFdmVuIHRoZW4sIGRlcGVuZGluZyBvbiB0aGUgbWFya2V0IGNvbmRpdGlvbnMsIHRoZSBpbml0aWF0ZWQgc2VsbCBvcmRlciBtYXkgbm90IGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LgBAy9qobFLVCnVwZGF0ZWF1dGjtAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IE1vZGlmeSBBY2NvdW50IFBlcm1pc3Npb24Kc3VtbWFyeTogJ0FkZCBvciB1cGRhdGUgdGhlIHt7bm93cmFwIHBlcm1pc3Npb259fSBwZXJtaXNzaW9uIG9mIHt7bm93cmFwIGFjY291bnR9fScKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FjY291bnQucG5nIzNkNTVhMmZjM2E1YzIwYjQ1NmY1NjU3ZmFmNjY2YmMyNWZmZDA2ZjQ4MzZjNWU4MjU2Zjc0MTE0OWIwYjI5NGYKLS0tCgpNb2RpZnksIGFuZCBjcmVhdGUgaWYgbmVjZXNzYXJ5LCB0aGUge3twZXJtaXNzaW9ufX0gcGVybWlzc2lvbiBvZiB7e2FjY291bnR9fSB0byBoYXZlIGEgcGFyZW50IHBlcm1pc3Npb24gb2Yge3twYXJlbnR9fSBhbmQgdGhlIGZvbGxvd2luZyBhdXRob3JpdHk6Cnt7dG9fanNvbiBhdXRofX0AAOjqqmxS1Ql1cGRhdGVyZXiBAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFVwZGF0ZSBSRVggT3duZXIgVm90ZSBXZWlnaHQKc3VtbWFyeTogJ1VwZGF0ZSB2b3RlIHdlaWdodCB0byBjdXJyZW50IHZhbHVlIG9mIGhlbGQgUkVYIHRva2VucycKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL3JleC5wbmcjZDIyOTgzN2ZhNjJhNDY0YjljNzFlMDYwNjBhYTg2MTc5YWRmMGIzZjRlM2I4YzRmOTcwMmY0ZjRiMGMzNDBhOAotLS0KClVwZGF0ZSB2b3RlIHdlaWdodCBvZiB7e293bmVyfX0gYWNjb3VudCB0byBjdXJyZW50IHZhbHVlIG9mIGhlbGQgUkVYIHRva2Vucy4wqcNuq5tT1Qx1cGR0cmV2aXNpb26CAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFVwZGF0ZSBTeXN0ZW0gQ29udHJhY3QgUmV2aXNpb24gTnVtYmVyCnN1bW1hcnk6ICdVcGRhdGUgc3lzdGVtIGNvbnRyYWN0IHJldmlzaW9uIG51bWJlcicKaWNvbjogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vvc25ldHdvcmtmb3VuZGF0aW9uL2Vvcy1zeXN0ZW0tY29udHJhY3RzL21haW4vY29udHJhY3RzL2ljb25zL2FkbWluLnBuZyM5YmYxY2VjNjY0ODYzYmQ2YWFhYzBmODE0YjIzNWY4Nzk5ZmIwMmM4NTBlOWFhNWRhMzRlOGEwMDRiZDY1MThlCi0tLQoKe3skYWN0aW9uLmFjY291bnR9fSBhZHZhbmNlcyB0aGUgc3lzdGVtIGNvbnRyYWN0IHJldmlzaW9uIG51bWJlciB0byB7e3JldmlzaW9ufX0ucBXSid6qMt0Mdm90ZXByb2R1Y2VyrQYtLS0Kc3BlY192ZXJzaW9uOiAiMC4yLjAiCnRpdGxlOiBWb3RlIGZvciBCbG9jayBQcm9kdWNlcnMKc3VtbWFyeTogJ3t7bm93cmFwIHZvdGVyfX0gdm90ZXMgZm9yIHt7I2lmIHByb3h5fX10aGUgcHJveHkge3tub3dyYXAgcHJveHl9fXt7ZWxzZX19dXAgdG8gMzAgYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRlc3t7L2lmfX0nCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy92b3RpbmcucG5nI2RiMjhjZDNkYjZlNjJkNDUwOWFmMzY0NGNlN2QzNzczMjk0ODJhMTRiYjRiZmFjYTJhYTVmMTQwMGQ4ZThhODQKLS0tCgp7eyNpZiBwcm94eX19Cnt7dm90ZXJ9fSB2b3RlcyBmb3IgdGhlIHByb3h5IHt7cHJveHl9fS4KQXQgdGhlIHRpbWUgb2Ygdm90aW5nIHRoZSBmdWxsIHdlaWdodCBvZiB2b3RlcuKAmXMgc3Rha2VkIChDUFUgKyBORVQpIHRva2VucyB3aWxsIGJlIGNhc3QgdG93YXJkcyBlYWNoIG9mIHRoZSBwcm9kdWNlcnMgdm90ZWQgYnkge3twcm94eX19Lgp7e2Vsc2V9fQp7e3ZvdGVyfX0gdm90ZXMgZm9yIHRoZSBmb2xsb3dpbmcgYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRlczoKCnt7I2VhY2ggcHJvZHVjZXJzfX0KICArIHt7dGhpc319Cnt7L2VhY2h9fQoKQXQgdGhlIHRpbWUgb2Ygdm90aW5nIHRoZSBmdWxsIHdlaWdodCBvZiB2b3RlcuKAmXMgc3Rha2VkIChDUFUgKyBORVQpIHRva2VucyB3aWxsIGJlIGNhc3QgdG93YXJkcyBlYWNoIG9mIHRoZSBhYm92ZSBwcm9kdWNlcnMuCnt7L2lmfX0AgMomVa0y3Qp2b3RldXBkYXRlAAAAAIAtJLHhB3dhc21jZmcAAAAA3NzUsuMId2l0aGRyYXfJAy0tLQpzcGVjX3ZlcnNpb246ICIwLjIuMCIKdGl0bGU6IFdpdGhkcmF3IGZyb20gUkVYIEZ1bmQKc3VtbWFyeTogJ1dpdGhkcmF3IHt7bm93cmFwIGFtb3VudH19IGZyb20ge3tub3dyYXAgb3duZXJ9feKAmXMgUkVYIGZ1bmQgYnkgdHJhbnNmZXJyaW5nIHRvIHt7b3duZXJ9feKAmXMgbGlxdWlkIGJhbGFuY2UnCmljb246IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9lb3NuZXR3b3JrZm91bmRhdGlvbi9lb3Mtc3lzdGVtLWNvbnRyYWN0cy9tYWluL2NvbnRyYWN0cy9pY29ucy9yZXgucG5nI2QyMjk4MzdmYTYyYTQ2NGI5YzcxZTA2MDYwYWE4NjE3OWFkZjBiM2Y0ZTNiOGM0Zjk3MDJmNGY0YjBjMzQwYTgKLS0tCgpXaXRoZHJhd3Mge3thbW91bnR9fSBmcm9tIHt7b3duZXJ9feKAmXMgUkVYIGZ1bmQgYW5kIHRyYW5zZmVyIHRoZW0gdG8ge3tvd25lcn194oCZcyBsaXF1aWQgYmFsYW5jZS4aAAAAoGHT3DEDaTY0AAAIYWJpX2hhc2gAAE5TL3WTOwNpNjQAAApiaWRfcmVmdW5kAACgazqIaDwDaTY0AAARYmxvY2tfaW5mb19yZWNvcmQAAABgGhp1RQNpNjQAAAhyZXhfbG9hbgAAACBNc6JKA2k2NAAAE2RlbGVnYXRlZF9iYW5kd2lkdGgAAAAARHNoZANpNjQAABJlb3Npb19nbG9iYWxfc3RhdGUAAABARHNoZANpNjQAABNlb3Npb19nbG9iYWxfc3RhdGUyAAAAYERzaGQDaTY0AAATZW9zaW9fZ2xvYmFsX3N0YXRlMwAAAIBEc2hkA2k2NAAAE2Vvc2lvX2dsb2JhbF9zdGF0ZTQAAAA4uaOkmQNpNjQAAAhuYW1lX2JpZAAAAGAaGrOaA2k2NAAACHJleF9sb2FuAK5Kl4KqOa0DaTY0AAANcG93ZXJ1cF9vcmRlcgBUNhmDqjmtA2k2NAAADXBvd2VydXBfc3RhdGUAAMBXIZ3orQNpNjQAAA1wcm9kdWNlcl9pbmZvAIDAVyGd6K0DaTY0AAAOcHJvZHVjZXJfaW5mbzIAAMgKXiOluQNpNjQAAA5leGNoYW5nZV9zdGF0ZQAAAACnqZe6A2k2NAAADnJlZnVuZF9yZXF1ZXN0AADOCiJ9sroDaTY0AAAScmV4X3JldHVybl9idWNrZXRzAAAAAERzuroDaTY0AAALcmV4X2JhbGFuY2UAAAAgTb26ugNpNjQAAAhyZXhfZnVuZAAAACBSWru6A2k2NAAACHJleF9wb29sAAAASittu7oDaTY0AAAJcmV4X29yZGVyAECktGZ1u7oDaTY0AAAPcmV4X3JldHVybl9wb29sAAAAAKt7FdYDaTY0AAAOdXNlcl9yZXNvdXJjZXMAAAAA4Ksy3QNpNjQAAAp2b3Rlcl9pbmZvwBpqWZvspIsDaTY0AAARbGltaXRfYXV0aF9jaGFuZ2UCDVVzZXJBZ3JlZW1lbnTsfyMgRU9TIFVzZXIgQWdyZWVtZW50CgojIyBEZWZpbml0aW9ucwoKIEFsbCBjYXBpdGFsaXplZCwgaXRhbGljaXplZCwgb3IgaW5saW5lIGNvZGUgdGVybXMgaW4gKlRoZSBFT1MgVXNlciBBZ3JlZW1lbnQqIHdpbGwgYmUgZ2l2ZW4gdGhlIHNhbWUgZWZmZWN0IGFuZCBtZWFuaW5nIGFzIGluICpEZWZpbml0aW9ucyouCgoqIEVPUyBVc2VyIEFncmVlbWVudDogVGhpcyBkb2N1bWVudCAoKkVVQSopCgoqIENoYWluIElEOiBgY2hhaW5faWRg4oCKLeKAimFjYTM3NmYyMDZiOGZjMjVhNmVkNDRkYmRjNjY1NDdjMzZjNmMzM2UzYTExOWZmYmVhZWY5NDM2NDJmMGU5MDYKCiogVXNlcjogQW55IHBlcnNvbiBvciBvcmdhbml6YXRpb24gb2YgcGVyc29ucyB3aG8gbWFpbnRhaW4ocykgZGlyZWN0IG9yIGluZGlyZWN0IG93bmVyc2hpcCBvZiBhbiBFT1MgYWNjb3VudCwgb3IgRU9TLWJhc2VkIHByb3BlcnR5IGNvbm5lY3RlZCB0byBhbiBFT1MgYWNjb3VudC4KCiogT3duZXJzaGlwOiBEaXJlY3Qgb3IgaW5kaXJlY3QgYWNjZXNzIHRvIGFuIEVPUyBhY2NvdW50IHRocm91Z2ggb25lIG9yIG1vcmUgdmFsaWQgcGVybWlzc2lvbnMgY2hlY2tzLiBPd25lcnNoaXAgbWF5IGJlIHBhcnRpYWxseSBzaGFyZWQgYmV0d2VlbiBVc2VycyB0aHJvdWdoIHRoZSB1c2Ugb2YgbXVsdGktc2lnbmF0dXJlIHBlcm1pc3Npb25zLgoKKiBCbG9jayBQcm9kdWNlcjogVXNlcnMgd2hvIGhhdmUgY2FsbGVkIGByZWdwcm9kdWNlcmAgYW5kIHJlY2VpdmUgcmV3YXJkcyBmcm9tIGVvc2lvLnZwYXkuCgoqIGBlb3Npby5wcm9kc2A6IEFuIEVPUyBhY2NvdW50IHdpdGggYSBkeW5hbWljIHBlcm1pc3Npb25zIHN0cnVjdHVyZSB0aGF0IGNhbiBhc3N1bWUgdGhlIHByaXZpbGVnZXMgb2YgdGhlIGBlb3Npb2AgYWNjb3VudCB3aGVuIDE1LzIxIEJsb2NrIFByb2R1Y2VycyBhZ3JlZSB0byBkbyBzby4KCiogTmV0d29yayBGdW5kczogVG9rZW5zIGNvbnRhaW5lZCB3aXRoaW4gdGhlIGZvbGxvd2luZyBhY2NvdW50czogYGVvc2lvLm5hbWVzYCwgYGVvc2lvLnJhbWZlZWAsIGBlb3Npby5zYXZpbmdgLgoKKiBHb3Zlcm5pbmcgRG9jdW1lbnRzOiAqcmVncHJvZHVjZXIqIGlzIGNvbnNpZGVyZWQgYSBnb3Zlcm5pbmcgZG9jdW1lbnQuCgoqIE9uLUNoYWluOiBBbnkgdHJhbnNhY3Rpb24sIHNtYXJ0IGNvbnRyYWN0LCBvciBSaWNhcmRpYW4gY29udHJhY3Qgd2hpY2ggaXMgbG9jYXRlZCB3aXRoaW4gYSBibG9jayB0aGF0IGlzIGlycmV2ZXJzaWJsZSBhbmQgYXBwZW5kZWQgdG8gdGhlIEVPUyBibG9ja2NoYWluIGBjaGFpbl9pZGAuCgoqIEVPUy1iYXNlZCBQcm9wZXJ0eTogQW55dGhpbmcgdGhhdCByZXF1aXJlcyBhIHZhbGlkIHBlcm1pc3Npb24gaW4gb3JkZXIgdG8gZGlyZWN0bHkgbWFuaXB1bGF0ZSwgYWx0ZXIsIHRyYW5zZmVyLCBpbmZsdWVuY2UsIG9yIG90aGVyd2lzZSBlZmZlY3Qgb24gdGhlIEVPUyBCbG9ja2NoYWluCgoqIENhbGw6IFRvIHN1Ym1pdCBhbiBhY3Rpb24gdG8gdGhlIEVPUyBCbG9ja2NoYWluIGBjaGFpbl9pZGAuCgoqIEF1dGhvcml6YXRpb25zICYgUGVybWlzc2lvbnM6IFBlcm1pc3Npb25zIGFyZSBhcmJpdHJhcnkgbmFtZXMgdXNlZCB0byBkZWZpbmUgdGhlIHJlcXVpcmVtZW50cyBmb3IgYSB0cmFuc2FjdGlvbiBzZW50IG9uIGJlaGFsZiBvZiB0aGF0IHBlcm1pc3Npb24uIFBlcm1pc3Npb25zIGNhbiBiZSBhc3NpZ25lZCBmb3IgYXV0aG9yaXR5IG92ZXIgc3BlY2lmaWMgY29udHJhY3QgYWN0aW9ucy4KCiogUmljYXJkaWFuIENvbnRyYWN0OiBBIGNvbnRyYWN0IHRoYXQgcGxhY2VzIHRoZSBkZWZpbmluZyBlbGVtZW50cyBvZiBhIGxlZ2FsIGFncmVlbWVudCBpbiBhIGZvcm1hdCB0aGF0IGNhbiBiZSBleHByZXNzZWQgYW5kIGV4ZWN1dGVkIGluIHNvZnR3YXJlLgoKIyMgQXJ0aWNsZSBJIC3igIogVXNlciBBY2tub3dsZWRnZW1lbnQgb2YgUmlza3MKSWYgVXNlciBsb3NlcyBhY2Nlc3MgdG8gdGhlaXIgRU9TIGFjY291bnQgb24gYGNoYWluX2lkYCBhbmQgaGFzIG5vdCB0YWtlbiBhcHByb3ByaWF0ZSBtZWFzdXJlcyB0byBzZWN1cmUgYWNjZXNzIHRvIHRoZWlyIEVPUyBhY2NvdW50IGJ5IG90aGVyIG1lYW5zLCB0aGUgVXNlciBhY2tub3dsZWRnZXMgYW5kIGFncmVlcyB0aGF0IHRoYXQgRU9TIGFjY291bnQgd2lsbCBiZWNvbWUgaW5hY2Nlc3NpYmxlLiBVc2VycyBhY2tub3dsZWRnZSB0aGF0IHRoZSBVc2VyIGhhcyBhbiBhZGVxdWF0ZSB1bmRlcnN0YW5kaW5nIG9mIHRoZSByaXNrcywgdXNhZ2UgYW5kIGludHJpY2FjaWVzIG9mIGNyeXB0b2dyYXBoaWMgdG9rZW5zIGFuZCBibG9ja2NoYWluLWJhc2VkIHNvZnR3YXJlLiBUaGUgVXNlciBhY2tub3dsZWRnZXMgYW5kIGFncmVlcyB0aGF0IHRoZSBVc2VyIGlzIHVzaW5nIHRoZSBFT1MgYmxvY2tjaGFpbiBhdCB0aGVpciBzb2xlIHJpc2suCgojIyBBcnRpY2xlIElJ4oCKLeKAilNwZWNpYWwgVXNlciBUeXBlcwpVc2VycyB3aG8gY2FsbCBgcmVncHJvZHVjZXJgIGFncmVlIHRvLCBhbmQgYXJlIGJvdW5kIGJ5LCB0aGUgKnJlZ3Byb2R1Y2VyKiBSaWNhcmRpYW4gQ29udHJhY3QuCgojIyBBcnRpY2xlIElJSeKAii3igIpDb25zZW50IG9mIHRoZSBFVUEKVGhlIG5hdHVyZSBvZiB0aGUgKkVPUyBVc2VyIEFncmVlbWVudCogaXMgc3VjaCB0aGF0IGl0IHNlcnZlcyBhcyBhIGRlc2NyaXB0aW9uIG9mIHRoZSBjdXJyZW50IEVPUyBNYWlubmV0IGdvdmVybmFuY2UgZnVuY3Rpb25zIHRoYXQgYXJlIGluIHBsYWNlLiBUaGVzZSBmdW5jdGlvbnMsIGVuZm9yY2VkIGJ5IGNvZGUsIGRvIG5vdCByZXF1aXJlIHRoZSBjb25zZW50IG9mIFVzZXJzIGFzIHRoZXNlIGZ1bmN0aW9ucyBhcmUgaW5oZXJlbnQgYW5kIHN5c3RlbWljIHRvIHRoZSBFT1MgTWFpbm5ldCBpdHNlbGYuCgojIyBBcnRpY2xlIElW4oCKLeKAikdvdmVybmluZyBEb2N1bWVudHMKQW55IG1vZGlmaWNhdGlvbnMgdG8gdGhlICpFVUEqIGFuZCAqZ292ZXJuaW5nIGRvY3VtZW50cyogbWF5IGJlIG1hZGUgYnkgYGVvc2lvLnByb2RzYC4gSXQgaXMgYWRtb25pc2hlZCB0aGF0IGEgc3RhdGVtZW50IGJlIGNyYWZ0ZWQgYW5kIGlzc3VlZCB0aHJvdWdoIGBlb3Npby5wcm9kc2AgdmlhIGVvc2lvLmZvcnVtIHJlZmVyZW5kdW0gY29udHJhY3QgZGVzY3JpYmluZyBzdWNoIGEgbW9kaWZpY2F0aW9uIGluIGFkdmFuY2UuCgojIyBBcnRpY2xlIFbigIot4oCKTmF0aXZlIFVuaXQgb2YgVmFsdWUKVGhlIG5hdGl2ZSB1bml0IG9mIHZhbHVlIG9uIEVPUyBjaGFpbl9pZCBzaGFsbCBiZSB0aGUgRU9TIHRva2VuIGFzIGRlZmluZWQgYW5kIGNyZWF0ZWQgYnkgdGhlIGBlb3Npby50b2tlbmAgc21hcnQgY29udHJhY3QuCgojIyBBcnRpY2xlIFZJ4oCKLeKAik1haW50YWluaW5nIHRoZSBFT1MgYmxvY2tjaGFpbgpgZW9zaW8ucHJvZHNgIHdpbGwgbWFpbnRhaW4gdGhlIGFjdGl2ZSBibG9ja2NoYWluIGNvZGViYXNlIHdoaWNoIGluY2x1ZGVzLCBidXQgaXMgbm90IGxpbWl0ZWQgdG8sIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBhbGwgbW9kaWZpY2F0aW9ucyBvZiBhbGwgZmVhdHVyZXMsIG9wdGltaXphdGlvbnMsIGFuZCB1cGdyYWRlczogcHJlc2VudCBhbmQgZnV0dXJlLgoKIyMgQXJ0aWNsZSBWSUnigIot4oCKTmV0d29yayBGdW5kcwpJdCBpcyBhZG1vbmlzaGVkIHRoYXQgYW55IGFsdGVyaW5nIG9mIHRoZSBzdGF0ZSBvZiBhbnkgdG9rZW5zIGNvbnRhaW5lZCB3aXRoaW4gbmV0d29yayBmdW5kIGFjY291bnRzLCBvciBhbHRlcmluZyBhbnkgcHJlLWV4aXN0aW5nIGNvZGUgdGhhdCBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGdvdmVybnMgdGhlIGFsbG9jYXRpb24sIGZ1bGZpbGxtZW50LCBvciBkaXN0cmlidXRpb24gb2YgYW55ICpuZXR3b3JrIGZ1bmRzKiBiZSBwcmVjZWRlZCBieSBhIHN0YXRlbWVudCBjcmFmdGVkIGFuZCBpc3N1ZWQgYnkgYGVvc2lvLnByb2RzYCB0byB0aGUgKmVvc2lvLmZvcnVtKiByZWZlcmVuZHVtIHN5c3RlbSBjb250cmFjdCBkZXNjcmliaW5nIHRoZSBlZmZlY3QgaW4gYWR2YW5jZS4KCiMjIEFydGljbGUgVklJSeKAii3igIpGcmVlZG9tIG9mIEFjY291bnQgQ3JlYXRpb24KQW55IGN1cnJlbnQgb3IgZnV0dXJlIFVzZXIgaXMgYWJsZSB0byBjcmVhdGUgYW4gRU9TIEFjY291bnQgd2l0aG91dCB0aGUgcGVybWlzc2lvbiBieSBhbnkgb3RoZXIgVXNlci4gYGVvc2lvLnByb2RzYCBtYXkgbmV2ZXIgYWZmZWN0IGFuIEVPUyBVc2VyIEFjY291bnQocykgd2l0aG91dCB2YWxpZCBwZXJtaXNzaW9uKHMpIHdoaWNoIGhhdmUgYmVlbiBzaGFyZWQgd2l0aCBgZW9zaW8ucHJvZHNgIGJ5IGFuIEVPUyBhY2NvdW50LiBgZW9zaW8ucHJvZHNgIG1heSBjaGFyZ2UgYSBmZWUgZm9yIGFueSBhY3Rpb25zIHRoYXQgYXJlIHJlcXVlc3RlZCBieSBvdGhlciBVc2VycyBwZXJ0YWluaW5nIHRvIGFuIEVPUyBhY2NvdW50IHdoZXJlIHBlcm1pc3Npb25zIGFyZSBzaGFyZWQuCgojIyBBcnRpY2xlIElY4oCKLeKAik5vIEZpZHVjaWFyeQpObyBVc2VyIHNoYWxsIGhhdmUgYSBmaWR1Y2lhcnkgcHVycG9zZSB0byBzdXBwb3J0IHRoZSB2YWx1ZSBvZiB0aGUgRU9TIHRva2VuLiBObyBVc2VyIGNhbiBhdXRob3JpemUgYW55b25lIHRvIGhvbGQgYXNzZXRzLCBib3Jyb3csIHNwZWFrLCBjb250cmFjdCBvbiBiZWhhbGYgb2Ygb3RoZXIgRU9TIFVzZXJzIG9yIHRoZSBFT1MgYmxvY2tjaGFpbiBgY2hhaW5faWRgIGNvbGxlY3RpdmVseS4gVGhpcyBFT1MgYmxvY2tjaGFpbiBzaGFsbCBoYXZlIG5vIG93bmVycywgbWFuYWdlcnMsIG9yIGZpZHVjaWFyaWVzLgoKIyMgQXJ0aWNsZSBY4oCKLeKAilVzZXIgU2VjdXJpdHkKQWxsIGl0ZW1zIHBlcnRhaW5pbmcgdG8gcGVyc29uYWwgYWNjb3VudCBzZWN1cml0eSwgaW5jbHVkaW5nIGJ1dCBub3QgbGltaXRlZCB0byB0aGUgc2FmZWtlZXBpbmcgb2YgcHJpdmF0ZSBrZXlzLCBpcyBzb2xlbHkgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBVc2VyIHRvIHNlY3VyZS4KCiMjIEFydGljbGUgWEkgLSBgZW9zaW8ucHJvZHNgIExpbWl0ZWQgTGlhYmlsaXR5ClRoZSBVc2VyIGFja25vd2xlZGdlcyBhbmQgYWdyZWVzIHRoYXQsIHRvIHRoZSBmdWxsZXN0IGV4dGVudCBwZXJtaXR0ZWQgYnkgYW55IGFwcGxpY2FibGUgbGF3LCB0aGlzIGRpc2NsYWltZXIgb2YgbGlhYmlsaXR5IGFwcGxpZXMgdG8gYW55IGFuZCBhbGwgZGFtYWdlcyBvciBpbmp1cnkgd2hhdHNvZXZlciBjYXVzZWQgYnkgb3IgcmVsYXRlZCB0byByaXNrcyBvZiwgdXNlIG9mLCBvciBpbmFiaWxpdHkgdG8gdXNlLCB0aGUgRU9TIHRva2VuIG9yIHRoZSBFT1MgYmxvY2tjaGFpbiBgY2hhaW5faWRgIHVuZGVyIGFueSBjYXVzZSBvZiBhY3Rpb24gd2hhdHNvZXZlciBvZiBhbnkga2luZCBpbiBhbnkganVyaXNkaWN0aW9uLCBpbmNsdWRpbmcsIHdpdGhvdXQgbGltaXRhdGlvbiwgYWN0aW9ucyBmb3IgYnJlYWNoIG9mIHdhcnJhbnR5LCBicmVhY2ggb2YgY29udHJhY3Qgb3IgdG9ydCAoaW5jbHVkaW5nIG5lZ2xpZ2VuY2UpIGFuZCB0aGF0IGBlb3Npby5wcm9kc2AsIG5vciB0aGUgaW5kaXZpZHVhbCBwZXJtaXNzaW9ucyB0aGF0IG9wZXJhdGUgaXQsIHNoYWxsIG5vdCBiZSBsaWFibGUgZm9yIGFueSBpbmRpcmVjdCwgaW5jaWRlbnRhbCwgc3BlY2lhbCwgZXhlbXBsYXJ5IG9yIGNvbnNlcXVlbnRpYWwgZGFtYWdlcywgaW5jbHVkaW5nIGZvciBsb3NzIG9mIHByb2ZpdHMsIGdvb2R3aWxsIG9yIGRhdGEuCgojIEVPUyDsgqzsmqnsnpAg64+Z7J2Y7IScCgojIyDsoJXsnZgKCkVPUyDsgqzsmqnsnpAg64+Z7J2Y7ISc7J2YIOuqqOuToCDrjIDrrLjsnpAsIOq4sOyauOyehCDqvLQsIOuYkOuKlCDsnbjrnbzsnbgg7L2U65OcIOyaqeyWtOuKlCDsoJXsnZjsl5DshJzsmYAg64+Z7J287ZWcIO2aqOqzvOyZgCDsnZjrr7jqsIAg67aA7Jes65Cp64uI64ukLgoKLSAgIEVPUyDsgqzsmqnsnpAg64+Z7J2Y7IScOiDrs7gg66y47IScIChFVUEpCi0gICDssrTsnbggSUQ6IGNoYWluX2lk4oCKLS0t4oCKYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNgotICAg7IKs7Jqp7J6QOiBFT1Mg6rOE7KCV7J2EIOyngeygkSDrmJDripQg6rCE7KCR7KCB7Jy866GcIOyGjOycoO2VmOqxsOuCmCBFT1Mg6rOE7KCV7JeQIOyXsOqysOuQnCBFT1Mg6riw67CYIOyGjeyEseydhCDsnKDsp4DtlZjqsbDrgpgg6rSA66as7ZWY64qUIOyCrOuejCwg7KGw7KeBLCDrmJDripQg7KGw7KeB7J2YIOuqqOuToCDsgqzrnowuCi0gICDshozsnKDqtow6IO2VmOuCmCDsnbTsg4HsnZgg7Jyg7Zqo7ZWcIOyCrOyaqeq2jO2VnCDtmZXsnbjsnYQg7Ya17ZW0IEVPUyDqs4TsoJXsl5Ag7KeB7KCRIOuYkOuKlCDqsITsoJHsoIHsnLzroZwg7KCR6re87ZWp64uI64ukLiDshozsnKDqtozsnYAg64uk7KSRIOyEnOuqheq2jO2VnOydhCDsgqzsmqntlZjsl6wg7IKs7Jqp7J6Q6rCE7JeQIOu2gOu2hOyggeycvOuhnCDqs7XsnKAg65CgIOyImCDsnojsirXri4jri6QuCi0gICDruJTroZ0g7ZSE66Gc65OA7IScOiByZWdwcm9kdWNlcuulvCDsi6TtlontlZjqs6AgZW9zaW8udnBheeuhnOu2gO2EsCDrs7Tsg4HsnYQg67Cb64qUIOyCrOyaqeyekC4KLSAgIGVvc2lvLnByb2RzOiAxNS8yMSDruJTroZ0g7ZSE66Gc65OA7ISc65Ok7J20IOuPmeydmCDtlaAg65WMIGVvc2lvIOqzhOygleydmCDqtoztlZzsnYQg6rCA7KeIIOyImCDsnojripQg64+Z7KCBIOq2jO2VnCDqtazsobDrpbwg6rCA7KeEIEVPUyDqs4TsoJUuCi0gICDrhKTtirjsm4ztgawg7J6Q6riIOiDri6TsnYwg6rOE7KCV7JeQIO2PrO2VqCDrkJwg7Yag7YGwOiBlb3Npby5uYW1lcywgZW9zaW8ucmFtZmVlLCBlb3Npby5zYXZpbmcuCi0gICDqtIDrpqwg66y47IScOiByZWdwcm9kdWNlcuuKlCDqtIDrpqwg66y47ISc66GcIOqwhOyjvOuQqeuLiOuLpC4KLSAgIOyYqOyytOyduDogRU9TIOu4lOuhneyytOyduCBjaGFpbl9pZOyXkCDruYTqsIDsl63soIHsnbTrqbAg7LaU6rCAIO2VoCDsiJgg7J6I64qUIOu4lOuhnSDrgrTsl5Ag7JyE7LmY7ZWcIOuqqOuToCDqsbDrnpgsIOyKpOuniO2KuCDqs4Tslb0g65iQ64qUIOumrOy5tOultOuUlOyViCDqs4Tslb0uCi0gICBFT1Mg6riw67CYIOyGjeyEsTogRU9TIOu4lOuhneyytOyduOydhCDsp4HsoJEg7KGw7J6RLCDrs4Dqsr0sIOyghOyGoSwg7JiB7ZalIOuYkOuKlCDri6zrpqwg7KCB7Jqp7ZWY6riwIOychO2VtCDsnKDtmqjtlZwg7IKs7JqpIOq2jO2VnOydtCDtlYTsmpTtlZwg66qo65OgIOqygwotICAg7L2cOiBFT1Mg67iU66Gd7LK07J24IGNoYWluX2lk7JeQIOyekeyXheydhCDsi6Dssq3tlZjripQg6rKDLgotICAg7ZeI6rCAIOuwjyDqtoztlZw6ICftl4jqsIAn64qUIO2VtOuLuSDqtoztlZzsnYQg64yA7Iug7ZWY7JesIOyghOyGoeuQmOuKlCDtirjrnpzsnq3shZjsnZgg7JqU6rWs7IKs7ZWt7J2EIOygleydmO2VmOuKlCDrjbAg7IKs7Jqp65Cp64uI64ukLiAn6raM7ZWcJ+ydgCDtirnsoJUg6rOE7JW9IOyhsOy5mOyXkCDrjIDtlZwg6raM7ZWc7J2EIOu2gOyXrO2VqeuLiOuLpC4KLSAgIOumrOy5tOultOuUlOyViCDqs4Tslb06IO2VqeuyleyggSDqs4Tslb3snZgg7KCV7J2YIOyalOyGjOulvCDshoztlITtirjsm6jslrTroZwg7ZGc7ZiE7ZWY6rOgIOyLpO2Wie2VoCDsiJgg7J6I64qUIO2YleyLneycvOuhnCDrsLDsuZjtlZjripQg6rOE7JW9LgoKIyMg7KCcIDHsobDigIotLS3igIrsnITtl5jsl5Ag64yA7ZWcIOyCrOyaqeyekOuTpOydmCDsnbjsp4AKCuyCrOyaqeyekOqwgCBjaGFpbl9pZOyXkOyEnCBFT1Mg6rOE7KCV7JeQIOuMgO2VnCDsoJHqt7wg6raM7ZWc7J2EIOyeg+qzoCwg64uk66W4IOuwqeuyleycvOuhnCBFT1Mg6rOE7KCV7JeQIOuMgO2VnCDsoJHqt7zsnYQg67O07Zi47ZWY6riwIOychO2VtCDsoIHsoIjtlZwg7KGw7LmY66W8IOy3qO2VmOyngCDslYrripQg6rK97Jqw7JeQ64qUIEVPUyDqs4TsoJXsl5Ag7KCR6re87ZWgIOyImCDsl4bqsowg65Cc64uk64qUIOqyg+ydhCDsnbjsoJXtlZjqs6Ag64+Z7J2Y7ZWp64uI64ukLiDsgqzsmqnsnpDripQg7JWU7Zi47ZmUIO2GoO2BsOqzvCDruJTroZ3ssrTsnbgg6riw67CYIOyGjO2UhO2KuOybqOyWtOydmCDsnITtl5gsIOyCrOyaqeuylSwg6re466as6rOgIOuzteyeoeyEseyXkCDrjIDtlbQg7Lap67aE7Z6IIOydtO2VtO2VmOqzoCDsnojsnYzsnYQg7J247KCV7ZWp64uI64ukLiDsgqzsmqnsnpDripQgRU9TIOu4lOuhneyytOyduOydmCDsgqzsmqnsl5Ag64yA7ZWcIOyghOyggeyduCDssYXsnoTsnYQg7KeE64uk64qUIOqyg+yXkCDsnbjsoJXtlZjqs6Ag64+Z7J2Y7ZWp64uI64ukLgoKIyMg7KCcIDLsobDigIotLS3igIrtirnrs4TtlZwg7IKs7Jqp7J6QIOycoO2YlQoKcmVncHJvZHVjZXLrpbwg7Iuk7ZaJ7ZWY64qUIOyCrOyaqeyekOuKlCByZWdwcm9kdWNlciDrpqzsubTrpbTrlJTslYgg6rOE7JW97JeQIOuPmeydmO2VmOqzoCwg7J207JeQIOq1rOyGjeuQqeuLiOuLpC4KCiMjIOygnCAz7KGw4oCKLS0t4oCKRVVB7J2YIOuPmeydmAoKRU9TIOyCrOyaqeyekCDrj5nsnZjshJzripQg7ZiE7J6sIOyLnO2WieykkeyduCBFT1Mg66mU7J2464S3IOqxsOuyhOuEjOyKpOyXkCDrjIDtlZwg7ISk66qF7Jy866GcIOyCrOyaqeuQqeuLiOuLpC4g7L2U65Oc7JeQIOydmO2VtCDsi5ztlonrkJjripQg7J2065+s7ZWcIOq4sOuKpeydgCBFT1Mg66mU7J2464S3IOyekOyytOydmCDssrTqs4TsoIHsnbTqs6Ag6rOg7Jyg7ZWcIOq4sOuKpeydtOuvgOuhnCDsgqzsmqnsnpDsnZgg64+Z7J2Y66W8IO2VhOyalOuhnCDtlZjsp4Ag7JWK7Iq164uI64ukLgoKIyMg7KCcIDTsobDigIotLS3igIrqtIDrpqwg66y47IScCgpFVUHsmYAg6rSA66asIOusuOyEnOuKlCBlb3Npby5wcm9kc+ulvCDthrXtlbQg7IiY7KCV7J20IOqwgOuKpe2VqeuLiOuLpC4g7Yq57KCVIOuzgOqyveyCrO2VreydhCDsgqzsoITsl5Ag7ISk66qF7ZWY64qUIGVvc2lvLmZvcnVtIO2IrO2RnCDqs4Tslb3snYQg7Ya17ZW0IGVvc2lvLnByb2Rz6rCAIOyEseuqheyEnOulvCDsnpHshLHtlZjqs6Ag67Cc6riJ7ZWgIOqyg+ydhCDqtozqs6Dtlanri4jri6QuCgojIyDsoJwgNeyhsOKAii0tLeKAiuqwgOy5mOydmCDquLDrs7gg64uo7JyECgpFT1MgY2hhaW5faWTsnZgg6riw67O4IOuLqOychOuKlCBlb3Npby50b2tlbiDsiqTrp4jtirgg6rOE7JW97JeQIOydmO2VtCDsoJXsnZjrkJjqs6Ag7J6R7ISx65CcIEVPUyDthqDtgbDsnoXri4jri6QuCgojIyDsoJwgNuyhsOKAii0tLeKAikVPUyDruJTroZ3ssrTsnbgg7Jyg7KeACgplb3Npby5wcm9kc+uKlCDrqqjrk6Ag6riw64qlLCDstZzsoIHtmZQsIOq3uOumrOqzoCDsl4Xqt7jroIjsnbTrk5zsnZgg7ZiE7J6s7JmAIOuvuOuemOydmCDrqqjrk6Ag7IiY7KCV7IKs7ZWt7J2EIOq1rO2YhO2VmOuKlCDqsoPsnYQg7Y+s7ZWo7ZWY65CYLCDsnbTsl5Ag6rWt7ZWc65CY7KeAIOyViuuKlCDtmZzshLHtmZTrkJwg67iU66Gd7LK07J24IOy9lOuTnOuyoOydtOyKpOulvCDsnKDsp4Dtlanri4jri6QKCiMjIOygnCA37KGw4oCKLS0t4oCK64Sk7Yq47JuM7YGsIOyekOq4iAoK64Sk7Yq47JuM7YGsIOyekOq4iCDqs4TsoJXsl5Ag7Y+s7ZWo65CcIO2GoO2BsOydmCDsg4Htg5zrpbwg67OA6rK97ZWY6rGw64KYLCDrhKTtirjsm4ztgawg7J6Q6riI7J2YIOuwsOu2hCwg7J207ZaJLCDrmJDripQg67Cw7Y+s66W8IOyngS/qsITsoJHsoIHsnLzroZwg6rSA66as7ZWY64qUIOq4sOyhtCDsvZTrk5zrpbwg67OA6rK97ZWY64qUIOqyveyasOyXkOuKlCBlb3Npby5wcm9kc+ulvCBlb3Npby5mb3J1bSDstJ0g7Yis7ZGcIOyLnOyKpO2FnCDqs4Tslb3sl5Ag7LaU6rCA7ZWY7JesIOyCrOyghOyXkCDstqnrtoTtlZwg7ISk66qF7J20IOydtOujqOyWtOyguOyVvCDtlanri4jri6QuCgojIyDsoJwgOOyhsOKAii0tLeKAiuqzhOyglSDsg53shLHsnZgg7J6Q7JygCgrtmITsnqwsIOuYkOuKlCDrr7jrnpjsnZgg7IKs7Jqp7J6Q64qUIOuLpOuluCDsgqzsmqnsnpDsnZgg7ZeI6rCAIOyXhuydtCBFT1Mg6rOE7KCV7J2EIOunjOuTpCDsiJgg7J6I7Iq164uI64ukLiBlb3Npby5wcm9kc+uKlCBFT1Mg6rOE7KCV7JeQIOydmO2VtCDqs7XsnKDrkJwg7Jyg7Zqo7ZWcIO2XiOqwgCDsl4bsnbTripQgRU9TIOyCrOyaqeyekCDqs4TsoJXsl5Ag7JiB7Zal7J2EIOykhCDsiJgg7JeG7Iq164uI64ukLiBlb3Npby5wcm9kc+uKlCDqtoztlZzsnbQg6rO17Jyg65CY64qUIEVPUyDqs4TsoJXqs7wg6rSA66Co7ZWY7JesIOuLpOuluCDsgqzsmqnsnpDqsIAg7JqU7LKt7ZWcIOuqqOuToCDsnpHsl4Xsl5Ag64yA7ZW0IOyalOq4iOydhCDrtoDqs7ztlaAg7IiYIOyeiOyKteuLiOuLpC4KCiMjIOygnCA57KGw4oCKLS0t4oCK7Iug7YOBIOu2iOqwgAoK7IKs7Jqp7J6Q64qUIEVPUyDthqDtgbDsnZgg6rCA7LmY66W8IOuSt+uwm+y5qO2VoCDsiJgg7J6I64qUIOyLoO2DgSDrqqnsoIHsnYQg6rCA7KC47ISc64qUIOyViOuQqeuLiOuLpC4g7IKs7Jqp7J6Q64qUIEVPUyDsgqzsmqnsnpAg65iQ64qUIEVPUyDruJTroZ3ssrTsnbggY2hhaW5faWTrpbwg64yA7ZGc7ZWY7JesIOuIhOq1rOyXkOqyjOuPhCDsnpDsgrDsnYQg67O07Jyg7ZWY6rGw64KYLCDrjIDsl6ztlZjqsbDrgpgsIOyekOyCsOyXkCDrjIDtlbQg7JaY6riw7ZWY6rGw64KYLCDqs4Tslb3snYQg66e67J2EIOq2jO2VnOydhCDrtoDsl6ztlaAg7IiYIOyXhuyKteuLiOuLpC4gRU9TIOu4lOuhneyytOyduOyXkOuKlCDshozsnKDsnpAsIOq0gOumrOyekCwg6re466as6rOgIOyImO2DgeyekOqwgCDsl4bslrTslbwg7ZWp64uI64ukLgoKIyMg7KCcIDEw7KGw4oCKLS0t4oCK7IKs7Jqp7J6QIOuztOyViAoK67mE6rO16rCcIO2CpOydmCDrs7TqtIDsnYQg7Y+s7ZWo7ZWY65CYLCDsnbTsl5Ag6rWt7ZWc65CY7KeAIOyViuuKlCDqsJzsnbgg6rOE7KKMIOuztOyViOqzvCDqtIDroKjrkJwg66qo65OgIO2VreuqqeuTpCDrmJDtlZwg7KCE7KCB7Jy866GcIOyCrOyaqeyekOqwgCDslYjsoITtlZjqsowg67O06rSA7ZW07JW8IO2VqeuLiOuLpC4KCiMjIOygnCAxMeyhsOKAii0tLeKAimVvc2lvLnByb2RzIOycoO2VnOyxheyehAoK7IKs7Jqp7J6Q64qUIOuyleuloOydtCDtl4jsmqntlZjripQg7ZWc64+EIOuCtOyXkOyEnCBFT1Mg7Yag7YGw7J2YIOychO2XmCwg7IKs7JqpLCDrmJDripQg7IKs7JqpIOu2iOqwgOuhnCDsnbjtlbQg67Cc7IOd7ZWY64qUIOuqqOuToCDshpDtlbTsl5Ag64yA7ZW0IOyxheyehOydmCDrqbTssYUg7KGw7ZWt7J20IOyggeyaqeuQnOuLpOuKlCDqsoPsnYQg7J247KCV7ZWY6rOgLCDrj5nsnZjtlanri4jri6QuIOqzhOyVvSDsnITrsJgsIOu2iOuylSDtlonsnIQsIOq3uOumrOqzoCDsnITrsJgg7ZaJ7JyEICjqtIDrpqwg7YOc66eMIO2PrO2VqCnsmYAgZW9zaW8ucHJvZHMg65iQ64qUIOydtOulvCDsmrTsmIHtlZjripQg6rCc67OEIOyCrOyaqSDqtoztlZzsnYQg7Y+s7ZWo7ZWY65CYLCDsnbTsl5Ag6rWt7ZWc7ZWY7KeAIOyViuqzoCDrqqjrk6Ag6rSA7ZWgIOyngOyXreyXkOyEnOydmCDrqqjrk6Ag7KKF66WY7J2YIOyCrOycoOuhnCDsnbjtlZwgRU9TIOu4lOuhneyytOyduCBjaGFpbl9pZCDsnbTsnbUsIOyYgeyXheq2jCwg65iQ64qUIOuNsOydtO2EsOydmCDshpDsi6TsnYQg7Y+s7ZWo7ZWY7JesIOqwhOygkeyggSwg7Jqw67Cc7KCBLCDtirnsiJjtlZwsIOuMgO2RnOyggSwg6re466as6rOgIO2MjOyDneyggeyduCDshpDtlbTsl5Ag64yA7ZWcIOyxheyehOydhCDsp4Dsp4Ag7JWK7Iq164uI64ukLgoKIyBFT1PnlKjmiLfljY/orq4KCiMjICoq5a6a5LmJKioKCkVPU+eUqOaIt+WNj+iuruS4reeahOaJgOacieWkp+WGme+8jOaWnOS9k+aIluWGheiBlOS7o+eggeacr+ivreWwhuWFt+acieS4juS7peS4i+WumuS5ieebuOWQjOeahOaViOaenOWSjOWQq+S5ieOAggoKLSBFT1PnlKjmiLfljY/orq7vvJrljbPmnKzmlofmoaPvvIhFVUHvvIkKCi0g6ZO+5LiKSUQ6IGNoYWluX2lkIC0gYWNhMzc2ZjIwNmI4ZmMyNWE2ZWQ0NGRiZGM2NjU0N2MzNmM2YzMzZTNhMTE5ZmZiZWFlZjk0MzY0MmYwZTkwNgoKLSDnlKjmiLfvvJrku7vmhI/mu6HotrPkuIvliJfopoHmsYLnmoTkuKrkurrmiJbnu4Tnu4fvvJrnm7TmjqXmiJbogIXpl7TmjqXmi6XmnIlFT1PotKbmiLfmiJbkuI5FT1PotKbmiLflhbPogZTnmoTln7rkuo5FT1Plj5HooYznmoTotKLkuqfjgIIKCi0g5omA5pyJ5p2D77ya55u05o6l5oiW6ICF6Ze05o6l6YCa6L+H5LiA5Liq5oiW5aSa5Liq5pyJ5pWI55qE5p2D6ZmQ5qOA5p+l6K6/6Zeu5LiA5LiqRU9T6LSm5oi344CC5omA5pyJ5p2D5Y+v5Lul6YCa6L+H5aSa562+5p2D6ZmQ6K645Y+v5Zyo55So5oi36Ze05YWx5Lqr44CCCgotIOaJp+ihjOS6hnJlZ3Byb2R1Y2XvvIzlubbkuJTku45lb3Npby52cGF56aKG5Y+W5pS25YWl55qE55So5oi344CCCgotIGVvc2lvLnByb2RzOuWFt+acieWKqOaAgeadg+mZkOe7k+aehOeahEVPU+W4kOaIt++8jOW9kzE1LzIxIEJsb2NrIFByb2R1Y2Vyc+WQjOaEj+aXtu+8jOivpeW4kOaIt+WPr+S7peaJv+aLhWVvc2lv5biQ5oi355qE5p2D6ZmQ44CCCgotIOe9kee7nOi1hOS6p++8muWMheWQq+WcqOS7peS4i+i0puaIt+S4reeahOS7o+W4ge+8mmVvc2lvLm5hbWVz44CBZW9zaW8ucmFtZmVl44CBICBlb3Npby5zYXZpbmfjgIIKCi0g5rK755CG5paH5qGj77yacmVncHJvZHVjZXLmmK/msrvnkIbmlofmoaPjgIIKCi0g5Lu75L2V5Lqk5piT44CB5pm66IO95ZCI57qm5oiW6ICF5p2O5ZiJ5Zu+5ZCI57qm77yM5a6D5Lus5bey57uP5L2N5LqO5LiA5Liq5Yy65Z2X5Lit77yM5bm25LiU6L+Z5Liq5Yy65Z2X5piv5LiN5Y+v6YCG6L2s55qE44CB5bey6ZmE5Yqg5Yiw5ZCN5Li6Y2hhaW5faWTnmoRFT1PljLrlnZfpk77kuK3jgIIKCi0g5Z+65LqORU9T6LWE5Lqn77ya5Lu75L2V6ZyA6KaB5pyJ5pWI6K645Y+v5p2l5pON5L2c44CB5pS55Y+Y44CB6L2s56e744CB5b2x5ZON5oiW6ICF6L+b6KGM5YW25LuW5pON5L2c55qE5Lic6KW/44CCCgotIOaJp+ihjO+8muWcqOWQjeS4umNoYWluX2lk55qERU9T5Yy65Z2X6ZO+5Lit5o+Q5Lqk5LiA5Liq6KGM5Yqo44CCCgotIOaOiOadg+WSjOadg+mZkO+8muadg+mZkO+8iFBlcm1pc3Npb25z77yJ5piv55So5p2l5a6a5LmJ5Luj6KGo6K+l5p2D6ZmQ5Y+R6YCB55qE5Lqk5piT55qE6KaB5rGC55qE5Lu75oSP5ZCN5a2X44CC5Y+v5Lul57uZ54m55a6a55qE5ZCI57qm5pON5L2c55qE5o6I5p2D77yIQXV0aG9yaXphdGlvbnPvvInliIbphY3mnYPpmZDvvIhQZXJtaXNzaW9uc++8ieOAggoKLSDmnY7lmInlm77lkIjnuqbvvJrlsIbms5XlvovljY/orq7kuK3nmoTlrprkuYnopoHntKDku6Xog73lnKjova/ku7bkuK3ooajovr7lkozmiafooYznmoTmoLzlvI/ooajovr7nmoTlkIjnuqbjgIIKCiMjICoq5p2h5qy+5LiAKioqKueUqCoqKirmiLfpo47pmannoa7orqQqKgoK5aaC5p6c55So5oi35Lii5aSx6LSm5oi36K6/6Zeu5p2D6ZmQ5oiW6ICF5rKh5pyJ6YeH5Y+W5ZCI6YCC55qE5pa55byP5L+d5oqk6LSm5oi36K6/6Zeu5p2D6ZmQ77yM55So5oi35bqU55+l5oKJ5bm25ZCM5oSP77yMRU9T6LSm5oi35bCG5peg5rOV6K6/6Zeu44CC55So5oi35bqU56Gu6K6k55So5oi35a+55Yqg5a+G5Luj5biB5ZKM5Yy65Z2X6ZO+6L2v5Lu255qE6aOO6Zmp44CB55So5rOV5ZKM5aSN5p2C5oCn5pyJ5YWF5YiG5LqG6Kej44CC55So5oi35om/6K6k5bm25ZCM5oSP55So5oi36Ieq6KGM5om/5ouF5L2/55SoRU9T5Yy65Z2X6ZO+55qE6aOO6Zmp44CCCgojIyAqKuadoeasvuS6jCoqKirnibnmrornlKgqKioq5oi357G75Z6LKioKCuaJp+ihjHJlZ3Byb2R1Y2XvvIzlkIzmhI/lubbkuJTlj5dyZWdwcm9kdWNlcuadjuWYieWbvuWQiOe6pue6puadn+eahOeUqOaIt+OAggoKIyMgKirmnaHmrL7kuIkqKioq5ZCM5oSPKioqKkVPUyoqKirnlKgqKioq5oi35Y2P6K6uKioKCkVPU+eUqOaIt+WNj+iurueahOWunui0qOaYr+WvueW9k+WJjUVPU+S4u+e9keayu+eQhuWKn+iDveeahOaPj+i/sOOAgueUseS7o+eggeW8uuWItuaJp+ihjOeahOWKn+iDveS4jemcgOimgeeUqOaIt+eahOWQjOaEj++8jOWboOS4uui/meS6m+WKn+iDveaYr0VPU+S4u+e9keezu+e7n+iHquW4pueahOOAggoKIyMgKirmnaHmrL7lm5sqKiAtICoq5rK755CG5paH5qGjKioKCmVvc2lvLnByb2Rz5Y+v5Lul5a+5RU9T55So5oi35Y2P6K6u5ZKM5rK755CG5paH5qGj6L+b6KGM5Lu75L2V5L+u5pS544CC5Lil5q2j5o+Q6YaS77yM5o+Q5YmN55SoZW9zaW8uZm9ydW3lhazmipXlkIjnuqbvvIzpgJrov4dlb3Npby5wcm9kc+e8luWGmeOAgeWPkeW4g+S4gOS4quWjsOaYjuadpeaPj+i/sOmCo+S4quS/ruaUueOAggoKIyMgKirmnaHmrL7kupQqKioq5Y6f55Sf5Lu3KioqKuWAvOWNleS9jSoqCgpFT1Plhazpk77kuIrnmoTljp/nlJ/ku7flgLzljZXkvY3lupTkuLplb3Npby50b2tlbuaZuuiDveWQiOe6puWumuS5ieWSjOWIm+W7uueahEVPU+mAmuivgeOAggoKIyMgKirmnaHmrL7lha0qKioq57u05oqkKioqKkVPUyoqKirljLoqKioq5Z2X6ZO+KioKCuaXoOiuuueOsOWcqOaIluWwhuadpeWwhuadpe+8jGVvc2lvLnByb2Rz5bCG57u05oqk5rS76LeD55qE5Yy65Z2X6ZO+5Luj56CB5bqT77yM5YyF5ous5L2G5LiN6ZmQ5LqO5omA5pyJ5Yqf6IO944CB5LyY5YyW44CB5Y2H57qn55qE5omA5pyJ5L+u5pS544CB5a6e546w44CCCgojIyDmnaHmrL7kuIMgLSAqKioq5a6aKioqKuS5iSoqKipFT1MqKioq572R57uc6LWE5LqnCgrmm7TmlLnnvZHnu5zotYTkuqfotKbmiLfkuK3nmoTku7vkvZXku6PluIHnmoTnirbmgIHvvIzmm7TmlLnku7vkvZXnjrDlrZjnmoTnm7TmjqXmiJbpl7TmjqXnrqHnkIbku7vkvZXnvZHnu5zotYTkuqfnmoTliIbphY3jgIHlrp7njrDmiJbliIblj5HnmoTku6PnoIHvvIzpnIDopoHkuovlhYjnlKhlb3Npby5wcm9kc+WcqGVvc2lvLmZvcnVt5YWs5oqV5ZCI57qm5LiK57yW5YaZ5ZKM5Y+R5biD5pWI5p6c5o+P6L+w55qE5aOw5piO44CCCgojIyAqKuadoeasvuWFqy3liJvlu7rotKbmiLfoh6rnlLEqKgoK5Lu75L2V546w5Zyo5oiW5bCG5p2l55qE55So5oi36YO95Y+v5Lul5Zyo5pyq57uP5Lu75L2V5YW25LuW55So5oi36K645Y+v55qE5oOF5Ya15LiL5Yib5bu6RU9T5biQ5oi344CCICDlpoLkvZXmsqHmnInmlLbliLBFT1PluJDmiLfnmoTmnInmlYjorrjlj6/vvIhwZXJtaXNzaW9u77yJ77yMZW9zaW8ucHJvZHPmsLjov5zkuI3kvJrlvbHlk41FT1PnlKjmiLfluJDmiLfjgIIgIOWvueS6juWFseS6q+adg+mZkOeahEVPU+W4kOaIt+eahOWFtuS7lueUqOaIt+ivt+axgueahOS7u+S9leaTjeS9nO+8jGVvc2lvLnByb2Rz5Y+v6IO95Lya5pS25Y+W6LS555So44CCCgojIyAqKuadoeasvuS5neayoeacieWPl+aJmOS6uioqCgrmsqHmnInnlKjmiLfmib/mi4Xkv6HmiZjotKPku7vmnaXnu7TmjIFFT1Pku6PluIHnmoTku7flgLzjgILmsqHmnInnlKjmiLflj6/ku6Xku6PooahFT1PnlKjmiLfmiJbogIXku6PooajlkI3kuLpjaGFpbl9JROeahEVPU+WMuuWdl+mTvuaOiOadg+S7u+S9leS6uuWFseWQjOaMgeaciei1hOS6p+OAgeWAn+asvuOAgeWPkeiogOaIluWumuWQiOWQjOOAguatpOWMuuWdl+mTvuS4jeWtmOWcqOaLpeacieiAheOAgeeuoeeQhuiAheaIluiAheWPl+aJmOS6uuOAggoKIyMgKirmnaHmrL7ljYHkuKrkurrlronlhagqKgoK5omA5pyJ5pyJ5YWz5Liq5Lq66LSm5oi35a6J5YWo55qE5LqL6aG577yM5YyF5ous5L2G5LiN6ZmQ5LqO56eB6ZKl55qE5a6J5YWo5L+d5a2Y77yM6YO955Sx55So5oi36Ieq5bex6LSf6LSj44CCCgojIyAqKuadoeasvuWNgeS4gCBlb3Npby5wcm9kc+eahOaciemZkOi0o+S7uyoqCgrnlKjmiLflupTnn6XmgonlkozlkIzmhI/vvIzlnKjku7vkvZXpgILnlKjms5XlvovlhYHorrjnmoTmnIDlpKfojIPlm7TlhoXvvIzmnKzlhY3otKPlo7DmmI7pgILnlKjkuo7kuI5FT1Pku6PluIHpo47pmanvvIzkvb/nlKjmiJbml6Dms5Xkvb/nlKhFT1Pku6PluIHmnInlhbPmiJblr7zoh7TnmoTku7vkvZXmiJbmiYDmnInmjZ/lrrPmiJbkvKTlrrPvvIzkuZ/pgILnlKjkuo7ku7vkvZXlj7jms5XnrqHovpbljLrlhoXnmoTku7vkvZXku7vkvZXooYzkuLrkuIvnmoRFT1PljLrlnZfpk75jaGFpbl9pZO+8jOWMheaLrOS9huS4jemZkOS6jui/neWPjeaLheS/neOAgei/neWPjeWQiOWQjOaIluS+teadg+ihjOS4uu+8iOWMheaLrOeWj+W/ve+8ieOAgmVvc2lvLnByb2Rz5Lul5Y+K5pON5L2c5a6D55qE5Liq5Lq65p2D6ZmQ5a+55LqO5Lu75L2V6Ze05o6l55qE77yM5YG254S255qE77yM54m55q6K55qE77yM56S65L6L5oCn55qE5oiW5ZCO5p6c5oCn55qE5o2f5a6z77yM5YyF5ous5Yip5ram5o2f5aSx77yM5ZWG6KqJ5oiW5pWw5o2u77yM5LiN5om/5ouF5Lu75L2V6LSj5Lu744CCFkJsb2NrUHJvZHVjZXJBZ3JlZW1lbnTGbCMjIyAxLiBUaGUgaW50ZW50IG9mIHJlZ3Byb2R1Y2VyCgpUaGUgaW50ZW50IG9mIHRoZSBgcmVncHJvZHVjZXJgIGFjdGlvbiBpcyB0byByZWdpc3RlciBhIGJsb2NrIHByb2R1Y2VyIGNhbmRpZGFjeS4gVGhpcyBjb250cmFjdCBpcyBjb25zaWRlcmVkIGEgZ292ZXJuaW5nIGRvY3VtZW50IGFzIGRlZmluZWQgYnkgdGhlIEVPUyBVc2VyIEFncmVlbWVudCAoRVVBKS4KCnJlZ3Byb2R1Y2Vy7J2YIOuqqeyggQoKYHJlZ3Byb2R1Y2VyYCDsnpHsl4XsnZgg66qp7KCB7J2AIOu4lOuhneyDneyCsOyekCDsnoXtm4Trs7Qg65Ox66Gd7J2EIO2VmOuKlCDqsoPsnoXri4jri6QuIOydtCDqs4Tslb3snYAgRU9TIOyCrOyaqeyekCDqs4Tslb3shJwgKEVVQSnsl5Ag7KCV7J2Y65CcIOuwlOyZgCDqsJnsnbQg6rSA66asIOusuOyEnOuhnCDqsITso7zrkKnri4jri6QuCgpyZWdwcm9kdWNlciDnmoTnm67nmoQKCmByZWdwcm9kdWNlcmDmk43kvZznmoTnm67nmoTmmK/ms6jlhozmiJDkuLrlh7rlnZfoioLngrnlgJnpgInogIXjgILmoLnmja4gRU9TIOeUqOaIt+WNj+iurihFVUEp55qE5a6a5LmJ77yM5pys5ZCI57qm5bGe5LqO5rK755CG5paH5pysKGdvdmVybmluZyBkb2N1bWVudCkKCiMjIyAyLiBOb21pbmF0aW9uCgpJLCB7eyBwcm9kdWNlciB9fSwgaGVyZWJ5IG5vbWluYXRlIG15c2VsZiBmb3IgY29uc2lkZXJhdGlvbiBhcyBhIGJsb2NrIHByb2R1Y2VyIGNhbmRpZGF0ZS4gVGhpcyBub21pbmF0aW9uIGluY2x1ZGVzIGFncmVlbWVudCB0byB0aGUgdGVybXMgb2YgdGhpcyBjb250cmFjdCBieSBteSBibG9jayBwcm9kdWNlciBjYW5kaWRhdGUgZW50aXR5LCBpbmNsdWRpbmcgYWxsIG9mIGl0cyBzaGFyZWhvbGRlcnMsIG93bmVycywgZW1wbG95ZWVzLCBzdGFmZiwgbWVtYmVycywgYW5kIGFueSBpbmRpdmlkdWFsIHdvcmtpbmcgaW4gb2ZmaWNpYWwsIGRpcmVjdCwgb3IgYWZmaWxpYXRlZCBjYXBhY2l0eSBmb3IgbXkgQmxvY2sgUHJvZHVjZXIgZW50aXR5LgoK7KeA66qFCgrrgpgsIHt7IHByb2R1Y2VyIH1964qUIOu4lOuhne2UhOuhnOuTgOyEnCDtm4Trs7TroZwg6rOg66Ck65CY64+E66GdIOyekOyLoOydhCDsp4DrqoXtlanri4jri6QuIOydtCDsp4DrqoXsl5DripQg67iU66Gd7ZSE66Gc65OA7ISc7ZqM7IKs7J2YIOuqqOuToCDso7zso7wsIOyGjOycoOyekCwg7KeB7JuQLCDrqaTrsoQsIO2ajOybkCDrsI8g6rO17Iud7J247JuQLCDsp4HsoJEg65iQ64qUIOqzhOyXtOyCrOyXkOyEnCDsnbztlZjripQg66qo65OgIOqwnOyduOydhCDtj6ztlajtlZwg67iU66Gd7ZSE66Gc65OA7IScIO2ajOyCrOqwgCDqs4Tslb0g7KGw6rG07JeQIOuMgO2VtCDrj5nsnZjtlajsnYQg7J247KCV7ZWp64uI64ukLgoK5o+Q5ZCNCgrmnKzkurrvvIx7eyBwcm9kdWNlciB9fe+8jOeJueatpOaPkOWQjeacrOS6uuS4uuWHuuWdl+iKgueCueWAmemAieS6uuOAguacrOaPkOWQjeWMheaLrOS6huacrOWHuuWdl+iKgueCueWAmemAieS6uuWunuS9k+WvueacrOWQiOe6puS4reaJgOacieadoeasvueahOaYjuehruWQjOaEj++8jOWMheWQq+WFtuaJgOacieiAheOAgembh+WRmOOAgeWRmOW3peOAgeaIkOWRmO+8jOS7peWPiuS7u+S9leS7peato+W8j+aWueW8j+OAgeebtOaOpeaIlumZhOWxnuaWueW8j+S4uuacrOWHuuWdl+iKgueCueWunuS9k+W3peS9nOeahOS4quS6uuOAggoKIyMjIDMuIFJlc2lnbmF0aW9uIGFuZCBSZW1vdmFsIGZvciBJbmFiaWxpdHkgdG8gUGVyZm9ybSBPYmxpZ2F0aW9ucy4KCklmIEksIHt7IHByb2R1Y2VyIH19LCBhbSB1bmFibGUgdG8gcGVyZm9ybSBhbnkgb2YgdGhlIG9ibGlnYXRpb25zIHN0aXB1bGF0ZWQgaW4gdGhpcyBjb250cmFjdCwgSSB3aWxsIHJlc2lnbiBteSBwb3NpdGlvbiBieSBjYWxsaW5nIHRoZSBgdW5yZWdwcm9kYCBhY3Rpb24uCgpJZiBJLCB7eyBwcm9kdWNlciB9fSwgZmFpbCB0byByZXNpZ24gd2hlbiB1bmFibGUgdG8gcGVyZm9ybSBzYWlkIG9ibGlnYXRpb25zLCBJIHVuZGVyc3RhbmQgdGhhdCBwcm9jZWR1cmVzIGVudW1lcmF0ZWQgaW4gdGhpcyBjb250cmFjdCBzaGFsbCBiZSBlbmFjdGVkLgoK7J2Y66y07J2YIOu2iOydtO2WieyXkCDrjIDtlZwg7IKs7J6EIOuwjyDssqDtmowKCnt7IHByb2R1Y2VyIH196rCAIOuzuCDqs4Tslb3shJzsl5Ag66qF7Iuc65CcIOydmOustOulvCDsiJjtlokg7ZWgIOyImCDsl4bripQg6rK97JqwLCDsg53sgrDsnpAg7YKk66W8IG51bGwg66GcIO2VqOycvOuhnOyNqCDrs7jsnbjsnZgg7KeA7JyE66W8IOyCrOyehO2VqeuLiOuLpC4KCuunjOyVvSDrgrTqsIAge3twcm9kdWNlcn197J2YIOydmOustOulvCDsnbTtlokg7ZWgIOyImCDsl4bsnYQg65WMIOyCrOyehO2VmOyngCDslYrripTri6TrqbQsIOuCmOuKlCDrs7gg6rOE7JW97JeQIOyXtOqxsOuQnCDsoIjssKjqsIAg7KeR7ZaJ65Co7J2EIOuPmeydmO2VqeuLiOuLpC4KCuWboOS4jeiDveWxpeihjOS5ieWKoeiAjOmAgOWHuuaIluiiq+WPlua2iOWHuuWdl+i1hOagvAoK5aaC5p6c5oiR77yMe3sgcHJvZHVjZXIgfX3vvIzkuI3og73lsaXooYzmnKzlkIjnuqbkuK3miYDop4TlrprnmoTmiYDmnInkuYnliqHvvIzmiJHlsIbkvb/nlKggYHVucmVncHJvZGAg5pON5L2c5p2l6Ieq5oiR6YCA5Ye677yIcmVzaWdu77yJ44CCCgrlpoLmnpzmiJEge3sgcHJvZHVjZXIgfX0sIOWcqOaXoOazleWxpeihjOS4iui/sOS5ieWKoeaXtuacquiDvemAgOWHuihyZXNpZ24p77yM5oiR55+l5pmT5pys5ZCI57qm5bCG5Lya5oyJ54Wn5omA5pyJ5YiX5Li+55qE56iL5bqP5a+55oiR5a6e6KGM5Yi26KOB5oiW5aSE572a56iL5bqP44CCCgojIyMgNC4gRU9TIEFjY291bnRzCgpCbG9jayBQcm9kdWNlcnMgbWF5IG5ldmVyIGFmZmVjdCBhbiBhY2NvdW50IG9uIHRoZSBFT1MgYmxvY2tjaGFpbiwgZXhjZXB0IGZvciB0aGUgcmVhc29ucyBzcGVjaWZpY2FsbHkgY2l0ZWQgaW4gdGhpcyBjb250cmFjdCB0aGF0IHBlcnRhaW4gdG8gQmxvY2sgUHJvZHVjZXIgYWNjb3VudHMuIFVzZXIgYWNjb3VudHMgY2FuIG9ubHkgYmUgYWZmZWN0ZWQgb24gdGhlIGJhc2lzIG9mIEFydGljbGUgVklJSSBpbiB0aGUgRU9TIFVzZXIgQWdyZWVtZW50LgoKRU9TIOqzhOyglQoK67iU66Gd7ZSE66Gc65OA7ISc64qUIOuzuCDqs4Tslb3sl5DshJwg7ZW064u57ZWY64qUIOu4lOuhne2UhOuhnOuTgOyEnOydmCDqs4TsoJUg7LCo64uo7JeQIOq0gOugqO2VmOyXrCDtirnrs4Ttnogg7Ja46riJ7ZWcIOydtOycoOulvCDsoJzsmbjtlZjqs6DripQgRU9TIOu4lOuhneyytOyduOydmCDqs4TsoJXsl5Ag6rKw7L2UIOyYge2WpeydhCDrr7jsuZjsp4Ag7JWK7Iq164uI64ukLiDsgqzsmqnsnpAg6rOE7KCV7J2AIEVPUyDsgqzsmqnsnpAg6rOE7JW97ISc7J2YIDjsobDsl5Ag6re86rGw7ZWgIOuVjOunjCDsmIHtlqXsnYQg67Cb7J2EIOyImCDsnojsirXri4jri6QuCgpFT1Mg6LSm5Y+3Cgrlh7rlnZfoioLngrnmsLjov5zkuI3kvJrlr7kgRU9TIOWMuuWdl+mTvuS4iueahOW4kOaIt+mAoOaIkOW9seWTje+8jOmZpOmdnuaYr+acrOWQiOe6puS4reeJueWIq+aPkOWIsOS4juWHuuWdl+iKgueCueW4kOaIt+acieWFs+eahOWOn+WboOOAguWPquacieWfuuS6jiBFT1PnlKjmiLfljY/orq7kuK3nmoTnrKzlhavmnaHnmoTmg4XlvaLkuIvvvIznlKjmiLfnmoTotKblj7fmiY3kvJrlj5fliLDlvbHlk40uCgojIyMgNS4gUHJvZHVjZXIgS2V5CgpJLCB7eyBwcm9kdWNlciB9fSwgd2lsbCBzaWduIGJsb2NrcyB3aXRoIHt7IHByb2R1Y2VyX2tleSB9fQoKSWYgSSwge3sgcHJvZHVjZXIgfX0gc3VzcGVjdCBteSBrZXkgaGFzIGJlZW4gY29tcHJvbWlzZWQgSSB3aWxsIGFsZXJ0IHRoZSBvdGhlciBCbG9jayBQcm9kdWNlcnMgaW1tZWRpYXRlbHkuCgpJLCB7eyBwcm9kdWNlciB9fSwgYWNrbm93bGVkZ2UgdGhhdCBhbnkgYW5kIGFsbCBhY3Rpb25zIGV4ZWN1dGVkIHdpdGggbXkge3sgcHJvZHVjZXJfa2V5IH19IGlzIG15IHJlc3BvbnNpYmlsaXR5LCByZWdhcmRsZXNzIG9mIHRoZSBhY2NvdW50IGJlaW5nIGNvbXByb21pc2VkLgoK7ZSE66Gc65OA7IScIO2CpAoK64KYLCB7eyBwcm9kdWNlciB9feuKlCB7eyBwcm9kdWNlciBfIGtleSB9fSDroZwg67iU66Gd7JeQIOyEnOuqhSDtlaAg6rKD7J6F64uI64ukLgrrp4zslb0g64K0LCB7e3Byb2R1Y2VyfX0g6rCAIOuzuOyduOydmCDtgqTqsIAg7IaQ7IOB65CY7JeI64uk6rOgIOydmOyLrOuQmOuptCDsponsi5wg64uk66W4IOu4lOuhne2UhOuhnOuTgOyEnOyXkOqyjCDslYzroKTspIQg6rKD7J6F64uI64ukLgrrgpgsIHt7cHJvZHVjZXJ9feuKlCBFT1Mg67iU66Gd7LK07J247JeQ7IScIOuzuOyduOydmCDruJTroZ3tlITroZzrk4DshJwg6rOE7KCV7J20IOyLpO2Wie2VmOuKlCDrqqjrk6Ag7J6R7JeF7JeQIOuMgO2VtCwg6rOE7KCVIOydtOyDgSDsnKDrrLTsmYAg6rSA66CoIOyXhuydtCwg7LGF7J6E7J20IOyeiOydjOydhCDsnbjsoJXtlanri4jri6QuCgrlh7rlnZfoioLngrnlhazpkqUKCiDmiJEsIHt7IHByb2R1Y2VyIH19LCDlsIbkvb/nlKgge3sgcHJvZHVjZXJfa2V5IH19IOWvueWMuuWdl+etvuWQjeOAggrlpoLmnpzmiJEsIHt7IHByb2R1Y2VyIH19LCDmgIDnlpHmiJHnmoTlr4bpkqXlt7Looqvms4TpnLLvvIzmiJHlsIbnq4vljbPpgJrnn6Xlhbbku5boioLngrnjgIIK5oiR77yMe3sgcHJvZHVjZXIgfX3vvIzmib/orqTmiJHnmoTlh7rlnZfoioLngrnluJDmiLflnKhFT1PljLrlnZfpk77kuIrmiYDmiafooYznmoTku7vkvZXmk43kvZzpg73mmK/miJHnmoTotKPku7vvvIzml6Dorrror6XluJDmiLfmmK/lkKbooqvnm5fjgIIKCiMjIyA2LiBBUEkgRW5kcG9pbnRzCgpJZiBJLCB7eyBwcm9kdWNlciB9fSwgcXVhbGlmeSBmb3IsIGFuZCBjaG9vc2UgdG8gY2xhaW0gcmV3YXJkcyBkdWUgdG8gdm90ZXMgcmVjZWl2ZWQsIGFuZC9vciBibG9ja3MgcHJvZHVjZWQsIEksIHt7IHByb2R1Y2VyIH19LCB3aWxsIHByb3ZpZGUgZnVuY3Rpb25pbmcgYW5kIHF1ZXJ5YWJsZSBwdWJsaWMgUDJQIGFuZCBBUEkgZW5kcG9pbnRzIHRvIG1haW50YWluIHN5bmNocm9uaXphdGlvbiB3aXRoIHRoZSBibG9ja2NoYWluIGFuZCBzdWJtaXQgdHJhbnNhY3Rpb25zIHRvIGJlIGluY2x1ZGVkLiBBUEkgZW5kcG9pbnRzIG11c3QgYmUgdXBkYXRlZCB0byBhIHJlY2VudCBmdW5jdGlvbmFsIHZlcnNpb24gdGhhdCBkb2VzIG5vdCBoYXZlIGtub3duIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4KCkksIHt7IHByb2R1Y2VyIH19LCBoZXJlYnkgYWNrbm93bGVkZ2UgdGhhdCBpZiBJIGFtIHVuYWJsZSB0byBkbyBzbyB3aXRoaW4gMzAgbWludXRlcyBvZiBiZWluZyBhbGVydGVkIGJ5IGFub3RoZXIgYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRlLCBJIGNhbiBiZSByZW1vdmVkIGJ5IHVzZSBvZiB0aGUgYHJtdnByb2R1Y2VyYCBhY3Rpb24uCgpBUEkg7JeU65Oc7Y+s7J247Yq4Cgrrp4zslb0g64K0LCB7eyBwcm9kdWNlciB9fSDqsIAg7Yis7ZGc66W8IOuwm+yVhCDruJTroZ0g67O07IOB7J2EIOyyreq1rO2VoCDsiJgg7J6I64qUIOyekOqyqeydhCDslrvsnLzrqbQsIOuCmCB7eyBwcm9kdWNlciB9feuKlCDsnpHrj5kg67CPIOy/vOumrCDqsIDriqXtlZwg6rO16rCcIFAyUCDrsI8gQVBJIOyXlOuTnO2PrOyduO2KuOulvCDruJTroZ3ssrTsnbjqs7zsnZgg64+Z6riw7ZmUIOuwjyDtirjrnpzsnq3shZjsnYQg7KCc7Lac7ZWgIOyImCDsnojqsowg7Jyg7KeA6rSA66as7ZWp64uI64ukLiBBUEkg7JeU65Oc7Y+s7J247Yq464qUIOyVjOugpOynhCDrs7TslYgg7Leo7JW97ISx7J20IOyXhuuKlCDstZzsi6DrsoTsoITsnLzroZwg7JeF642w7J207Yq47ZW07JW8IO2VqeuLiOuLpC4KCuuCmCwge3sgcHJvZHVjZXIgfX0g64qUIOuLpOuluCBibG9jayBwcm9kdWNlciBjYW5kaWRhdGUg6rCAIOqyveqzoCDigIvigIvtlZwg7ZuELCAzMOu2hCDsnbTrgrTsl5Ag67CU66Gc7J6h7J2EIOyImCDsl4bri6TrqbQgYHJtdnByb2R1Y2VyYCDsobDsuZjrpbwg7Ya17ZW0IOyekOqyqeydtCDsoJzqsbAg65CgIOyImCDsnojsnYzsnYQg7J247KCV7ZWp64uI64ukLgoKQVBJIOerr+eCuQoK5aaC5p6c5oiR77yMe3sgcHJvZHVjZXIgfX0g55Sx5LqO5b6X5Yiw5oqV56Wo5ZKML+aIluWHuuWdl+eahOWOn+WboO+8jOespuWQiOmihuWPluWlluWKseeahOadoeS7tuW5tumAieaLqeaOpeWPl+WlluWKse+8jOmCo+S5iOaIke+8jCB7eyBwcm9kdWNlciB9fe+8jOWwhuaPkOS+m+WKn+iDveato+W4uOeahOWFrOWFsSBQMlAg5ZKMIEFQSSDnq6/ngrnmnaXnu7TmiqTkuI7ljLrlnZfpk77nmoTlkIzmraXvvIzlubbmj5DkuqTopoHmiZPljIXlhaXlnZfnmoTkuovliqHjgIJBUEkg56uv54K55b+F6aG75pu05paw5Yiw5pyA5paw55qE5Y+v55So54mI5pys77yM5bm25LiU6K+l54mI5pys5rKh5pyJ5bey55+l55qE5a6J5YWo5ryP5rSeCgrmiJHvvIx7e3Byb2R1Y2VyfX3vvIzlnKjmraTnoa7orqTvvIzlpoLmnpzmiJHlnKjmlLbliLDlj6bkuIDkuKogYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRl55qE6K2m5ZGK5ZCOMzDliIbpkp/lhoXku43kuI3og73nrKblkIjkuIrov7DopoHmsYLvvIzlj6/ku6Xkvb/nlKhgcm12cHJvZHVjZXJg5pON5L2c56e76Zmk5oiR55qE6LSm5oi344CCCgojIyMgNy4gRXhlY3V0aW9uIHRpbWUKCkksIHt7IHByb2R1Y2VyIH19LCB3aWxsIGRlcGxveSBhbmQgcnVuIG5ldHdvcmsgaW5mcmFzdHJ1Y3R1cmUgY2FwYWJsZSBvZiBtYWludGFpbmluZyAybXMgb3IgbGVzcyBDUFUgZXhlY3V0aW9uIHRpbWVzLgoKSSwge3sgcHJvZHVjZXIgfX0sIGhlcmVieSBhY2tub3dsZWRnZSB0aGF0IGlmIEkgYW0gdW5hYmxlIHRvIGRvIHNvIHdpdGhpbiAzMCBtaW51dGVzIG9mIGJlaW5nIGFsZXJ0ZWQgYnkgYW5vdGhlciBibG9jayBwcm9kdWNlciBjYW5kaWRhdGUsIEkgY2FuIGJlIHJlbW92ZWQgYnkgdXNlIG9mIHRoZSBgcm12cHJvZHVjZXJgIGFjdGlvbi4KCuyLpO2WiSDsi5zqsIQKCuuCmCwge3sgcHJvZHVjZXIgfX3ripQgMm1zIOuYkOuKlCDqt7gg7J207ZWY7J2YIENQVSDsi6Ttlokg7Iuc6rCE7J2EIOycoOyngO2VoCDsiJgg7J6I64qUIOuEpO2KuOybjO2BrCDsnbjtlITrnbzrpbwg67Cw7Y+s7ZWY6rOgIOyLpO2Wie2VqeuLiOuLpC4KCiDrgpgsIHt7IHByb2R1Y2VyIH19IOuKlCDri6TrpbggYmxvY2sgcHJvZHVjZXIgY2FuZGlkYXRl6rCAIOqyveqzoCDigIvigIvtlZwg7ZuELCAzMOu2hCDsnbTrgrTsl5Ag67CU66Gc7J6h7J2EIOyImCDsl4bri6TrqbQgYHJtdnByb2R1Y2VyYCDsobDsuZjrpbwg7Ya17ZW0IOyekOqyqeydtCDsoJzqsbAg65CgIOyImCDsnojsnYzsnYQg7J247KCV7ZWp64uI64ukLgoK5omn6KGM5pe26Ze0CgrmiJHvvIwge3sgcHJvZHVjZXIgfX3vvIzlsIbpg6jnvbLlkozov5DooYznvZHnu5zln7rnoYDorr7mlr3vvIzog73lpJ/lsIYgQ1BVIOaJp+ihjOaXtumXtOe7tOaMgeWcqCAybXMg5oiW5pu05bCR55qE5rC05bmz44CCCgrmiJHvvIx7eyBwcm9kdWNlciB9fe+8jOWcqOatpOehruiupO+8jOWmguaenOaIkeWcqOaUtuWIsOWPpuS4gOS4qmJsb2NrIHByb2R1Y2VyIGNhbmRpZGF0ZeeahOitpuWRiuWQjjMw5YiG6ZKf5YaF5LiN6IO956ym5ZCI5LiK6L+w5p2h5Lu277yM5Y+v5Lul5L2/55SoIGBybXZwcm9kdWNlcmAg5pON5L2c5bCG5oiR56e76Zmk44CCCgojIyMgOC4gT3JkZXJpbmcKCkkge3sgcHJvZHVjZXIgfX0gYWdyZWUgdG8gcHJvY2VzcyB0cmFuc2FjdGlvbnMgb24gYSBmaXJzdC1pbi1maXJzdC1vdXQgKEZJRk8pIGJhc2lzLCBhbmQgbm90IHRvIG1hbmlwdWxhdGUgdGhlIGNvbnRlbnRzIG9mIGJsb2NrcyBpbiBvcmRlciB0byBkZXJpdmUgcHJvZml0IGZyb20gdGhlIG9yZGVyIGluIHdoaWNoIHRyYW5zYWN0aW9ucyBhcmUgaW5jbHVkZWQ6IHRoZSBoYXNoIG9mIHRoZSBibG9jayB0aGF0IGlzIHByb2R1Y2VkLgoK7IOd7IKwCuuCmCwge3sgcHJvZHVjZXIgfX3ripQg7ISg7J6FIOyEoOy2nOuylSAoRklGTykg67Cp7Iud7Jy866GcIOqxsOuemOulvCDsspjrpqztlZjqs6Ag6rGw656Y6rCAIOu4lOuhneydmCDtlbTsi5zsl5Ag7Y+s7ZWo65CY64qUIOyInOyEnOyXkOyEnCDsnbTsnbXsnYQg7Ja77Jy866Ck64qUIOuqqeyggeycvOuhnCDsg53sgrDtlZjripQg67iU66Gd7J2YIOuCtOyaqeydhCDsobDsnpHtlZjsp4Ag7JWK6riw66GcIOuPmeydmO2VqeuLiOuLpC4KCumhuuW6jwoK5oiR77yMIHt7IHByb2R1Y2VyIH19IO+8jOWQjOaEj+agueaNruWFiOi/m+WFiOWHuihGSUZPKeeahOaWueW8j+WkhOeQhuS6i+WKoe+8jOW5tuS4lOe7neS4jeS8muS4uuS6hueJn+WIqeiAjOWIqeeUqOWMuuWdl+WGheWuueOAgeaTjee6teWMuuWdl+S4reS6pOaYk+WkhOeQhueahOmhuuW6j+OAggoKIyMjIDkuIFJhbmRvbSBSb3RhdGlvbiBvZiBTdGFuZGJ5cwoKSSwge3sgcHJvZHVjZXIgfX0sIGFncmVlIHRoYXQgaWYgSSBhbSBpbiBhIHBhaWQgc3RhbmRieSBwb3NpdGlvbiwgSSBjYW4gYmUgcmFuZG9tbHkgY2FsbGVkIGludG8gYSBwcm9kdWNpbmcgcG9zaXRpb24uIFVwb24gZmFpbHVyZSB0byBwcm9kdWNlIGJsb2NrcywgY29kZSBtYXkgc2VsZi1leGVjdXRlIHBlbmFsdGllcyByZWdhcmRpbmcgZnV0dXJlIHZwYXkgcmV3YXJkcy4KCuycoOq4iSDrjIDquLAg67iU66Gd7ZSE66Gc65OA7ISc7J2YIOustOyekeychCDroZzthYzsnbTshZgKCuuCmCwge3sgcHJvZHVjZXIgfX3ripQg67O47J247J20IOycoOq4iSDrjIDquLDsp4Hsl5Ag7J6I7J2EIOuVjCwg66y07J6R7JyE66GcIOyDneyCsOyngeycvOuhnCDrtoDrpoQg67Cb7J2EIOyImCDsnojri6TripQg6rKD7JeQIOuPmeydmO2VqeuLiOuLpC4g7J2065WMIOu4lOuhneydhCDsg53shLHtlZjsp4Ag66q77ZWY66m0IOy9lOuTnOuKlCDtlqXtm4QgdnBheSDrs7Tsg4Hsl5Ag64yA7ZWcIOyymOuyjOydhCDsp5HtlontlaAg7IiYIOyeiOyKteuLiOuLpC4KCuWkh+mAieiKgueCuemaj+acuui9ruaNogoK5oiR77yMe3sgcHJvZHVjZXIgfX3vvIzlkIzmhI/oi6XmnKzoioLngrnlpITkuo7mnInlgb/lpIfpgInnirbmgIHvvIzlj6/ooqvpmo/mnLrosIPlhaXlh7rlnZfnirbmgIHjgILlpoLmnpzmiJHml6Dms5Xlh7rlnZfvvIzlkIjnuqbku6PnoIHlj6/og73kvJroh6rliqjmiafooYzlsLHmnKrmnaXnmoQgdnBheSDmiqXphazov5vooYzlpITnvZrjgIIKCiMjIyAxMC4gTWlzc2luZyBUd28gb3IgTW9yZSBSb3VuZHMgb2YgQmxvY2tzCgpJLCB7eyBwcm9kdWNlciB9fSwgYWNrbm93bGVkZ2UgdGhhdCBpZiBhZnRlciBtaXNzaW5nIDIgb3IgbW9yZSByb3VuZHMgb2YgYmxvY2tzIGluIHN1Y2Nlc3Npb24gSSBhbSB1bmFibGUgdG8gYmUgY29udGFjdGVkIHdpdGhpbiAyMCBtaW51dGVzLCBJLCB7eyBwcm9kdWNlciB9fSwgYWNrbm93bGVkZ2UgdGhhdCBJIG1heSBiZSByZW1vdmVkIGZyb20gYSBwcm9kdWNpbmcgcG9zaXRpb24gYnkgdXNlIG9mIHRoZSBgcm12cHJvZHVjZXJgIGFjdGlvbi4KCkksIHt7IHByb2R1Y2VyIH19LCBhY2tub3dsZWRnZSB0aGF0IGFmdGVyIG1pc3NpbmcgdHdvIG9yIG1vcmUgcm91bmRzIG9mIGJsb2NrcyBpbiBzdWNjZXNzaW9uLCBzdGFuZGFyZCBwcmFjdGljZSBzdGlwdWxhdGVzIHJlbW92aW5nIG15IHByb2R1Y2VyIGJ5IHVzaW5nIHRoZSBgdW5yZWdwcm9kYCBhY3Rpb24gdW50aWwgdGhlIGdpdmVuIGlzc3VlIGlzIHJlc29sdmVkLgoK65GQIOudvOyatOuTnCDsnbTsg4HsnZgg67iU66GdIOuIhOudvQoK64KYLCB7eyBwcm9kdWNlciB9feuKlCDrkZAg65287Jq065OcIOydtOyDgSDsl7Dsho3tlZjsl6wg67iU66Gd7J2EIOuIhOudvSDtlZwg7ZuELCAyMOu2hCDsnbTrgrTsl5Ag7Jew6529IO2VoCDsiJgg7JeG64uk66m0IHt7IHByb2R1Y2VyIH19IOqwgCBgcm12cHJvZHVjZXJgIOyVoeyFmOydmCDsgqzsmqnrkJjslrQg7IOd7IKwIOychOy5mOyXkOyEnCDsoJzqsbAg65CgIOyImCDsnojsnYzsnYQg7J247KCV7ZWp64uI64ukLgoKe3sgcHJvZHVjZXIgfX3ripQg65GQIOudvOyatOuTnCDsnbTsg4HsnLzroZwg67iU66Gd7J2EIOyXsOyGjeyggeycvOuhnCDriITrnb3tlZzri6TrqbQsIOyjvOyWtOynhCDrrLjsoJzqsIAg7ZW06rKwIOuQoCDrlYzquYzsp4AgYHVucmVncHJvZGAg7J6R7JeF7J2EIOyCrOyaqe2VmOyXrCDrs7jsnbjsnbQg7IOd7IKwIOychOy5mOyXkOyEnCDsoJzqsbDrkKjsnbQg7ZGc7KSAIOq0gO2WieycvOuhnCDqt5zsoJXrkJjslrQg7J6I7J2M7J2EIOyduOygle2VqeuLiOuLpC4KCuS4pOi9ruaIluabtOWkmui9ruS4ouWdl+eahOaDheW9ogoK5oiR77yMe3sgcHJvZHVjZXIgfX0sIOehruiupOWmguaenOi/nue7reS4pOi9ruaIluabtOWkmui9ruS4ouWdl+S4lOaXoOazleWcqDIw5YiG6ZKf5YaF6IGU57O75Yiw5oiR77yM5oiR77yMe3sgcHJvZHVjZXIgfX0sIOWQjOaEj+WPr+iDveS8mueUqCBgcm12cHJvZHVjZXJgIOaTjeS9nOWwhuaIkeenu+mZpOOAggrmiJHvvIx7eyBwcm9kdWNlciB9fSwg5aaC5p6c6L+e57ut5Lik6L2u5oiW5pu05aSa6L2u5Lii5Z2X77yM5qC55o2u5qCH5YeG5a6e6Le15Lya5Y+R6LW3IGB1bnJlZ3Byb2RgIOaTjeS9nOWwhuaIkeenu+mZpOWHuuWdl+i1hOagvO+8jOebtOWIsOmXrumimOino+WGs+OAggoKIyMjIDExLiBVcmdlbnQgU2VjdXJpdHkgUGF0Y2hlcwoKSSwge3sgcHJvZHVjZXIgfX0sIGFja25vd2xlZGdlIHRoYXQgaWYgSSBhbSBub3QgYWJsZSB0byBiZSBjb250YWN0ZWQgaW4gYW55IGZvcm0gYWZ0ZXIgYW4gdXJnZW50IHNlY3VyaXR5IHBhdGNoIGlzIGFubm91bmNlZCwgSSBtYXkgYmUgcmVtb3ZlZCBieSB1c2Ugb2YgdGhlIGBybXZwcm9kdWNlcmAgYWN0aW9uLgoK6ri06riJIOuztOyViCDtjKjsuZgK6ri06riJIOuztOyViCDtjKjsuZjqsIAg67Cc7ZGcIOuQnCDtm4QsIOyWtOuWpCDtmJXtg5zroZzrk6Ag7Jew6529IO2VoCDsiJgg7JeG64qUIOqyveyasCBgcm12cHJvZHVjZXJgIOyekeyXheydhCDsgqzsmqntlZjsl6wg7KCc6rGwIOuQoCDsiJgg7J6I7J2M7J2EIOuCmCwge3sgcHJvZHVjZXIgfX3ripQg7J247KCV7ZWp64uI64ukLgoK57Sn5oCl5a6J5YWo6KGl5LiBCgrmiJHvvIx7eyBwcm9kdWNlciB9fe+8jOehruiupOWmguaenOWcqOe0p+aApeWuieWFqOihpeS4geWPkeW4g+WQjueUqOS7u+S9leaWueW8j+mDveaXoOazleiBlOezu+WIsOaIke+8jOWPr+iDveS8mueUqCBgcm12cHJvZHVjZXJgIOaMh+S7pOWwhuaIkeenu+mZpOOAggoKIyMjIDEyLiBEaXNjbG9zdXJlIG9mIEVudGl0eSBhbmQgU2VydmVyIEluZm9ybWF0aW9uCgpJLCB7eyBwcm9kdWNlciB9fSwgYXR0ZXN0IHRoYXQgSSBoYXZlIGRpc2Nsb3NlZCB0aGUgYXBwcm94aW1hdGUgZ2VvbG9jYXRpb24gZm9yIG15IG1haW4gcHJvZHVjdGlvbiBub2RlIGFzIGJlaW5nIHt7IGxvY2F0aW9uIH19LgoK67KV7J24IOuwjyDshJzrsoQg7KCV67O07J2YIOqzteqwnAoK64KYLCB7eyBwcm9kdWNlciB9fSDripQg7KO8IOyDneyCsCDrhbjrk5zsl5Ag64yA7ZWcIOychOy5mCDsoJXrs7Trpbwg6rO16rCc7ZaI7J2M7J2EIOymneuqhe2VqeuLiOuLpC4KCuWunuS9k+WSjOacjeWKoeWZqOeahOS/oeaBr+aKq+mcsgoK5oiR77yMe3sgcHJvZHVjZXIgfX3vvIznoa7orqTmiJHlt7Lnu4/miqvpnLLkuobkuLvlh7rlnZfoioLngrnmnI3liqHlmajlnLDnkIbkvY3nva7nmoTlh4bnoa7kv6Hmga/jgILlhbblnLDlnYDkuLoge3sgbG9jYXRpb24gfX3jgIIKCiMjIyAxMy4gRXN0YWJsaXNoZXMgdGhlIHBlbmFsdHkgYW5kIHByb2NlZHVyZSBmb3IgdW53aWxsaW5nbmVzcyB0byBjb21wbHkgd2l0aCBwZW5hbHRpZXMgb3IgcHJvY2VkdXJlcwoKSSwge3sgcHJvZHVjZXIgfX0sIGFja25vd2xlZGdlIHRoYXQgZmFpbGluZyB0byBjb21wbHkgd2l0aCBwZW5hbHRpZXMgb3IgcHJvY2VkdXJlcyBlbmFjdGVkIGFnYWluc3QgbWUgd2lsbCByZXN1bHQgaW4gQmxvY2sgUHJvZHVjZXJzIGV4ZWN1dGluZyB0aGUgYHJtdnByb2R1Y2VyYCBjb250cmFjdCB0byByZW1vdmUgbWUuCgpJLCB7eyBwcm9kdWNlciB9fSwgd2lsbCBub3QgZXhlY3V0ZSB0aGUgYHJlZ3Byb2R1Y2VyYCBjb250cmFjdCB1bnRpbCBzZXJ2aW5nIG9yIGZ1bGZpbGxpbmcgdGhlIHJlcXVpcmVtZW50cyBmcm9tIGEgcGVuYWx0eSBvciBwcm9jZWR1cmUgdGhhdCByZXN1bHRzIGluIGhhdmluZyB0aGUgYHJtdnByb2R1Y2VyYCBjb250cmFjdCBleGVjdXRlZCB0byByZW1vdmUgbWUuCgpJLCB7eyBwcm9kdWNlciB9fSwgYWNrbm93bGVkZ2UgdGhhdCBpZiBJIGNvbnRpbnVlIHRvIGNhbGwgdGhlIGByZWdwcm9kdWNlcmAgYWN0aW9uIHdpdGhvdXQgc2VydmluZyBvciBmdWxmaWxsaW5nIHRoZSByZXF1aXJlbWVudHMgZnJvbSBicmVhY2ggb2YgYHJlZ3Byb2R1Y2VyYCwgbXkgYWNjb3VudCBrZXlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVnaXN0ZXJlZCBCbG9jayBQcm9kdWNlciBpbiBxdWVzdGlvbiBtYXkgYmUgbnVsbGVkIGJ5IEJsb2NrIFByb2R1Y2VycyBieSB1c2luZyBgZW9zaW8ud3JhcGAuCgrtjpjrhJDti7Drpbwg7KSA7IiY7ZWY7KeAIOyViuydhCDqsr3smrAg67KM7LmZCgrrgpgsIHt7IHByb2R1Y2VyIH19IOuKlCDrgpjsl5Dqsowg7KCc7J6s65CcIOyymOuyjOydhCDspIDsiJjtlZjsp4Ag7JWK7Jy866m0IOu4lOuhne2UhOuhnOuTgOyEnOuTpOydtCBgcm12cHJvZHVjZXJgIOqzhOyVveydhCDsp5HtlontlZjqsowg65CgIOqyg+ydtOudvOqzoCDsnbjsoJXtlanri4jri6QuIOuCmCwge3sgcHJvZHVjZXIgfX0g64qUIGBybXZwcm9kdWNlcmAg6rOE7JW97J20IOynke2WieuQnOuLpOuptCDsmpTqtawg7IKs7ZWt7J2EIOy2qeyhseuQoCDrlYzquYzsp4AgYHJlZ3Byb2R1Y2VyYCDqs4Tslb3snYQg7J207ZaJ7ZWY7KeAIOyViuydhCDqsoPsnoXri4jri6QuCmByZWdwcm9kdWNlcmAg6rOE7JW9IOychOuwmOycvOuhnCDsnbjtlZwg7JqU6rWsIOyCrO2VreydhCDstqnsobHsi5ztgqTsp4Ag7JWK6rOgIGByZWdwcm9kdWNlcmAg6rOE7JW97J2EIOqzhOyGjSDtmLjstpztlZjrqbQg7ZW064u5IOu4lOuhne2UhOuhnOuTgOyEnOyZgCDqtIDroKjrkJwg6rOE7KCVIO2CpOqwgCBgZW9zaW8ud3JhcGAg7J2EIOyCrOyaqe2VmOyXrCDruJTroZ3tlITroZzrk4DshJzrk6Tsl5Ag7J2Y7ZW0IOustO2aqO2ZlCDrkKAg7IiYIOyeiOydjOydhCDsnbjsoJXtlanri4jri6QuCgrlr7nkuI3mhL/pgbXlrojlpITnvZrnmoTooYzkuLrkuojku6XlpITnvZoKCuaIke+8jHt7IHByb2R1Y2VyIH1977yM5om/6K6k6Iul5LiN6YG15a6I5a+55pys5Lq65Yi26KOB55qE5aSE572a77yMQlAg5Y+v5Lul5a6e5pa9IGBybXZwcm9kdWNlcmAg5ZCI57qm77yM5oiR5o6l5Y+X5oqV56Wo55qE6LWE5qC85bCG6KKr5Y+W5raI44CC6Iul5pyJ6ZKI5a+55oiR5a6e5pa9IGBybXZwcm9kdWNlcmAg5ZCI57qm55qE5oOF5Ya15Y+R55Sf77yM5oiRLCB7eyBwcm9kdWNlciB9fSDlnKjpgbXlrogv5bGl6KGM5omA5pS25Yiw55qE5aSE572a5LmL5YmN77yM5LiN5Lya5YaN5qyh5omn6KGMIGByZWdwcm9kdWNlcmAg5ZCI57qm44CCCgrmiJHvvIx7eyBwcm9kdWNlciB9fe+8jOWcqOWxpeihjOaDqee9mueoi+W6j+eahOimgeaxguS5i+WJje+8jOS4jeS8muaJp+ihjCBgcmVncHJvZHVjZXJgIOWQiOWQjOOAguaIkeefpeaZk+WmguS4jeWxpeihjOatpOeoi+W6j++8jCBgcm12cHJvZHVjZXJgIOWQiOWQjOWwhuS8muWGjeasoeWwhuaIkeenu+mZpOOAggoK5oiRLHt7IHByb2R1Y2VyIH19LCDmib/orqTlpoLmnpzmsqHmnInpgbXlrojmiJblsaXooYzlm6Dov53lj40gYHJlZ3Byb2R1Y2VyYCDogIzlj5fliLDnmoTmg6nnvZropoHmsYLljbTnu6fnu63osIPnlKhgcmVncHJvZHVjZXJg5pON5L2c77yMQlAg5Y+v5Lul6LCD55SoIGBlb3Npby53cmFwYCDlkIjnuqblsIbmiJHnlKjmnaXms6jlhozlh7rlnZfoioLngrnnmoTotKblj7flr4bpkqXorr7nva7kuLrml6DmlYjlgLzjgIIAAAEidmFyaWFudF9ibG9ja19zaWduaW5nX2F1dGhvcml0eV92MAEaYmxvY2tfc2lnbmluZ19hdXRob3JpdHlfdjAGAAAAAEhzvT4UYWN0aW9uX3JldHVybl9idXlyYW0AsMr+SHO9PhRhY3Rpb25fcmV0dXJuX2J1eXJhbQDAigpLc70+FGFjdGlvbl9yZXR1cm5fYnV5cmFtAAAAYF59pLkZYWN0aW9uX3JldHVybl9yYW10cmFuc2ZlcgCuWniam6W5GWFjdGlvbl9yZXR1cm5fcmFtdHJhbnNmZXIAAABAmhujwhVhY3Rpb25fcmV0dXJuX3NlbGxyYW0='
)
export const abi = ABI.from(abiBlob)
export namespace Types {
    @Struct.type('key_weight')
    export class key_weight extends Struct {
        @Struct.field(PublicKey)
        key!: PublicKey
        @Struct.field(UInt16)
        weight!: UInt16
    }
    @Struct.type('block_signing_authority_v0')
    export class block_signing_authority_v0 extends Struct {
        @Struct.field(UInt32)
        threshold!: UInt32
        @Struct.field(key_weight, {array: true})
        keys!: key_weight[]
    }
    @Variant.type('variant_block_signing_authority_v0', [block_signing_authority_v0])
    export class variant_block_signing_authority_v0 extends Variant {
        declare value: block_signing_authority_v0
    }
    @Struct.type('abi_hash')
    export class abi_hash extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Checksum256)
        hash!: Checksum256
    }
    @Struct.type('action_return_buyram')
    export class action_return_buyram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        quantity!: Asset
        @Struct.field(Int64)
        bytes_purchased!: Int64
        @Struct.field(Int64)
        ram_bytes!: Int64
    }
    @Struct.type('action_return_ramtransfer')
    export class action_return_ramtransfer extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        to!: Name
        @Struct.field(Int64)
        bytes!: Int64
        @Struct.field(Int64)
        from_ram_bytes!: Int64
        @Struct.field(Int64)
        to_ram_bytes!: Int64
    }
    @Struct.type('action_return_sellram')
    export class action_return_sellram extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Asset)
        quantity!: Asset
        @Struct.field(Int64)
        bytes_sold!: Int64
        @Struct.field(Int64)
        ram_bytes!: Int64
    }
    @Struct.type('activate')
    export class activate extends Struct {
        @Struct.field(Checksum256)
        feature_digest!: Checksum256
    }
    @Struct.type('permission_level')
    export class permission_level extends Struct {
        @Struct.field(Name)
        actor!: Name
        @Struct.field(Name)
        permission!: Name
    }
    @Struct.type('permission_level_weight')
    export class permission_level_weight extends Struct {
        @Struct.field(permission_level)
        permission!: permission_level
        @Struct.field(UInt16)
        weight!: UInt16
    }
    @Struct.type('wait_weight')
    export class wait_weight extends Struct {
        @Struct.field(UInt32)
        wait_sec!: UInt32
        @Struct.field(UInt16)
        weight!: UInt16
    }
    @Struct.type('authority')
    export class authority extends Struct {
        @Struct.field(UInt32)
        threshold!: UInt32
        @Struct.field(key_weight, {array: true})
        keys!: key_weight[]
        @Struct.field(permission_level_weight, {array: true})
        accounts!: permission_level_weight[]
        @Struct.field(wait_weight, {array: true})
        waits!: wait_weight[]
    }
    @Struct.type('bid_refund')
    export class bid_refund extends Struct {
        @Struct.field(Name)
        bidder!: Name
        @Struct.field(Asset)
        amount!: Asset
    }
    @Struct.type('bidname')
    export class bidname extends Struct {
        @Struct.field(Name)
        bidder!: Name
        @Struct.field(Name)
        newname!: Name
        @Struct.field(Asset)
        bid!: Asset
    }
    @Struct.type('bidrefund')
    export class bidrefund extends Struct {
        @Struct.field(Name)
        bidder!: Name
        @Struct.field(Name)
        newname!: Name
    }
    @Struct.type('producer_key')
    export class producer_key extends Struct {
        @Struct.field(Name)
        producer_name!: Name
        @Struct.field(PublicKey)
        block_signing_key!: PublicKey
    }
    @Struct.type('producer_schedule')
    export class producer_schedule extends Struct {
        @Struct.field(UInt32)
        version!: UInt32
        @Struct.field(producer_key, {array: true})
        producers!: producer_key[]
    }
    @Struct.type('block_header')
    export class block_header extends Struct {
        @Struct.field(UInt32)
        timestamp!: UInt32
        @Struct.field(Name)
        producer!: Name
        @Struct.field(UInt16)
        confirmed!: UInt16
        @Struct.field(Checksum256)
        previous!: Checksum256
        @Struct.field(Checksum256)
        transaction_mroot!: Checksum256
        @Struct.field(Checksum256)
        action_mroot!: Checksum256
        @Struct.field(UInt32)
        schedule_version!: UInt32
        @Struct.field(producer_schedule, {optional: true})
        new_producers?: producer_schedule
    }
    @Struct.type('block_info_record')
    export class block_info_record extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(UInt32)
        block_height!: UInt32
        @Struct.field(TimePoint)
        block_timestamp!: TimePoint
    }
    @Struct.type('blockchain_parameters')
    export class blockchain_parameters extends Struct {
        @Struct.field(UInt64)
        max_block_net_usage!: UInt64
        @Struct.field(UInt32)
        target_block_net_usage_pct!: UInt32
        @Struct.field(UInt32)
        max_transaction_net_usage!: UInt32
        @Struct.field(UInt32)
        base_per_transaction_net_usage!: UInt32
        @Struct.field(UInt32)
        net_usage_leeway!: UInt32
        @Struct.field(UInt32)
        context_free_discount_net_usage_num!: UInt32
        @Struct.field(UInt32)
        context_free_discount_net_usage_den!: UInt32
        @Struct.field(UInt32)
        max_block_cpu_usage!: UInt32
        @Struct.field(UInt32)
        target_block_cpu_usage_pct!: UInt32
        @Struct.field(UInt32)
        max_transaction_cpu_usage!: UInt32
        @Struct.field(UInt32)
        min_transaction_cpu_usage!: UInt32
        @Struct.field(UInt32)
        max_transaction_lifetime!: UInt32
        @Struct.field(UInt32)
        deferred_trx_expiration_window!: UInt32
        @Struct.field(UInt32)
        max_transaction_delay!: UInt32
        @Struct.field(UInt32)
        max_inline_action_size!: UInt32
        @Struct.field(UInt16)
        max_inline_action_depth!: UInt16
        @Struct.field(UInt16)
        max_authority_depth!: UInt16
    }
    @Struct.type('blockchain_parameters_v1')
    export class blockchain_parameters_v1 extends blockchain_parameters {
        @Struct.field(UInt32, {optional: true})
        max_action_return_value_size?: UInt32
    }
    @Struct.type('buyram')
    export class buyram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        quant!: Asset
    }
    @Struct.type('buyrambytes')
    export class buyrambytes extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(UInt32)
        bytes!: UInt32
    }
    @Struct.type('buyramself')
    export class buyramself extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Asset)
        quant!: Asset
    }
    @Struct.type('buyrex')
    export class buyrex extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Asset)
        amount!: Asset
    }
    @Struct.type('canceldelay')
    export class canceldelay extends Struct {
        @Struct.field(permission_level)
        canceling_auth!: permission_level
        @Struct.field(Checksum256)
        trx_id!: Checksum256
    }
    @Struct.type('powerup_config_resource')
    export class powerup_config_resource extends Struct {
        @Struct.field(Int64, {optional: true})
        current_weight_ratio?: Int64
        @Struct.field(Int64, {optional: true})
        target_weight_ratio?: Int64
        @Struct.field(Int64, {optional: true})
        assumed_stake_weight?: Int64
        @Struct.field(TimePointSec, {optional: true})
        target_timestamp?: TimePointSec
        @Struct.field(Float64, {optional: true})
        exponent?: Float64
        @Struct.field(UInt32, {optional: true})
        decay_secs?: UInt32
        @Struct.field(Asset, {optional: true})
        min_price?: Asset
        @Struct.field(Asset, {optional: true})
        max_price?: Asset
    }
    @Struct.type('powerup_config')
    export class powerup_config extends Struct {
        @Struct.field(powerup_config_resource)
        net!: powerup_config_resource
        @Struct.field(powerup_config_resource)
        cpu!: powerup_config_resource
        @Struct.field(UInt32, {optional: true})
        powerup_days?: UInt32
        @Struct.field(Asset, {optional: true})
        min_powerup_fee?: Asset
    }
    @Struct.type('cfgpowerup')
    export class cfgpowerup extends Struct {
        @Struct.field(powerup_config)
        args!: powerup_config
    }
    @Struct.type('claimrewards')
    export class claimrewards extends Struct {
        @Struct.field(Name)
        owner!: Name
    }
    @Struct.type('closerex')
    export class closerex extends Struct {
        @Struct.field(Name)
        owner!: Name
    }
    @Struct.type('cnclrexorder')
    export class cnclrexorder extends Struct {
        @Struct.field(Name)
        owner!: Name
    }
    @Struct.type('connector')
    export class connector extends Struct {
        @Struct.field(Asset)
        balance!: Asset
        @Struct.field(Float64)
        weight!: Float64
    }
    @Struct.type('consolidate')
    export class consolidate extends Struct {
        @Struct.field(Name)
        owner!: Name
    }
    @Struct.type('defcpuloan')
    export class defcpuloan extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(UInt64)
        loan_num!: UInt64
        @Struct.field(Asset)
        amount!: Asset
    }
    @Struct.type('defnetloan')
    export class defnetloan extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(UInt64)
        loan_num!: UInt64
        @Struct.field(Asset)
        amount!: Asset
    }
    @Struct.type('delegatebw')
    export class delegatebw extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        stake_net_quantity!: Asset
        @Struct.field(Asset)
        stake_cpu_quantity!: Asset
        @Struct.field('bool')
        transfer!: boolean
    }
    @Struct.type('delegated_bandwidth')
    export class delegated_bandwidth extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        to!: Name
        @Struct.field(Asset)
        net_weight!: Asset
        @Struct.field(Asset)
        cpu_weight!: Asset
    }
    @Struct.type('deleteauth')
    export class deleteauth extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Name)
        permission!: Name
        @Struct.field(Name, {optional: true})
        authorized_by?: Name
    }
    @Struct.type('deposit')
    export class deposit extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        amount!: Asset
    }
    @Struct.type('eosio_global_state')
    export class eosio_global_state extends blockchain_parameters {
        @Struct.field(UInt64)
        max_ram_size!: UInt64
        @Struct.field(UInt64)
        total_ram_bytes_reserved!: UInt64
        @Struct.field(Int64)
        total_ram_stake!: Int64
        @Struct.field(BlockTimestamp)
        last_producer_schedule_update!: BlockTimestamp
        @Struct.field(TimePoint)
        last_pervote_bucket_fill!: TimePoint
        @Struct.field(Int64)
        pervote_bucket!: Int64
        @Struct.field(Int64)
        perblock_bucket!: Int64
        @Struct.field(UInt32)
        total_unpaid_blocks!: UInt32
        @Struct.field(Int64)
        total_activated_stake!: Int64
        @Struct.field(TimePoint)
        thresh_activated_stake_time!: TimePoint
        @Struct.field(UInt16)
        last_producer_schedule_size!: UInt16
        @Struct.field(Float64)
        total_producer_vote_weight!: Float64
        @Struct.field(BlockTimestamp)
        last_name_close!: BlockTimestamp
    }
    @Struct.type('eosio_global_state2')
    export class eosio_global_state2 extends Struct {
        @Struct.field(UInt16)
        new_ram_per_block!: UInt16
        @Struct.field(BlockTimestamp)
        last_ram_increase!: BlockTimestamp
        @Struct.field(BlockTimestamp)
        last_block_num!: BlockTimestamp
        @Struct.field(Float64)
        total_producer_votepay_share!: Float64
        @Struct.field(UInt8)
        revision!: UInt8
    }
    @Struct.type('eosio_global_state3')
    export class eosio_global_state3 extends Struct {
        @Struct.field(TimePoint)
        last_vpay_state_update!: TimePoint
        @Struct.field(Float64)
        total_vpay_share_change_rate!: Float64
    }
    @Struct.type('eosio_global_state4')
    export class eosio_global_state4 extends Struct {
        @Struct.field(Float64)
        continuous_rate!: Float64
        @Struct.field(Int64)
        inflation_pay_factor!: Int64
        @Struct.field(Int64)
        votepay_factor!: Int64
    }
    @Struct.type('exchange_state')
    export class exchange_state extends Struct {
        @Struct.field(Asset)
        supply!: Asset
        @Struct.field(connector)
        base!: connector
        @Struct.field(connector)
        quote!: connector
    }
    @Struct.type('fundcpuloan')
    export class fundcpuloan extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(UInt64)
        loan_num!: UInt64
        @Struct.field(Asset)
        payment!: Asset
    }
    @Struct.type('fundnetloan')
    export class fundnetloan extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(UInt64)
        loan_num!: UInt64
        @Struct.field(Asset)
        payment!: Asset
    }
    @Struct.type('init')
    export class init extends Struct {
        @Struct.field(VarUInt)
        version!: VarUInt
        @Struct.field(Asset.Symbol)
        core!: Asset.Symbol
    }
    @Struct.type('limitauthchg')
    export class limitauthchg extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Name, {array: true})
        allow_perms!: Name[]
        @Struct.field(Name, {array: true})
        disallow_perms!: Name[]
    }
    @Struct.type('linkauth')
    export class linkauth extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Name)
        code!: Name
        @Struct.field(Name)
        type!: Name
        @Struct.field(Name)
        requirement!: Name
        @Struct.field(Name, {optional: true})
        authorized_by?: Name
    }
    @Struct.type('logbuyram')
    export class logbuyram extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        quantity!: Asset
        @Struct.field(Int64)
        bytes!: Int64
        @Struct.field(Int64)
        ram_bytes!: Int64
    }
    @Struct.type('logramchange')
    export class logramchange extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Int64)
        bytes!: Int64
        @Struct.field(Int64)
        ram_bytes!: Int64
    }
    @Struct.type('logsellram')
    export class logsellram extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Asset)
        quantity!: Asset
        @Struct.field(Int64)
        bytes!: Int64
        @Struct.field(Int64)
        ram_bytes!: Int64
    }
    @Struct.type('mvfrsavings')
    export class mvfrsavings extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        rex!: Asset
    }
    @Struct.type('mvtosavings')
    export class mvtosavings extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        rex!: Asset
    }
    @Struct.type('name_bid')
    export class name_bid extends Struct {
        @Struct.field(Name)
        newname!: Name
        @Struct.field(Name)
        high_bidder!: Name
        @Struct.field(Int64)
        high_bid!: Int64
        @Struct.field(TimePoint)
        last_bid_time!: TimePoint
    }
    @Struct.type('newaccount')
    export class newaccount extends Struct {
        @Struct.field(Name)
        creator!: Name
        @Struct.field(Name)
        name!: Name
        @Struct.field(authority)
        owner!: authority
        @Struct.field(authority)
        active!: authority
    }
    @Struct.type('onblock')
    export class onblock extends Struct {
        @Struct.field(block_header)
        header!: block_header
    }
    @Struct.type('onerror')
    export class onerror extends Struct {
        @Struct.field(UInt128)
        sender_id!: UInt128
        @Struct.field(Bytes)
        sent_trx!: Bytes
    }
    @Struct.type('pair_time_point_sec_int64')
    export class pair_time_point_sec_int64 extends Struct {
        @Struct.field(TimePointSec)
        first!: TimePointSec
        @Struct.field(Int64)
        second!: Int64
    }
    @Struct.type('powerup')
    export class powerup extends Struct {
        @Struct.field(Name)
        payer!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(UInt32)
        days!: UInt32
        @Struct.field(Int64)
        net_frac!: Int64
        @Struct.field(Int64)
        cpu_frac!: Int64
        @Struct.field(Asset)
        max_payment!: Asset
    }
    @Struct.type('powerup_order')
    export class powerup_order extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(UInt64)
        id!: UInt64
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Int64)
        net_weight!: Int64
        @Struct.field(Int64)
        cpu_weight!: Int64
        @Struct.field(TimePointSec)
        expires!: TimePointSec
    }
    @Struct.type('powerup_state_resource')
    export class powerup_state_resource extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Int64)
        weight!: Int64
        @Struct.field(Int64)
        weight_ratio!: Int64
        @Struct.field(Int64)
        assumed_stake_weight!: Int64
        @Struct.field(Int64)
        initial_weight_ratio!: Int64
        @Struct.field(Int64)
        target_weight_ratio!: Int64
        @Struct.field(TimePointSec)
        initial_timestamp!: TimePointSec
        @Struct.field(TimePointSec)
        target_timestamp!: TimePointSec
        @Struct.field(Float64)
        exponent!: Float64
        @Struct.field(UInt32)
        decay_secs!: UInt32
        @Struct.field(Asset)
        min_price!: Asset
        @Struct.field(Asset)
        max_price!: Asset
        @Struct.field(Int64)
        utilization!: Int64
        @Struct.field(Int64)
        adjusted_utilization!: Int64
        @Struct.field(TimePointSec)
        utilization_timestamp!: TimePointSec
    }
    @Struct.type('powerup_state')
    export class powerup_state extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(powerup_state_resource)
        net!: powerup_state_resource
        @Struct.field(powerup_state_resource)
        cpu!: powerup_state_resource
        @Struct.field(UInt32)
        powerup_days!: UInt32
        @Struct.field(Asset)
        min_powerup_fee!: Asset
    }
    @Struct.type('powerupexec')
    export class powerupexec extends Struct {
        @Struct.field(Name)
        user!: Name
        @Struct.field(UInt16)
        max!: UInt16
    }
    @Struct.type('producer_info')
    export class producer_info extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Float64)
        total_votes!: Float64
        @Struct.field(PublicKey)
        producer_key!: PublicKey
        @Struct.field('bool')
        is_active!: boolean
        @Struct.field('string')
        url!: string
        @Struct.field(UInt32)
        unpaid_blocks!: UInt32
        @Struct.field(TimePoint)
        last_claim_time!: TimePoint
        @Struct.field(UInt16)
        location!: UInt16
        @Struct.field(variant_block_signing_authority_v0, {optional: true})
        producer_authority?: variant_block_signing_authority_v0
    }
    @Struct.type('producer_info2')
    export class producer_info2 extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Float64)
        votepay_share!: Float64
        @Struct.field(TimePoint)
        last_votepay_share_update!: TimePoint
    }
    @Struct.type('ramburn')
    export class ramburn extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Int64)
        bytes!: Int64
        @Struct.field('string')
        memo!: string
    }
    @Struct.type('ramtransfer')
    export class ramtransfer extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        to!: Name
        @Struct.field(Int64)
        bytes!: Int64
        @Struct.field('string')
        memo!: string
    }
    @Struct.type('refund')
    export class refund extends Struct {
        @Struct.field(Name)
        owner!: Name
    }
    @Struct.type('refund_request')
    export class refund_request extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(TimePointSec)
        request_time!: TimePointSec
        @Struct.field(Asset)
        net_amount!: Asset
        @Struct.field(Asset)
        cpu_amount!: Asset
    }
    @Struct.type('regproducer')
    export class regproducer extends Struct {
        @Struct.field(Name)
        producer!: Name
        @Struct.field(PublicKey)
        producer_key!: PublicKey
        @Struct.field('string')
        url!: string
        @Struct.field(UInt16)
        location!: UInt16
    }
    @Struct.type('regproducer2')
    export class regproducer2 extends Struct {
        @Struct.field(Name)
        producer!: Name
        @Struct.field(variant_block_signing_authority_v0)
        producer_authority!: variant_block_signing_authority_v0
        @Struct.field('string')
        url!: string
        @Struct.field(UInt16)
        location!: UInt16
    }
    @Struct.type('regproxy')
    export class regproxy extends Struct {
        @Struct.field(Name)
        proxy!: Name
        @Struct.field('bool')
        isproxy!: boolean
    }
    @Struct.type('rentcpu')
    export class rentcpu extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        loan_payment!: Asset
        @Struct.field(Asset)
        loan_fund!: Asset
    }
    @Struct.type('rentnet')
    export class rentnet extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        loan_payment!: Asset
        @Struct.field(Asset)
        loan_fund!: Asset
    }
    @Struct.type('rex_balance')
    export class rex_balance extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        vote_stake!: Asset
        @Struct.field(Asset)
        rex_balance!: Asset
        @Struct.field(Int64)
        matured_rex!: Int64
        @Struct.field(pair_time_point_sec_int64, {array: true})
        rex_maturities!: pair_time_point_sec_int64[]
    }
    @Struct.type('rex_fund')
    export class rex_fund extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        balance!: Asset
    }
    @Struct.type('rex_loan')
    export class rex_loan extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        payment!: Asset
        @Struct.field(Asset)
        balance!: Asset
        @Struct.field(Asset)
        total_staked!: Asset
        @Struct.field(UInt64)
        loan_num!: UInt64
        @Struct.field(TimePoint)
        expiration!: TimePoint
    }
    @Struct.type('rex_order')
    export class rex_order extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        rex_requested!: Asset
        @Struct.field(Asset)
        proceeds!: Asset
        @Struct.field(Asset)
        stake_change!: Asset
        @Struct.field(TimePoint)
        order_time!: TimePoint
        @Struct.field('bool')
        is_open!: boolean
    }
    @Struct.type('rex_pool')
    export class rex_pool extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Asset)
        total_lent!: Asset
        @Struct.field(Asset)
        total_unlent!: Asset
        @Struct.field(Asset)
        total_rent!: Asset
        @Struct.field(Asset)
        total_lendable!: Asset
        @Struct.field(Asset)
        total_rex!: Asset
        @Struct.field(Asset)
        namebid_proceeds!: Asset
        @Struct.field(UInt64)
        loan_num!: UInt64
    }
    @Struct.type('rex_return_buckets')
    export class rex_return_buckets extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(pair_time_point_sec_int64, {array: true})
        return_buckets!: pair_time_point_sec_int64[]
    }
    @Struct.type('rex_return_pool')
    export class rex_return_pool extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(TimePointSec)
        last_dist_time!: TimePointSec
        @Struct.field(TimePointSec)
        pending_bucket_time!: TimePointSec
        @Struct.field(TimePointSec)
        oldest_bucket_time!: TimePointSec
        @Struct.field(Int64)
        pending_bucket_proceeds!: Int64
        @Struct.field(Int64)
        current_rate_of_increase!: Int64
        @Struct.field(Int64)
        proceeds!: Int64
    }
    @Struct.type('rexexec')
    export class rexexec extends Struct {
        @Struct.field(Name)
        user!: Name
        @Struct.field(UInt16)
        max!: UInt16
    }
    @Struct.type('rmvproducer')
    export class rmvproducer extends Struct {
        @Struct.field(Name)
        producer!: Name
    }
    @Struct.type('sellram')
    export class sellram extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Int64)
        bytes!: Int64
    }
    @Struct.type('sellrex')
    export class sellrex extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Asset)
        rex!: Asset
    }
    @Struct.type('setabi')
    export class setabi extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Bytes)
        abi!: Bytes
        @Struct.field('string', {optional: true})
        memo?: string
    }
    @Struct.type('setacctcpu')
    export class setacctcpu extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Int64, {optional: true})
        cpu_weight?: Int64
    }
    @Struct.type('setacctnet')
    export class setacctnet extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Int64, {optional: true})
        net_weight?: Int64
    }
    @Struct.type('setacctram')
    export class setacctram extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Int64, {optional: true})
        ram_bytes?: Int64
    }
    @Struct.type('setalimits')
    export class setalimits extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Int64)
        ram_bytes!: Int64
        @Struct.field(Int64)
        net_weight!: Int64
        @Struct.field(Int64)
        cpu_weight!: Int64
    }
    @Struct.type('setcode')
    export class setcode extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(UInt8)
        vmtype!: UInt8
        @Struct.field(UInt8)
        vmversion!: UInt8
        @Struct.field(Bytes)
        code!: Bytes
        @Struct.field('string', {optional: true})
        memo?: string
    }
    @Struct.type('setinflation')
    export class setinflation extends Struct {
        @Struct.field(Int64)
        annual_rate!: Int64
        @Struct.field(Int64)
        inflation_pay_factor!: Int64
        @Struct.field(Int64)
        votepay_factor!: Int64
    }
    @Struct.type('setparams')
    export class setparams extends Struct {
        @Struct.field(blockchain_parameters_v1)
        params!: blockchain_parameters_v1
    }
    @Struct.type('setpriv')
    export class setpriv extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(UInt8)
        is_priv!: UInt8
    }
    @Struct.type('setram')
    export class setram extends Struct {
        @Struct.field(UInt64)
        max_ram_size!: UInt64
    }
    @Struct.type('setramrate')
    export class setramrate extends Struct {
        @Struct.field(UInt16)
        bytes_per_block!: UInt16
    }
    @Struct.type('setrex')
    export class setrex extends Struct {
        @Struct.field(Asset)
        balance!: Asset
    }
    @Struct.type('undelegatebw')
    export class undelegatebw extends Struct {
        @Struct.field(Name)
        from!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        unstake_net_quantity!: Asset
        @Struct.field(Asset)
        unstake_cpu_quantity!: Asset
    }
    @Struct.type('unlinkauth')
    export class unlinkauth extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Name)
        code!: Name
        @Struct.field(Name)
        type!: Name
        @Struct.field(Name, {optional: true})
        authorized_by?: Name
    }
    @Struct.type('unregprod')
    export class unregprod extends Struct {
        @Struct.field(Name)
        producer!: Name
    }
    @Struct.type('unstaketorex')
    export class unstaketorex extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Name)
        receiver!: Name
        @Struct.field(Asset)
        from_net!: Asset
        @Struct.field(Asset)
        from_cpu!: Asset
    }
    @Struct.type('updateauth')
    export class updateauth extends Struct {
        @Struct.field(Name)
        account!: Name
        @Struct.field(Name)
        permission!: Name
        @Struct.field(Name)
        parent!: Name
        @Struct.field(authority)
        auth!: authority
        @Struct.field(Name, {optional: true})
        authorized_by?: Name
    }
    @Struct.type('updaterex')
    export class updaterex extends Struct {
        @Struct.field(Name)
        owner!: Name
    }
    @Struct.type('updtrevision')
    export class updtrevision extends Struct {
        @Struct.field(UInt8)
        revision!: UInt8
    }
    @Struct.type('user_resources')
    export class user_resources extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        net_weight!: Asset
        @Struct.field(Asset)
        cpu_weight!: Asset
        @Struct.field(Int64)
        ram_bytes!: Int64
    }
    @Struct.type('voteproducer')
    export class voteproducer extends Struct {
        @Struct.field(Name)
        voter!: Name
        @Struct.field(Name)
        proxy!: Name
        @Struct.field(Name, {array: true})
        producers!: Name[]
    }
    @Struct.type('voter_info')
    export class voter_info extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Name)
        proxy!: Name
        @Struct.field(Name, {array: true})
        producers!: Name[]
        @Struct.field(Int64)
        staked!: Int64
        @Struct.field(Float64)
        last_vote_weight!: Float64
        @Struct.field(Float64)
        proxied_vote_weight!: Float64
        @Struct.field('bool')
        is_proxy!: boolean
        @Struct.field(UInt32)
        flags1!: UInt32
        @Struct.field(UInt32)
        reserved2!: UInt32
        @Struct.field(Asset)
        reserved3!: Asset
    }
    @Struct.type('voteupdate')
    export class voteupdate extends Struct {
        @Struct.field(Name)
        voter_name!: Name
    }
    @Struct.type('wasmcfg')
    export class wasmcfg extends Struct {
        @Struct.field(Name)
        settings!: Name
    }
    @Struct.type('withdraw')
    export class withdraw extends Struct {
        @Struct.field(Name)
        owner!: Name
        @Struct.field(Asset)
        amount!: Asset
    }
    @Struct.type('limit_auth_change')
    export class limit_auth_change extends Struct {
        @Struct.field(UInt8)
        version!: UInt8
        @Struct.field(Name)
        account!: Name
        @Struct.field(Name, {array: true})
        allow_perms!: Name[]
        @Struct.field(Name, {array: true})
        disallow_perms!: Name[]
    }
}
export const TableMap = {
    abihash: Types.abi_hash,
    bidrefunds: Types.bid_refund,
    blockinfo: Types.block_info_record,
    cpuloan: Types.rex_loan,
    delband: Types.delegated_bandwidth,
    global: Types.eosio_global_state,
    global2: Types.eosio_global_state2,
    global3: Types.eosio_global_state3,
    global4: Types.eosio_global_state4,
    namebids: Types.name_bid,
    netloan: Types.rex_loan,
    'powup.order': Types.powerup_order,
    'powup.state': Types.powerup_state,
    producers: Types.producer_info,
    producers2: Types.producer_info2,
    rammarket: Types.exchange_state,
    refunds: Types.refund_request,
    retbuckets: Types.rex_return_buckets,
    rexbal: Types.rex_balance,
    rexfund: Types.rex_fund,
    rexpool: Types.rex_pool,
    rexqueue: Types.rex_order,
    rexretpool: Types.rex_return_pool,
    userres: Types.user_resources,
    voters: Types.voter_info,
    limitauthchg: Types.limit_auth_change,
}
export interface TableTypes {
    abihash: Types.abi_hash
    bidrefunds: Types.bid_refund
    blockinfo: Types.block_info_record
    cpuloan: Types.rex_loan
    delband: Types.delegated_bandwidth
    global: Types.eosio_global_state
    global2: Types.eosio_global_state2
    global3: Types.eosio_global_state3
    global4: Types.eosio_global_state4
    namebids: Types.name_bid
    netloan: Types.rex_loan
    'powup.order': Types.powerup_order
    'powup.state': Types.powerup_state
    producers: Types.producer_info
    producers2: Types.producer_info2
    rammarket: Types.exchange_state
    refunds: Types.refund_request
    retbuckets: Types.rex_return_buckets
    rexbal: Types.rex_balance
    rexfund: Types.rex_fund
    rexpool: Types.rex_pool
    rexqueue: Types.rex_order
    rexretpool: Types.rex_return_pool
    userres: Types.user_resources
    voters: Types.voter_info
    limitauthchg: Types.limit_auth_change
}
export type RowType<T> = T extends keyof TableTypes ? TableTypes[T] : any
export type TableNames = keyof TableTypes
export namespace ActionParams {
    export namespace Type {
        export interface permission_level {
            actor: NameType
            permission: NameType
        }
        export interface powerup_config {
            net: Type.powerup_config_resource
            cpu: Type.powerup_config_resource
            powerup_days: UInt32Type
            min_powerup_fee: AssetType
        }
        export interface powerup_config_resource {
            current_weight_ratio: Int64Type
            target_weight_ratio: Int64Type
            assumed_stake_weight: Int64Type
            target_timestamp: TimePointSec
            exponent: Float64Type
            decay_secs: UInt32Type
            min_price: AssetType
            max_price: AssetType
        }
        export interface authority {
            threshold: UInt32Type
            keys: Type.key_weight[]
            accounts: Type.permission_level_weight[]
            waits: Type.wait_weight[]
        }
        export interface key_weight {
            key: PublicKeyType
            weight: UInt16Type
        }
        export interface permission_level_weight {
            permission: Type.permission_level
            weight: UInt16Type
        }
        export interface wait_weight {
            wait_sec: UInt32Type
            weight: UInt16Type
        }
        export interface block_header {
            timestamp: UInt32Type
            producer: NameType
            confirmed: UInt16Type
            previous: Checksum256Type
            transaction_mroot: Checksum256Type
            action_mroot: Checksum256Type
            schedule_version: UInt32Type
            new_producers: Type.producer_schedule
        }
        export interface producer_schedule {
            version: UInt32Type
            producers: Type.producer_key[]
        }
        export interface producer_key {
            producer_name: NameType
            block_signing_key: PublicKeyType
        }
        export type variant_block_signing_authority_v0 =
            | Type.block_signing_authority_v0
            | Types.variant_block_signing_authority_v0
        export interface block_signing_authority_v0 {
            threshold: UInt32Type
            keys: Type.key_weight[]
        }
        export interface blockchain_parameters_v1 {
            max_action_return_value_size: UInt32Type
        }
    }
    export interface activate {
        feature_digest: Checksum256Type
    }
    export interface bidname {
        bidder: NameType
        newname: NameType
        bid: AssetType
    }
    export interface bidrefund {
        bidder: NameType
        newname: NameType
    }
    export interface buyram {
        payer: NameType
        receiver: NameType
        quant: AssetType
    }
    export interface buyrambytes {
        payer: NameType
        receiver: NameType
        bytes: UInt32Type
    }
    export interface buyramself {
        account: NameType
        quant: AssetType
    }
    export interface buyrex {
        from: NameType
        amount: AssetType
    }
    export interface canceldelay {
        canceling_auth: Type.permission_level
        trx_id: Checksum256Type
    }
    export interface cfgpowerup {
        args: Type.powerup_config
    }
    export interface claimrewards {
        owner: NameType
    }
    export interface closerex {
        owner: NameType
    }
    export interface cnclrexorder {
        owner: NameType
    }
    export interface consolidate {
        owner: NameType
    }
    export interface defcpuloan {
        from: NameType
        loan_num: UInt64Type
        amount: AssetType
    }
    export interface defnetloan {
        from: NameType
        loan_num: UInt64Type
        amount: AssetType
    }
    export interface delegatebw {
        from: NameType
        receiver: NameType
        stake_net_quantity: AssetType
        stake_cpu_quantity: AssetType
        transfer: boolean
    }
    export interface deleteauth {
        account: NameType
        permission: NameType
        authorized_by?: NameType
    }
    export interface deposit {
        owner: NameType
        amount: AssetType
    }
    export interface fundcpuloan {
        from: NameType
        loan_num: UInt64Type
        payment: AssetType
    }
    export interface fundnetloan {
        from: NameType
        loan_num: UInt64Type
        payment: AssetType
    }
    export interface init {
        version: VarUIntType
        core: Asset.SymbolType
    }
    export interface limitauthchg {
        account: NameType
        allow_perms: NameType[]
        disallow_perms: NameType[]
    }
    export interface linkauth {
        account: NameType
        code: NameType
        type: NameType
        requirement: NameType
        authorized_by?: NameType
    }
    export interface logbuyram {
        payer: NameType
        receiver: NameType
        quantity: AssetType
        bytes: Int64Type
        ram_bytes: Int64Type
    }
    export interface logramchange {
        owner: NameType
        bytes: Int64Type
        ram_bytes: Int64Type
    }
    export interface logsellram {
        account: NameType
        quantity: AssetType
        bytes: Int64Type
        ram_bytes: Int64Type
    }
    export interface mvfrsavings {
        owner: NameType
        rex: AssetType
    }
    export interface mvtosavings {
        owner: NameType
        rex: AssetType
    }
    export interface newaccount {
        creator: NameType
        name: NameType
        owner: Type.authority
        active: Type.authority
    }
    export interface onblock {
        header: Type.block_header
    }
    export interface onerror {
        sender_id: UInt128Type
        sent_trx: BytesType
    }
    export interface powerup {
        payer: NameType
        receiver: NameType
        days: UInt32Type
        net_frac: Int64Type
        cpu_frac: Int64Type
        max_payment: AssetType
    }
    export interface powerupexec {
        user: NameType
        max: UInt16Type
    }
    export interface ramburn {
        owner: NameType
        bytes: Int64Type
        memo: string
    }
    export interface ramtransfer {
        from: NameType
        to: NameType
        bytes: Int64Type
        memo: string
    }
    export interface refund {
        owner: NameType
    }
    export interface regproducer {
        producer: NameType
        producer_key: PublicKeyType
        url: string
        location: UInt16Type
    }
    export interface regproducer2 {
        producer: NameType
        producer_authority: Type.variant_block_signing_authority_v0
        url: string
        location: UInt16Type
    }
    export interface regproxy {
        proxy: NameType
        isproxy: boolean
    }
    export interface rentcpu {
        from: NameType
        receiver: NameType
        loan_payment: AssetType
        loan_fund: AssetType
    }
    export interface rentnet {
        from: NameType
        receiver: NameType
        loan_payment: AssetType
        loan_fund: AssetType
    }
    export interface rexexec {
        user: NameType
        max: UInt16Type
    }
    export interface rmvproducer {
        producer: NameType
    }
    export interface sellram {
        account: NameType
        bytes: Int64Type
    }
    export interface sellrex {
        from: NameType
        rex: AssetType
    }
    export interface setabi {
        account: NameType
        abi: BytesType
        memo?: string
    }
    export interface setacctcpu {
        account: NameType
        cpu_weight?: Int64Type
    }
    export interface setacctnet {
        account: NameType
        net_weight?: Int64Type
    }
    export interface setacctram {
        account: NameType
        ram_bytes?: Int64Type
    }
    export interface setalimits {
        account: NameType
        ram_bytes: Int64Type
        net_weight: Int64Type
        cpu_weight: Int64Type
    }
    export interface setcode {
        account: NameType
        vmtype: UInt8Type
        vmversion: UInt8Type
        code: BytesType
        memo?: string
    }
    export interface setinflation {
        annual_rate: Int64Type
        inflation_pay_factor: Int64Type
        votepay_factor: Int64Type
    }
    export interface setparams {
        params: Type.blockchain_parameters_v1
    }
    export interface setpriv {
        account: NameType
        is_priv: UInt8Type
    }
    export interface setram {
        max_ram_size: UInt64Type
    }
    export interface setramrate {
        bytes_per_block: UInt16Type
    }
    export interface setrex {
        balance: AssetType
    }
    export interface undelegatebw {
        from: NameType
        receiver: NameType
        unstake_net_quantity: AssetType
        unstake_cpu_quantity: AssetType
    }
    export interface unlinkauth {
        account: NameType
        code: NameType
        type: NameType
        authorized_by?: NameType
    }
    export interface unregprod {
        producer: NameType
    }
    export interface unstaketorex {
        owner: NameType
        receiver: NameType
        from_net: AssetType
        from_cpu: AssetType
    }
    export interface updateauth {
        account: NameType
        permission: NameType
        parent: NameType
        auth: Type.authority
        authorized_by?: NameType
    }
    export interface updaterex {
        owner: NameType
    }
    export interface updtrevision {
        revision: UInt8Type
    }
    export interface voteproducer {
        voter: NameType
        proxy: NameType
        producers: NameType[]
    }
    export interface voteupdate {
        voter_name: NameType
    }
    export interface wasmcfg {
        settings: NameType
    }
    export interface withdraw {
        owner: NameType
        amount: AssetType
    }
}
export interface ActionNameParams {
    activate: ActionParams.activate
    bidname: ActionParams.bidname
    bidrefund: ActionParams.bidrefund
    buyram: ActionParams.buyram
    buyrambytes: ActionParams.buyrambytes
    buyramself: ActionParams.buyramself
    buyrex: ActionParams.buyrex
    canceldelay: ActionParams.canceldelay
    cfgpowerup: ActionParams.cfgpowerup
    claimrewards: ActionParams.claimrewards
    closerex: ActionParams.closerex
    cnclrexorder: ActionParams.cnclrexorder
    consolidate: ActionParams.consolidate
    defcpuloan: ActionParams.defcpuloan
    defnetloan: ActionParams.defnetloan
    delegatebw: ActionParams.delegatebw
    deleteauth: ActionParams.deleteauth
    deposit: ActionParams.deposit
    fundcpuloan: ActionParams.fundcpuloan
    fundnetloan: ActionParams.fundnetloan
    init: ActionParams.init
    limitauthchg: ActionParams.limitauthchg
    linkauth: ActionParams.linkauth
    logbuyram: ActionParams.logbuyram
    logramchange: ActionParams.logramchange
    logsellram: ActionParams.logsellram
    mvfrsavings: ActionParams.mvfrsavings
    mvtosavings: ActionParams.mvtosavings
    newaccount: ActionParams.newaccount
    onblock: ActionParams.onblock
    onerror: ActionParams.onerror
    powerup: ActionParams.powerup
    powerupexec: ActionParams.powerupexec
    ramburn: ActionParams.ramburn
    ramtransfer: ActionParams.ramtransfer
    refund: ActionParams.refund
    regproducer: ActionParams.regproducer
    regproducer2: ActionParams.regproducer2
    regproxy: ActionParams.regproxy
    rentcpu: ActionParams.rentcpu
    rentnet: ActionParams.rentnet
    rexexec: ActionParams.rexexec
    rmvproducer: ActionParams.rmvproducer
    sellram: ActionParams.sellram
    sellrex: ActionParams.sellrex
    setabi: ActionParams.setabi
    setacctcpu: ActionParams.setacctcpu
    setacctnet: ActionParams.setacctnet
    setacctram: ActionParams.setacctram
    setalimits: ActionParams.setalimits
    setcode: ActionParams.setcode
    setinflation: ActionParams.setinflation
    setparams: ActionParams.setparams
    setpriv: ActionParams.setpriv
    setram: ActionParams.setram
    setramrate: ActionParams.setramrate
    setrex: ActionParams.setrex
    undelegatebw: ActionParams.undelegatebw
    unlinkauth: ActionParams.unlinkauth
    unregprod: ActionParams.unregprod
    unstaketorex: ActionParams.unstaketorex
    updateauth: ActionParams.updateauth
    updaterex: ActionParams.updaterex
    updtrevision: ActionParams.updtrevision
    voteproducer: ActionParams.voteproducer
    voteupdate: ActionParams.voteupdate
    wasmcfg: ActionParams.wasmcfg
    withdraw: ActionParams.withdraw
}
export type ActionNames = keyof ActionNameParams
export interface ActionReturnValues {
    buyram: Types.action_return_buyram
    buyrambytes: Types.action_return_buyram
    buyramself: Types.action_return_buyram
    ramburn: Types.action_return_ramtransfer
    ramtransfer: Types.action_return_ramtransfer
    sellram: Types.action_return_sellram
}
export type ActionReturnNames = keyof ActionReturnValues
export class Contract extends BaseContract {
    constructor(args: PartialBy<ContractArgs, 'abi' | 'account'>) {
        super({
            client: args.client,
            abi: abi,
            account: args.account || Name.from('eosio'),
        })
    }
    action<T extends ActionNames>(
        name: T,
        data: ActionNameParams[T],
        options?: ActionOptions
    ): Action {
        return super.action(name, data, options)
    }
    readonly<T extends ActionReturnNames>(
        name: T,
        data?: ActionNameParams[T]
    ): ActionReturnValues[T] {
        return super.readonly(name, data) as unknown as ActionReturnValues[T]
    }
    table<T extends TableNames>(name: T, scope?: NameType): Table<RowType<T>> {
        return super.table(name, scope, TableMap[name])
    }
}
